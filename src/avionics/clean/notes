-> I removed stuff to just make it work (i.e. no low_pass)

/* main.cpp for AE442
The purpose of this file is to perform all main function calls to achieve the following:

Note: files are included as they are for easy debugging
*/
#include "Arduino.h"
#include "quaternionFilters.h"
#include "MPU9250.h"
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

////// debug
    #include "util\debug.h"
      // All debug options are set at ::() initial value
      // Available values:
      // [].imu -> general serial output from IMU::(false)
      //    [].imu_AHRS -> provide verbose debug info::(true), provided [].imu is true
    debug bug;

////// IMU sub_files required constants
    // #define MPU9250_ADDRESS MPU9250_ADDRESS_AD0   
    // Use either this line or the next to select which I2C address your device is using
    #define MPU9250_ADDRESS MPU9250_ADDRESS_AD0
    #define I2Cclock 400000
    #define I2Cport Wire
    MPU9250 myIMU(MPU9250_ADDRESS, I2Cport, I2Cclock);
    // Pin definitions
    int intPin = 12;  // These can be changed, 2 and 3 are the Arduinos ext int pins
    int myLed  = 13;  // Set up pin 13 led for toggling
    // Other constants
    uint32_t timer = 0;
    uint32_t counter = 0;
    // include header files
    #include "Util\initailize\init_imu.h" // setup_IMU() -> intializes and zeros IMU
    #include "avionics\sensors\IMU\IMU.h" // update_IMU() -> automatically updates myIMU

////// low_pass cleaner
    #include "avionics\clean\low_pass.h" // lp structure, low_pass(lp, value)
    lp* pitch = (lp*)malloc(sizeof(lp));
    lp* roll = (lp*)malloc(sizeof(lp));
    lp* gx = (lp*)malloc(sizeof(lp));
    lp* gy = (lp*)malloc(sizeof(lp));

int loops = 0;
int j = 0;

void setup(){
  // Define debug settings (redefined for clarity)
  bug.imu = false; // output imu debug info?
  bug.imu_AHRS = true; // if output imu debug, output verbose info?
  bug.low_pass = true; // output low_pass debug?
  bug.low_pass_spam = true;

  // Setup sensors
  setup_IMU();

  // pitch low pass init
  pitch->index = 0; // zero index
  pitch->avg = 0.0; // zero avg
  pitch->beta = 0.2; // assign desired beta
  pitch->name = 0; // assign desired int value that defines name in get_name(int name)
  for(int i = 0; i <50; i++){  
    pitch->value[i] = 0.0; // zero all values 
  }
  
  // roll low pass init
  roll->index = 0;
  roll->avg = 0.0;
  roll->beta = 0.2;
  roll->name = 1;
  for(int i=0; i<50; i++){
    roll->value[i] = 0.0;
  }

  // init_lp(pitch,0.2, 0);
  // init_lp(roll, 0.2, 1);
  // init_lp(gx, 0.2, 2);
  // init_lp(gy, 0.2, 3);
}

void loop(){
  Serial.println("loop started");
  update_IMU(); // update myIMU
  
  Serial.println("updated IMU");
  loops += 1;
  Serial.println(loops);

  // Serial.println(pitch->name);
  // Serial.println(roll->name);
  // Serial.println(pitch->beta);
  // Serial.println(get_name(pitch->name));
  // Serial.println(get_name(roll->name));
  // Serial.println(get_name(gx->name));
  // Serial.println(get_name(gy->name));
  
 
  // if(!(myIMU.pitch == pitch->value[pitch->index])){
  //   low_pass(*pitch, myIMU.pitch); // clean pitch
  // }
  

  // // Check if IMU values have updated, if so then perform action
  // if(!(myIMU.pitch == pitch->value[pitch->index])){
  //   low_pass(*pitch, myIMU.pitch); // clean pitch
  // } if(!(myIMU.roll == roll->value[roll->index])){
  //   low_pass(*roll, myIMU.roll); // clean roll
  // } if(!(myIMU.gx == gx->value[gx->index])){
  //   low_pass(*gx, myIMU.roll); // clean gx
  // } if(!(myIMU.gy == gy->value[gy->index])){
  //   low_pass(*gy, myIMU.roll); // clean gy
  // } 
}