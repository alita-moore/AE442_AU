
.vsteensy/build/AE442_AU.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00005470 l    d  .fini	00000000 .fini
20000000 l    d  .data	00000000 .data
20000c90 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00002290 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
00002a2c l     F .text.itcm	0000005c schedule_transfer
00002a88 l     F .text.itcm	00000030 run_callbacks
00002ab8 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.0
00002b5c l     F .text.itcm	000005b8 isr
200016e8 l     O .bss	00000004 endpointN_notify_mask
200016f0 l     O .bss	00000004 endpoint0_notify_mask
200016f4 l     O .bss	00000001 usb_reboot_timer
200016f8 l     O .bss	00000008 endpoint0_setupdata
20001700 l     O .bss	00000008 reply_buffer
20001708 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000171c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20001720 l     O .bss	00000004 s_hotTemp
20001724 l     O .bss	00000004 s_hot_ROOM
20001728 l     O .bss	00000004 s_roomC_hotC
2000172c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20000c90 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20000c94 l       .bss	00000000 object.8610
60001728 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000790 l     F .text.itcm	00000018 _GLOBAL__sub_I_intPin
00000000 l    df *ABS*	00000000 quaternionFilters.cpp
00000f08 l     F .text.itcm	00000010 _GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff
20000da0 l     O .bss	00000004 beta
20000780 l     O .data	00000010 q
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 MPU9250.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00002330 l     F .text.itcm	00000028 rx_event
00002358 l     F .text.itcm	00000070 usb_serial_flush_callback
000023c8 l     F .text.itcm	0000015c usb_serial_write.part.1
20000da4 l     O .bss	00000700 txbuffer
200014a4 l     O .bss	00000001 tx_noautoflush
200014a5 l     O .bss	00000001 tx_head
200014a8 l     O .bss	000000c0 rx_buffer
20001568 l     O .bss	00000006 rx_index
20001570 l     O .bss	00000006 rx_count
20001580 l     O .bss	00000060 rx_transfer
200015e0 l     O .bss	00000002 tx_available
20001600 l     O .bss	000000e0 tx_transfer
200016e0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00003650 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000798 l     O .data	0000000a qualifier_descriptor
200007bc l     O .data	00000043 config_descriptor
20000800 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
20001730 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_atan.c
200006b8 l     O .data	00000020 atanlo
200006d8 l     O .data	00000020 atanhi
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
200006f8 l     O .data	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20000860 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
20200000 l       .bss.dma	00000000 _heap_start
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600016d0 l     F .text.progmem	00000008 __setup_veneer
600016d8 l     F .text.progmem	00000008 __memset_veneer
600016e0 l     F .text.progmem	00000008 __yield_veneer
600016e8 l     F .text.progmem	00000008 __delay_veneer
600016f0 l     F .text.progmem	00000008 __loop_veneer
600016f8 l     F .text.progmem	00000008 __pwm_init_veneer
60001700 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001708 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001710 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001718 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001720 l     F .text.progmem	00000008 __startup_late_hook_veneer
00005460 l     F .text.itcm	00000008 ___init_veneer
0000264c g     F .text.itcm	00000014 usb_serial_available
00000fa8 g     F .text.itcm	00000020 MPU9250::getMres()
0000229c g     F .text.itcm	00000002 startup_default_late_hook
00004fd4 g     F .text.itcm	0000000e fabs
00003758  w    F .text.itcm	000000a0 yield
00003fd8 g     F .text.itcm	000000a8 sqrt
200016ec g     O .bss	00000004 usb_timer1_callback
200007a4 g     O .data	00000018 usb_string_manufacturer_name_default
20001750 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
000017f8 g     F .text.itcm	000000e8 MPU9250::initAK8963(float*)
00003a14 g     F .text.itcm	00000020 Print::println()
00000f00 g     F .text.itcm	00000008 getQ()
60001574 g     F .text.progmem	00000058 analog_init
2000070c g     O .data	00000004 intPin
000011fc g     F .text.itcm	00000024 MPU9250::setupMagForSPI()
20000794 g     O .data	00000004 F_CPU_ACTUAL
00003c7c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00003928 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20000d9c g     O .bss	00000004 timer
20001748 g     O .bss	00000001 EventResponder::runningFromYield
00005260 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
00000f18 g     F .text.itcm	0000008e MPU9250::MPU9250(unsigned char, TwoWire&, unsigned long)
20001734 g     O .bss	00000004 EventResponder::firstInterrupt
0000325c g     F .text.itcm	00000028 usb_transfer_status
20000846 g     O .data	00000001 usb_enable_serial_event_processing
0000007c  w    F .text.itcm	00000024 Print::println(__FlashStringHelper const*)
000039f8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00000b50 g     F .text.itcm	000003b0 MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)
2000037c g     O .data	00000280 digital_pin_to_info_PGM
00000fc8 g     F .text.itcm	00000038 MPU9250::getGres()
600012ec g     O .text.progmem	0000004c TwoWire::i2c3_hardware
00005470 g       .text.itcm	00000000 _etext
20000c90 g       .bss	00000000 _sbss
000016ec g     F .text.itcm	00000022 MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
00001398 g     F .text.itcm	000000ce MPU9250::initMPU9250()
60001740 g       *ABS*	00000000 _stextload
00000400 g     F .text.itcm	00000390 loop
00003114 g     F .text.itcm	00000064 usb_config_rx
000038c0 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000094c g     F .text.itcm	000000b2 TwoWire::endTransmission(unsigned char)
20001738 g     O .bss	00000004 EventResponder::lastInterrupt
0000214c g     F .text.itcm	00000134 memcpy
20001718 g     O .bss	00000004 systick_millis_count
20001710 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00001000 g     F .text.itcm	0000002e MPU9250::getAres()
200007a4  w    O .data	00000018 usb_string_manufacturer_name
60001338 g     O .text.progmem	0000004c TwoWire::i2c1_hardware
000007d4  w    F .text.itcm	0000001e TwoWire::read()
000007a8  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001488 g     F .text.progmem	000000ec usb_init
20003280 g     O .bss	00000004 systick_safe_read
aaaaaaab g       *ABS*	00000000 _flexram_bank_config
20000000 g       .data	00000000 _sdata
00002298 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	0000026c ResetHandler
000025dc g     F .text.itcm	0000004c usb_serial_getchar
20001ac0 g     O .bss	00000008 usb_cdc_line_coding
00003674 g     F .text.itcm	0000000a digitalWrite
20001740 g     O .bss	00000004 EventResponder::lastYield
00003680 g     F .text.itcm	00000080 pinMode
00003ab8 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss	00000000 _heap_end
00001220 g     F .text.itcm	00000048 MPU9250::writeByteWire(unsigned char, unsigned char, unsigned char)
20000858 g     O .data	00000001 __fdlib_version
20001744 g     O .bss	00000004 EventResponder::firstYield
0000526c g     F .text.itcm	00000050 __libc_init_array
000007c8  w    F .text.itcm	0000000c TwoWire::available()
0000232c  w    F .text.itcm	00000004 abort
000022a0  w    F .text.itcm	0000008c HardFault_HandlerC
00000a00 g     F .text.itcm	000000d6 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
000039e0  w    F .text.itcm	00000004 usb_serial_class::clear()
60006bb4 g       *ABS*	00000000 _sdataload
2000174c g     O .bss	00000004 MillisTimer::listWaiting
200016e1 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001798 g     F .text.itcm	0000005e MPU9250::readMagData(short*)
600016c4 g     F .text.progmem	00000000 _init
00002524 g     F .text.itcm	00000002 usb_serial_reset
20000248 g     O .data	00000024 vtable for TwoWire
200032c0 g       .bss	00000000 _ebss
00005008 g     F .text.itcm	0000011c rint
00001304 g     F .text.itcm	0000006c MPU9250::readByteWire(unsigned char, unsigned char)
00001284 g     F .text.itcm	00000080 MPU9250::readMagByteSPI(unsigned char)
00001d10 g     F .text.itcm	0000043c MPU9250::MPU9250SelfTest(float*)
600012a0 g     O .text.progmem	0000004c TwoWire::i2c4_hardware
000042e8 g     F .text.itcm	000001dc __ieee754_atan2
00000001 g       *ABS*	00000000 _itcm_block_count
20002000 g     O .bss	00000020 endpoint0_transfer_data
00003398 g     F .text.itcm	000002b8 pwm_init
60001424 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20002020 g     O .bss	00000020 endpoint0_transfer_ack
20001ac8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00003210 g     F .text.itcm	00000028 usb_transmit
000039c0 g     F .text.itcm	00000020 systick_isr
20000848 g     O .data	00000010 Serial
2000176c g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00003a00  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00002298  w    F .text.itcm	00000002 startup_early_hook
00004080 g     F .text.itcm	00000264 __ieee754_asin
00002628 g     F .text.itcm	00000024 usb_serial_peekchar
00002798 g     F .text.itcm	00000294 set_arm_clock
20001714 g     O .bss	00000004 systick_cycle_count
20000830 g     O .data	00000016 usb_string_serial_number_default
000039f0  w    F .text.itcm	00000004 usb_serial_class::flush()
000039e8  w    F .text.itcm	00000004 usb_serial_class::read()
000031e0 g     F .text.itcm	0000002e usb_prepare_transfer
00003d50 g     F .text.itcm	00000004 atan2
000018e0 g     F .text.itcm	00000430 MPU9250::calibrateMPU9250(float*, float*)
00002280 g     F .text.itcm	00000018 unused_interrupt_vector
200016e4 g     O .bss	00000004 usb_timer0_callback
600015cc g     F .text.progmem	000000f8 tempmon_init
00003a08  w    F .text.itcm	0000000c serialEvent()
00002660 g     F .text.itcm	0000003c usb_serial_flush_input
000044c8 g     F .text.itcm	00000784 __ieee754_pow
00003d58 g     F .text.itcm	00000280 pow
0000269c g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20000668  w    O .data	00000028 vtable for usb_serial_class
00001468 g     F .text.itcm	000000a8 MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)
2000173c g     O .bss	00000004 MillisTimer::listActive
0000272c g     F .text.itcm	0000006c usb_serial_flush_output
20001800 g     O .bss	000002c0 _VectorsRam
00000f18 g     F .text.itcm	0000008e MPU9250::MPU9250(unsigned char, TwoWire&, unsigned long)
000052bc g     F .text.itcm	0000009a memset
00001754 g     F .text.itcm	00000044 MPU9250::readGyroData(short*)
20000708 g     O .data	00000004 myLed
20000cac g     O .bss	000000f0 myIMU
00004ff4 g     F .text.itcm	00000004 matherr
00003700 g     F .text.itcm	00000058 usb_init_serialnumber
60001734 g       .text.progmem	00000000 __init_array_end
20000238  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
000037f8 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00003344 g     F .text.itcm	00000054 micros
00000ad8 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
2000082c g     O .data	00000004 string0
000026c8 g     F .text.itcm	00000018 usb_serial_write
00004fe4 g     F .text.itcm	00000010 finite
0000229c  w    F .text.itcm	00000002 startup_late_hook
00001030 g     F .text.itcm	0000003c MPU9250::updateTime()
000039ec  w    F .text.itcm	00000004 usb_serial_class::available()
20003000 g     O .bss	00000280 endpoint_queue_head
20000814  w    O .data	00000016 usb_string_product_name
00005244 g     F .text.itcm	0000001a copysign
00003284 g     F .text.itcm	000000c0 delay
00001710 g     F .text.itcm	00000044 MPU9250::readAccelData(short*)
00005470 g     F .fini	00000000 _fini
00000810 g     F .text.itcm	00000030 TwoWire::write(unsigned char)
60001020 g     O .text.progmem	0000000c BootData
00004dd0 g     F .text.itcm	00000204 atan
00003ca4 g     F .text.itcm	000000ac asin
20000c88 g     O .data	00000004 _impure_ptr
00005128 g     F .text.itcm	0000011c scalbn
20000710 g     O .data	00000070 Wire
60001728 g       .text.progmem	00000000 __preinit_array_end
000007f4  w    F .text.itcm	00000018 TwoWire::peek()
0000080c  w    F .text.itcm	00000002 TwoWire::flush()
000000a0 g     F .text.itcm	00000360 setup
200005fc g     O .data	0000006c usb_descriptor_list
00001268 g     F .text.itcm	0000001c MPU9250::writeByte(unsigned char, unsigned char, unsigned char)
00004ff8 g     F .text.itcm	00000010 nan
00004c4c g     F .text.itcm	00000184 __ieee754_sqrt
20078000 g       .bss	00000000 _estack
000026e0 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00002528 g     F .text.itcm	000000b4 usb_serial_configure
00000840 g     F .text.itcm	0000003a TwoWire::write(unsigned char const*, unsigned int)
20000c90 g       .data	00000000 _edata
000039f4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00003c2c g     F .text.itcm	0000004e ultoa
0000087c g     F .text.itcm	000000d0 TwoWire::begin()
00003878 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
000039e4  w    F .text.itcm	00000004 usb_serial_class::peek()
60001728 g       .text.progmem	00000000 __init_array_start
20000790 g     O .data	00000004 F_BUS_ACTUAL
00001510 g     F .text.itcm	000001dc MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)
00000000 g       .text.itcm	00000000 _stext
00005380 g     F .text.itcm	000000dc strlen
20000814 g     O .data	00000016 usb_string_product_name_default
60001384 g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001728 g       .text.progmem	00000000 __preinit_array_start
00003238 g     F .text.itcm	00000024 usb_receive
00007840 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000038bc g     F .text.itcm	00000004 pendablesrvreq_isr
000007c4  w    F .text.itcm	00000004 Print::availableForWrite()
00001370 g     F .text.itcm	00000026 MPU9250::readByte(unsigned char, unsigned char)
0000106c g     F .text.itcm	00000190 MPU9250::writeByteSPI(unsigned char, unsigned char)
00003a34 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00003178 g     F .text.itcm	00000068 usb_config_tx
20000830  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`@x......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104a:	ldr	r1, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #464]	; (60001224 <ResetHandler+0x1f0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001072:	ldr	r1, [pc, #440]	; (6000122c <ResetHandler+0x1f8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109a:	ldr	r3, [pc, #412]	; (60001238 <ResetHandler+0x204>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #384]	; (6000123c <ResetHandler+0x208>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #384]	; (60001240 <ResetHandler+0x20c>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #380]	; (60001244 <ResetHandler+0x210>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #372]	; (60001248 <ResetHandler+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #372]	; (6000124c <ResetHandler+0x218>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #364]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #424]	; 60001294 <ResetHandler+0x260>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #420]	; 60001298 <ResetHandler+0x264>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #420]	; 6000129c <ResetHandler+0x268>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #276]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	60001384 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #292]	; (6000125c <ResetHandler+0x228>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #296]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #284]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #284]	; (6000126c <ResetHandler+0x238>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #288]	; (60001270 <ResetHandler+0x23c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #276]	; (6000127c <ResetHandler+0x248>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001424 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #260]	; (60001280 <ResetHandler+0x24c>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001700 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #236]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x258>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #188]	; (60001288 <ResetHandler+0x254>)
600011cc:	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x25c>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001718 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	60001488 <usb_init>
	analog_init();
600011e4:	bl	60001574 <analog_init>
	pwm_init();
600011e8:	bl	600016f8 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600015cc <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001720 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001710 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
60001200:	bl	600016d0 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
60001204:	bl	600016f0 <__loop_veneer>
		yield();
60001208:	bl	600016e0 <__yield_veneer>
6000120c:	b.n	60001204 <ResetHandler+0x1d0>
6000120e:	nop
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaab
60001218:	.word	0x20078000
6000121c:	.word	0x00000000
60001220:	.word	0x60001740
60001224:	.word	0x00005470
60001228:	.word	0x20000000
6000122c:	.word	0x60006bb4
60001230:	.word	0x20000c90
60001234:	.word	0x20000c90
60001238:	.word	0x200032c0
6000123c:	.word	0xe000ed88
60001240:	.word	0x200017fc
60001244:	.word	0x00002281
60001248:	.word	0xe000e400
6000124c:	.word	0xe000e4a0
60001250:	.word	0x400d8000
60001254:	.word	0x400fc000
60001258:	.word	0xe000ed08
6000125c:	.word	0xe000e014
60001260:	.word	0xe000e018
60001264:	.word	0x000038bd
60001268:	.word	0xe000edfc
6000126c:	.word	0x20200000
60001270:	.word	0x000039c1
60001274:	.word	0xe0001000
60001278:	.word	0xe0001004
6000127c:	.word	0x20001714
60001280:	.word	0x23c34600
60001284:	.word	0x40084000
60001288:	.word	0x400d4000
6000128c:	.word	0x56c00000
60001290:	.word	0x20001718
60001294:	.word	0x20001800
60001298:	.word	0x2018101b
6000129c:	.word	0x13110d0c

600012a0 <TwoWire::i2c4_hardware>:
600012a0:	...@............
600012b0:	...@............
	...
600012c8:	...........@....
600012d8:	................
600012e8:	....

600012ec <TwoWire::i2c3_hardware>:
600012ec:	p..@............
600012fc:	...@....$.......
6000130c:	...@............
6000131c:	...@....%.......
6000132c:	...@........

60001338 <TwoWire::i2c1_hardware>:
60001338:	p..@............
60001348:	...@............
	...
60001360:	...........@....
60001370:	................
60001380:	....

60001384 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
60001384:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001386:	ldr	r2, [pc, #100]	; (600013ec <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001388:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000138a:	ldr	r3, [pc, #100]	; (600013f0 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000138c:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001390:	ldr	r0, [pc, #96]	; (600013f4 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001392:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001394:	ldr	r6, [pc, #96]	; (600013f8 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001396:	ldr	r5, [pc, #100]	; (600013fc <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001398:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000139a:	ldr	r7, [pc, #100]	; (60001400 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000139c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a0:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013a2:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013a4:	ldr	r6, [pc, #92]	; (60001404 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013a6:	ldr	r5, [pc, #96]	; (60001408 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013a8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013aa:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013ac:	ldr	r7, [pc, #92]	; (6000140c <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ae:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b0:	ldr	r6, [pc, #92]	; (60001410 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013b2:	ldr	r5, [pc, #96]	; (60001414 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013b4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013b6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013b8:	ldr	r7, [pc, #92]	; (60001418 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013ba:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013bc:	ldr	r6, [pc, #92]	; (6000141c <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013be:	ldr	r5, [pc, #96]	; (60001420 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013c0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013c4:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013c6:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013c8:	dsb	sy
	asm("isb");
600013cc:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013d0:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013d4:	dsb	sy
	asm("isb");
600013d8:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013dc:	ldr.w	r3, [r2, #-136]
600013e0:	orr.w	r3, r3, #196608	; 0x30000
600013e4:	str.w	r3, [r2, #-136]
600013e8:	pop	{r4, r5, r6, r7, pc}
600013ea:	nop
600013ec:	.word	0xe000ed9c
600013f0:	.word	0xe000eda0
600013f4:	.word	0xe000ed94
600013f8:	.word	0x03080025
600013fc:	.word	0x00200011
60001400:	.word	0x07020021
60001404:	.word	0x20000012
60001408:	.word	0x13080025
6000140c:	.word	0x20200013
60001410:	.word	0x130b0027
60001414:	.word	0x40000014
60001418:	.word	0x13100033
6000141c:	.word	0x60000015
60001420:	.word	0x070b002f

60001424 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
60001424:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001426:	ldr	r2, [pc, #92]	; (60001484 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001428:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000142a:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000142e:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001432:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001436:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000143a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000143e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001440:	tst.w	r3, #2
60001444:	beq.n	60001454 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001446:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001448:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000144a:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000144e:	tst.w	r3, #2
60001452:	bne.n	60001446 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001454:	tst.w	r3, #8192	; 0x2000
60001458:	bne.n	6000145e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	str	r5, [r2, #20]
			continue;
6000145c:	b.n	6000143e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000145e:	tst.w	r3, #4096	; 0x1000
60001462:	bne.n	60001468 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001464:	str	r6, [r2, #20]
			continue;
60001466:	b.n	6000143e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001468:	cmp	r3, #0
6000146a:	bge.n	6000143e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000146c:	tst.w	r3, #65536	; 0x10000
60001470:	beq.n	60001476 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001472:	str	r1, [r2, #24]
			continue;
60001474:	b.n	6000143e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001476:	lsls	r3, r3, #25
60001478:	bmi.n	6000147e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000147a:	str	r7, [r2, #20]
			continue;
6000147c:	b.n	6000143e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000147e:	pop	{r4, r5, r6, r7}
60001480:	bx	lr
60001482:	nop
60001484:	.word	0x400d8000

60001488 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001488:	ldr	r3, [pc, #192]	; (6000154c <usb_init+0xc4>)
6000148a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000148e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001490:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001494:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001498:	bl	60001708 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000149c:	ldr	r1, [pc, #176]	; (60001550 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000149e:	ldr	r0, [pc, #180]	; (60001554 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014a0:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014a4:	ldr	r4, [pc, #176]	; (60001558 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014a6:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014aa:	ldr	r3, [pc, #176]	; (6000155c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600014ac:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014b0:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600014b4:	ldr	r2, [r4, #0]
600014b6:	ands	r3, r2
600014b8:	cbnz	r3, 600014c2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600014ba:	ldr.w	r3, [r0, #424]	; 0x1a8
600014be:	lsls	r2, r3, #30
600014c0:	beq.n	600014f8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600014c2:	ldr	r3, [pc, #144]	; (60001554 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600014c4:	mov.w	r1, #2147483648	; 0x80000000
600014c8:	ldr	r2, [pc, #140]	; (60001558 <usb_init+0xd0>)
600014ca:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600014cc:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600014ce:	ldr.w	r1, [r3, #320]	; 0x140
600014d2:	orr.w	r1, r1, #2
600014d6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600014da:	ldr.w	r3, [r2, #320]	; 0x140
600014de:	lsls	r3, r3, #30
600014e0:	bmi.n	600014da <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600014e2:	mov.w	r0, #131072	; 0x20000
600014e6:	ldr	r1, [pc, #120]	; (60001560 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600014e8:	ldr	r3, [pc, #108]	; (60001558 <usb_init+0xd0>)
600014ea:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600014ee:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600014f0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600014f2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600014f4:	bl	600016e8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600014f8:	ldr	r5, [pc, #104]	; (60001564 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600014fa:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600014fc:	ldr	r3, [pc, #88]	; (60001558 <usb_init+0xd0>)
600014fe:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001502:	ldr	r4, [pc, #80]	; (60001554 <usb_init+0xcc>)
60001504:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001506:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001508:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000150a:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000150c:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000150e:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001512:	mov.w	r2, #640	; 0x280
60001516:	bl	600016d8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000151a:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000151e:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001522:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001526:	ldr	r2, [pc, #64]	; (60001568 <usb_init+0xe0>)
60001528:	ldr	r1, [pc, #64]	; (6000156c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000152a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000152c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000152e:	str.w	r5, [r4, #344]	; 0x158
60001532:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001536:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000153a:	ldr	r2, [pc, #52]	; (60001570 <usb_init+0xe8>)
6000153c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001540:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001542:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001544:	str.w	r3, [r4, #320]	; 0x140
60001548:	pop	{r4, r5, r6, pc}
6000154a:	nop
6000154c:	.word	0x400d8000
60001550:	.word	0x400fc000
60001554:	.word	0x402e0000
60001558:	.word	0x400d9000
6000155c:	.word	0x001e1c00
60001560:	.word	0xe000e28c
60001564:	.word	0x20003000
60001568:	.word	0x20001800
6000156c:	.word	0x00002b5d
60001570:	.word	0xe000e10c

60001574 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001574:	ldr	r3, [pc, #68]	; (600015bc <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001576:	ldr	r1, [pc, #72]	; (600015c0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001578:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000157a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000157c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001580:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001582:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001584:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001588:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000158a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000158c:	orr.w	r0, r0, #768	; 0x300
60001590:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001592:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001594:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001596:	ldr	r3, [r2, #72]	; 0x48
60001598:	lsls	r3, r3, #24
6000159a:	bmi.n	60001596 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000159c:	ldr	r3, [pc, #36]	; (600015c4 <analog_init+0x50>)
6000159e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015a2:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015a4:	ldr	r2, [pc, #24]	; (600015c0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600015a6:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600015a8:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015aa:	ldr	r3, [r2, #72]	; 0x48
600015ac:	ands.w	r3, r3, #128	; 0x80
600015b0:	bne.n	600015aa <analog_init+0x36>
	calibrating = 0;
600015b2:	ldr	r2, [pc, #20]	; (600015c8 <analog_init+0x54>)
600015b4:	strb	r3, [r2, #0]
}
600015b6:	pop	{r4, r5}
600015b8:	bx	lr
600015ba:	nop
600015bc:	.word	0x400fc000
600015c0:	.word	0x400c4000
600015c4:	.word	0x400c8000
600015c8:	.word	0x2000171c

600015cc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015cc:	ldr	r2, [pc, #216]	; (600016a8 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600015ce:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600015d0:	ldr	r1, [pc, #216]	; (600016ac <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015d2:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015d6:	ldr	r3, [r2, #0]
600015d8:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600015dc:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015de:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600015e0:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600015e4:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600015e8:	ldr.w	lr, [pc, #212]	; 600016c0 <tempmon_init+0xf4>
600015ec:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600015ee:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600015f2:	ldr	r7, [pc, #188]	; (600016b0 <tempmon_init+0xe4>)
600015f4:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015f8:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015fc:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001600:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001604:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001608:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000160c:	vmov	s15, r0
60001610:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001614:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001616:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000161a:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000161e:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001622:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001624:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001628:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000162c:	ldr	r5, [pc, #132]	; (600016b4 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000162e:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001632:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001634:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001638:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000163c:	ldr	r6, [pc, #120]	; (600016b8 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000163e:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001642:	ldr	r1, [pc, #120]	; (600016bc <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001644:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001646:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001648:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000164c:	vmov	s15, r3
60001650:	vcvt.f32.u32	s15, s15
60001654:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001658:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000165c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001660:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001664:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001668:	vmov	r3, s11
6000166c:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001670:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001674:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001678:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000167a:	and.w	r1, r1, r0, lsl #16
6000167e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001682:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001686:	orrs	r3, r1
60001688:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000168c:	vmov	r3, s15
60001690:	ldr.w	r1, [r2, #272]	; 0x110
60001694:	ubfx	r3, r3, #0, #12
60001698:	orrs	r3, r1
6000169a:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000169e:	ldr	r3, [r2, #0]
600016a0:	orr.w	r3, r3, #2
600016a4:	str	r3, [r2, #0]
600016a6:	pop	{r4, r5, r6, r7, pc}
600016a8:	.word	0x400d8180
600016ac:	.word	0x401f4400
600016b0:	.word	0x20001728
600016b4:	.word	0x20001724
600016b8:	.word	0x2000172c
600016bc:	.word	0x0fff0000
600016c0:	.word	0x20001720

600016c4 <_init>:
600016c4:	push	{r3, r4, r5, r6, r7, lr}
600016c6:	nop
600016c8:	pop	{r3, r4, r5, r6, r7}
600016ca:	pop	{r3}
600016cc:	mov	lr, r3
600016ce:	bx	lr

600016d0 <__setup_veneer>:
600016d0:	ldr.w	pc, [pc]	; 600016d4 <__setup_veneer+0x4>
600016d4:	.word	0x000000a1

600016d8 <__memset_veneer>:
600016d8:	ldr.w	pc, [pc]	; 600016dc <__memset_veneer+0x4>
600016dc:	.word	0x000052bd

600016e0 <__yield_veneer>:
600016e0:	ldr.w	pc, [pc]	; 600016e4 <__yield_veneer+0x4>
600016e4:	.word	0x00003759

600016e8 <__delay_veneer>:
600016e8:	ldr.w	pc, [pc]	; 600016ec <__delay_veneer+0x4>
600016ec:	.word	0x00003285

600016f0 <__loop_veneer>:
600016f0:	ldr.w	pc, [pc]	; 600016f4 <__loop_veneer+0x4>
600016f4:	.word	0x00000401

600016f8 <__pwm_init_veneer>:
600016f8:	ldr.w	pc, [pc]	; 600016fc <__pwm_init_veneer+0x4>
600016fc:	.word	0x00003399

60001700 <__set_arm_clock_veneer>:
60001700:	ldr.w	pc, [pc]	; 60001704 <__set_arm_clock_veneer+0x4>
60001704:	.word	0x00002799

60001708 <__usb_init_serialnumber_veneer>:
60001708:	ldr.w	pc, [pc]	; 6000170c <__usb_init_serialnumber_veneer+0x4>
6000170c:	.word	0x00003701

60001710 <____libc_init_array_veneer>:
60001710:	ldr.w	pc, [pc]	; 60001714 <____libc_init_array_veneer+0x4>
60001714:	.word	0x0000526d

60001718 <__startup_early_hook_veneer>:
60001718:	ldr.w	pc, [pc]	; 6000171c <__startup_early_hook_veneer+0x4>
6000171c:	.word	0x00002299

60001720 <__startup_late_hook_veneer>:
60001720:	ldr.w	pc, [pc]	; 60001724 <__startup_late_hook_veneer+0x4>
60001724:	.word	0x0000229d

60001728 <__init_array_start>:
60001728:	.word	0x00000045
6000172c:	.word	0x00000791
60001730:	.word	0x00000f09

60001734 <__init_array_end>:
60001734:	.word	0xffffffff
60001738:	.word	0xffffffff
6000173c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	.word	0xbd107023
      38:	lsrs	r0, r2, #18
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	strb	r4, [r6, r1]
	...

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	lsrs	r4, r2, #18
      6e:	.short	0x2000
      70:	strb	r4, [r6, r1]
      72:	movs	r0, r0
      74:	.word	0x20000c90
      78:	movs	r0, r0
	...

0000007c <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
      7c:	.word	0x4604b538
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
      80:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
      82:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
      84:	.word	0xf97cf005
      88:	ldr	r3, [r4, #0]
      8a:	mov	r2, r0
      8c:	.word	0x46204629
      90:	ldr	r3, [r3, #4]
      92:	.short	0x4798
      94:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
      96:	mov	r0, r4
      98:	bl	3a14 <Print::println()>
      9c:	add	r0, r5
      9e:	pop	{r3, r4, r5, pc}

000000a0 <setup>:
#define MPU9250_ADDRESS MPU9250_ADDRESS_AD0

MPU9250 myIMU(MPU9250_ADDRESS, I2Cport, I2Cclock);

void setup()
{
      a0:	push	{r4, r5, r6, lr}
  Wire.begin();
      a2:	ldr	r0, [pc, #748]	; (390 <setup+0x2f0>)
      a4:	bl	87c <TwoWire::begin()>
      a8:	ldr	r6, [pc, #744]	; (394 <setup+0x2f4>)
      aa:	.short	0x4abb
      ac:	ldr	r1, [pc, #748]	; (39c <setup+0x2fc>)
      ae:	.short	0x4cbc
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      b0:	ldrb	r3, [r2, #0]
      b2:	.short	0x2b00
      b4:	beq.n	b0 <setup+0x10>
      b6:	ldrb	r3, [r1, #0]
      b8:	.word	0xd5f907db
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      bc:	ldr	r3, [r6, #0]
      be:	.short	0x6820
      c0:	ldr	r5, [pc, #720]	; (394 <setup+0x2f4>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      c2:	.short	0x1a1b
      c4:	cmp	r3, #14
      c6:	.short	0xd9f3
  Serial.begin(38400);

  while(!Serial){};

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
      c8:	ldr	r4, [pc, #728]	; (3a4 <setup+0x304>)
      ca:	.short	0x2100
  digitalWrite(intPin, LOW);
  pinMode(myLed, OUTPUT);
      cc:	ldr	r6, [pc, #728]	; (3a8 <setup+0x308>)
  Serial.begin(38400);

  while(!Serial){};

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
      ce:	ldrb	r0, [r4, #0]
      d0:	.word	0xfad6f003
  digitalWrite(intPin, LOW);
      d4:	ldrb	r0, [r4, #0]
      d6:	.short	0x2100
  pinMode(myLed, OUTPUT);
  digitalWrite(myLed, HIGH);

  // Read the WHO_AM_I register, this is a good test of communication
  byte c = myIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
      d8:	ldr	r4, [pc, #720]	; (3ac <setup+0x30c>)

  while(!Serial){};

  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(intPin, INPUT);
  digitalWrite(intPin, LOW);
      da:	.short	0xf003
      dc:			; <UNDEFINED> instruction: 0xfacb7830
  pinMode(myLed, OUTPUT);
      e0:	.word	0xf0032101
      e4:			; <UNDEFINED> instruction: 0xfacd7830
  digitalWrite(myLed, HIGH);
      e8:	.word	0xf0032101
      ec:			; <UNDEFINED> instruction: 0xfac32275

  // Read the WHO_AM_I register, this is a good test of communication
  byte c = myIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
      f0:	.word	0x46202168
      f4:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
      f8:	.word	0x210f4606
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      fc:	ldr	r0, [pc, #688]	; (3b0 <setup+0x310>)
      fe:	bl	26c8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     102:	.short	0x2300
     104:	movs	r2, #16
     106:	.short	0x4631
     108:	ldr	r0, [pc, #680]	; (3b4 <setup+0x314>)
     10a:	.short	0xf003
     10c:	ldc2	1, cr2, [r3], {15}
     110:	.word	0xf00248a9
     114:			; <UNDEFINED> instruction: 0xfad92300
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     118:	.word	0x21712210
     11c:	ldr	r0, [pc, #660]	; (3b4 <setup+0x314>)
     11e:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
     122:	.short	0x48a4
     124:	bl	3a14 <Print::println()>
  Serial.print(F("MPU9250 I AM 0x"));
  Serial.print(c, HEX);
  Serial.print(F(" I should be 0x"));
  Serial.println(0x71, HEX);

  if (c == 0x71) // WHO_AM_I should always be 0x71
     128:	.word	0xf0402e71
     12c:	strh	r3, [r3, #8]
     12e:	.short	0x2114
     130:	ldr	r0, [pc, #648]	; (3bc <setup+0x31c>)
     132:	.short	0xf002
     134:			; <UNDEFINED> instruction: 0xfac9489f
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     138:	.word	0xfc6cf003
  {
    Serial.println(F("MPU9250 is online..."));

    // Start by performing self test and reporting values
    myIMU.MPU9250SelfTest(myIMU.selfTest);
     13c:	add.w	r1, r4, #208	; 0xd0
     140:	.word	0xf0014620
     144:	stc2l	1, cr2, [r5, #180]!	; 0xb4
     148:	.word	0xf002489d
     14c:			; <UNDEFINED> instruction: 0xfabded94
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     150:	.word	0x21010a34
     154:	ldr	r0, [pc, #604]	; (3b4 <setup+0x314>)
     156:	.short	0xeeb7
     158:	lsrs	r0, r0, #11
     15a:	.short	0xf003
     15c:	stc2	1, cr2, [sp], #72	; 0x48
     160:	.word	0xf0024898
     164:			; <UNDEFINED> instruction: 0xfab14893
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     168:	bl	3a14 <Print::println()>
     16c:	.word	0x4896212d
     170:	bl	26c8 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     174:	.word	0x0a35ed94
     178:	movs	r1, #1
     17a:	.short	0x488e
     17c:	vcvt.f64.f32	d0, s0
     180:	bl	3ab8 <Print::printFloat(double, unsigned char)>
     184:	.word	0x488f2112
     188:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     18c:	ldr	r0, [pc, #548]	; (3b4 <setup+0x314>)
     18e:	bl	3a14 <Print::println()>
     192:	movs	r1, #45	; 0x2d
     194:	ldr	r0, [pc, #564]	; (3cc <setup+0x32c>)
     196:	.short	0xf002
     198:			; <UNDEFINED> instruction: 0xfa97ed94
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     19c:	.word	0x21010a36
     1a0:	ldr	r0, [pc, #528]	; (3b4 <setup+0x314>)
     1a2:	.short	0xeeb7
     1a4:	lsrs	r0, r0, #11
     1a6:	bl	3ab8 <Print::printFloat(double, unsigned char)>
     1aa:	movs	r1, #18
     1ac:	ldr	r0, [pc, #532]	; (3c4 <setup+0x324>)
     1ae:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     1b2:	.short	0x4880
     1b4:	bl	3a14 <Print::println()>
     1b8:	.word	0x48852129
     1bc:	bl	26c8 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     1c0:	vldr	s0, [r4, #220]	; 0xdc
     1c4:	movs	r1, #1
     1c6:	.short	0x487b
     1c8:	vcvt.f64.f32	d0, s0
     1cc:	.word	0xfc74f003
     1d0:	movs	r1, #18
     1d2:	ldr	r0, [pc, #496]	; (3c4 <setup+0x324>)
     1d4:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     1d8:	ldr	r0, [pc, #472]	; (3b4 <setup+0x314>)
     1da:	.short	0xf003
     1dc:	ldc2	1, cr2, [fp], {41}	; 0x29
     1e0:	.word	0xf002487c
     1e4:			; <UNDEFINED> instruction: 0xfa71ed94
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     1e8:	lsrs	r0, r7, #8
     1ea:	.short	0x2101
     1ec:	ldr	r0, [pc, #452]	; (3b4 <setup+0x314>)
     1ee:	.short	0xeeb7
     1f0:	lsrs	r0, r0, #11
     1f2:	.short	0xf003
     1f4:	stc2l	1, cr2, [r1], #-72	; 0xffffffb8
     1f8:	.word	0xf0024872
     1fc:			; <UNDEFINED> instruction: 0xfa65486d
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     200:	bl	3a14 <Print::println()>
     204:	.word	0x48742129
     208:	bl	26c8 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     20c:	.word	0x0a39ed94
     210:	movs	r1, #1
     212:	.short	0x4868
     214:	vcvt.f64.f32	d0, s0
     218:	.word	0xfc4ef003
     21c:	movs	r1, #18
     21e:	ldr	r0, [pc, #420]	; (3c4 <setup+0x324>)
     220:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     224:	.word	0xf0034863
     228:			; <UNDEFINED> instruction: 0xfbf5f104
    Serial.print(myIMU.selfTest[4],1); Serial.println("% of factory value");
    Serial.print(F("z-axis self test: gyration trim within : "));
    Serial.print(myIMU.selfTest[5],1); Serial.println("% of factory value");

    // Calibrate gyro and accelerometers, load biases in bias registers
    myIMU.calibrateMPU9250(myIMU.gyroBias, myIMU.accelBias);
     22c:	lsls	r4, r5, #10
     22e:	add.w	r1, r4, #160	; 0xa0
     232:	mov	r0, r4
     234:	bl	18e0 <MPU9250::calibrateMPU9250(float*, float*)>

    myIMU.initMPU9250();
     238:	mov	r0, r4
     23a:	bl	1398 <MPU9250::initMPU9250()>
     23e:	movs	r1, #44	; 0x2c
     240:	ldr	r0, [pc, #408]	; (3dc <setup+0x33c>)
     242:	.short	0xf002
     244:			; <UNDEFINED> instruction: 0xfa41485b
     248:	.word	0xfbe4f003
    // temperature
    Serial.println("MPU9250 initialized for active data mode....");

    // Read the WHO_AM_I register of the magnetometer, this is a good test of
    // communication
    byte d = myIMU.readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
     24c:	movs	r2, #0
     24e:	.short	0x210c
     250:	mov	r0, r4
     252:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
     256:	movs	r1, #7
     258:	mov	r6, r0
     25a:	ldr	r0, [pc, #388]	; (3e0 <setup+0x340>)
     25c:	bl	26c8 <usb_serial_write>
     260:	movs	r1, #7
     262:	ldr	r0, [pc, #384]	; (3e4 <setup+0x344>)
     264:	bl	26c8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     268:	movs	r3, #0
     26a:	movs	r2, #16
     26c:	mov	r1, r6
     26e:	ldr	r0, [pc, #324]	; (3b4 <setup+0x314>)
     270:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     274:	movs	r1, #15
     276:	ldr	r0, [pc, #320]	; (3b8 <setup+0x318>)
     278:	bl	26c8 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     27c:	movs	r3, #0
     27e:	movs	r2, #16
     280:	movs	r1, #72	; 0x48
     282:	ldr	r0, [pc, #304]	; (3b4 <setup+0x314>)
     284:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
     288:	ldr	r0, [pc, #296]	; (3b4 <setup+0x314>)
     28a:	bl	3a14 <Print::println()>
    Serial.print(d, HEX);
    Serial.print(" I should be 0x");
    Serial.println(0x48, HEX);


    if (d != 0x48)
     28e:	cmp	r6, #72	; 0x48
     290:	bne.n	37e <setup+0x2de>
      Serial.flush();
      abort();
    }

    // Get magnetometer calibration from AK8963 ROM
    myIMU.initAK8963(myIMU.factoryMagCalibration);
     292:	add.w	r1, r4, #136	; 0x88
     296:	mov	r0, r4
     298:	bl	17f8 <MPU9250::initAK8963(float*)>
     29c:	movs	r1, #43	; 0x2b
     29e:	ldr	r0, [pc, #328]	; (3e8 <setup+0x348>)
     2a0:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     2a4:	ldr	r0, [pc, #268]	; (3b4 <setup+0x314>)
     2a6:	bl	3a14 <Print::println()>
      Serial.print("Z-Axis factory sensitivity adjustment value ");
      Serial.println(myIMU.factoryMagCalibration[2], 2);
    }

    // Get sensor resolutions, only need to do this once
    myIMU.getAres();
     2aa:	mov	r0, r4
     2ac:	bl	1000 <MPU9250::getAres()>
    myIMU.getGres();
     2b0:	mov	r0, r4
     2b2:	bl	fc8 <MPU9250::getGres()>
    myIMU.getMres();
     2b6:	mov	r0, r4
     2b8:	bl	fa8 <MPU9250::getMres()>
     2bc:	movs	r1, #22
     2be:	ldr	r0, [pc, #300]	; (3ec <setup+0x34c>)
     2c0:	bl	26c8 <usb_serial_write>
     2c4:	ldr	r0, [pc, #236]	; (3b4 <setup+0x314>)
     2c6:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2ca:	vldr	s0, [r4, #184]	; 0xb8
     2ce:	movs	r1, #2
     2d0:	ldr	r0, [pc, #224]	; (3b4 <setup+0x314>)
     2d2:	vcvt.f64.f32	d0, s0
     2d6:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     2da:	ldr	r0, [pc, #216]	; (3b4 <setup+0x314>)
     2dc:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2e0:	vldr	s0, [r4, #188]	; 0xbc
     2e4:	movs	r1, #2
     2e6:	ldr	r0, [pc, #204]	; (3b4 <setup+0x314>)
     2e8:	vcvt.f64.f32	d0, s0
     2ec:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     2f0:	ldr	r0, [pc, #192]	; (3b4 <setup+0x314>)
     2f2:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     2f6:	vldr	s0, [r4, #192]	; 0xc0
     2fa:	movs	r1, #2
     2fc:	ldr	r0, [pc, #180]	; (3b4 <setup+0x314>)
     2fe:	vcvt.f64.f32	d0, s0
     302:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     306:	ldr	r0, [pc, #172]	; (3b4 <setup+0x314>)
     308:	bl	3a14 <Print::println()>
     30c:	movs	r1, #21
     30e:	ldr	r0, [pc, #224]	; (3f0 <setup+0x350>)
     310:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     314:	ldr	r0, [pc, #156]	; (3b4 <setup+0x314>)
     316:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     31a:	vldr	s0, [r4, #196]	; 0xc4
     31e:	movs	r1, #2
     320:	ldr	r0, [pc, #144]	; (3b4 <setup+0x314>)
     322:	vcvt.f64.f32	d0, s0
     326:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     32a:	ldr	r0, [pc, #136]	; (3b4 <setup+0x314>)
     32c:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     330:	vldr	s0, [r4, #200]	; 0xc8
     334:	movs	r1, #2
     336:	ldr	r0, [pc, #124]	; (3b4 <setup+0x314>)
     338:	vcvt.f64.f32	d0, s0
     33c:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     340:	ldr	r0, [pc, #112]	; (3b4 <setup+0x314>)
     342:	bl	3a14 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     346:	vldr	s0, [r4, #204]	; 0xcc
     34a:	movs	r1, #2
     34c:	ldr	r0, [pc, #100]	; (3b4 <setup+0x314>)
     34e:	vcvt.f64.f32	d0, s0
     352:	bl	3ab8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     356:	ldr	r0, [pc, #92]	; (3b4 <setup+0x314>)
     358:	bl	3a14 <Print::println()>
     35c:	ldr	r2, [r5, #0]
    Serial.println(F("Communication failed, abort!"));
    Serial.flush();
    abort();
  }

  timer = millis();
     35e:	ldr	r3, [pc, #148]	; (3f4 <setup+0x354>)
     360:	str	r2, [r3, #0]
}
     362:	pop	{r4, r5, r6, pc}
     364:	movs	r1, #32
     366:	ldr	r0, [pc, #144]	; (3f8 <setup+0x358>)
     368:	bl	26c8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     36c:	mov	r1, r6
     36e:	movs	r3, #0
     370:	movs	r2, #16
     372:	ldr	r0, [pc, #64]	; (3b4 <setup+0x314>)
     374:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     378:	ldr	r0, [pc, #56]	; (3b4 <setup+0x314>)
     37a:	bl	3a14 <Print::println()>
  {
    Serial.print("Could not connect to MPU9250: 0x");
    Serial.println(c, HEX);

    // Communication failed, stop here
    Serial.println(F("Communication failed, abort!"));
     37e:	ldr	r1, [pc, #124]	; (3fc <setup+0x35c>)
     380:	ldr	r0, [pc, #48]	; (3b4 <setup+0x314>)
     382:	bl	7c <Print::println(__FlashStringHelper const*)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     386:	bl	272c <usb_serial_flush_output>
    Serial.flush();
    abort();
     38a:	bl	232c <abort>
     38e:	nop
     390:	.word	0x20000710
     394:	.word	0x20001718
     398:	.word	0x20001710
     39c:	.word	0x200016e1
     3a0:	.word	0x20001ac8
     3a4:	.word	0x2000070c
     3a8:	.word	0x20000708
     3ac:	.word	0x20000cac
     3b0:	.word	0x20000228
     3b4:	.word	0x20000848
     3b8:	.word	0x20000178
     3bc:	.word	0x20000000
     3c0:	.word	0x20000018
     3c4:	.word	0x20000048
     3c8:	.word	0x2000005c
     3cc:	.word	0x2000008c
     3d0:	.word	0x200000bc
     3d4:	.word	0x200000e8
     3d8:	.word	0x20000114
     3dc:	.word	0x20000140
     3e0:	.word	0x20000170
     3e4:	.word	0x20000230
     3e8:	.word	0x200001a8
     3ec:	.word	0x200001d4
     3f0:	.word	0x200001ec
     3f4:	.word	0x20000d9c
     3f8:	.word	0x20000204
     3fc:	.word	0x20000188

00000400 <loop>:

  timer = millis();
}

void loop()
{
     400:	push	{r3, r4, r5, r6, r7, lr}
     402:	ldr	r6, [pc, #892]	; (780 <loop+0x380>)

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     404:	movs	r3, #0
  Serial.println(millis()-timer);
     406:	ldr	r5, [pc, #892]	; (784 <loop+0x384>)
     408:	movs	r2, #10
     40a:	ldr	r4, [r6, #0]
     40c:	ldr	r1, [r5, #0]
     40e:	ldr	r0, [pc, #888]	; (788 <loop+0x388>)
     410:	subs	r1, r4, r1
  timer = millis();
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
     412:	ldr	r4, [pc, #888]	; (78c <loop+0x38c>)

  timer = millis();
}

void loop()
{
     414:	vpush	{d8-d10}
     418:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     41c:	ldr	r0, [pc, #872]	; (788 <loop+0x388>)
     41e:	bl	3a14 <Print::println()>
     422:	ldr	r3, [r6, #0]
  Serial.println(millis()-timer);
  timer = millis();
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
     424:	mov	r0, r4
     426:	movs	r2, #58	; 0x3a
     428:	movs	r1, #104	; 0x68
}

void loop()
{
  Serial.println(millis()-timer);
  timer = millis();
     42a:	str	r3, [r5, #0]
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
     42c:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
     430:	lsls	r3, r0, #31
     432:	bmi.w	666 <loop+0x266>
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
  } // if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)

  // Must be called before updating quaternions!
  myIMU.updateTime();
     436:	ldr	r5, [pc, #852]	; (78c <loop+0x38c>)
     438:	ldr	r7, [pc, #836]	; (780 <loop+0x380>)
     43a:	mov	r0, r5
     43c:	bl	1030 <MPU9250::updateTime()>
  // along the x-axis just like in the LSM9DS0 sensor. This rotation can be
  // modified to allow any convenient orientation convention. This is ok by
  // aircraft orientation standards! Pass gyro rate as rad/s
  MahonyQuaternionUpdate(myIMU.ax, myIMU.ay, myIMU.az, myIMU.gx * DEG_TO_RAD,
                         myIMU.gy * DEG_TO_RAD, myIMU.gz * DEG_TO_RAD, myIMU.my,
                         myIMU.mx, myIMU.mz, myIMU.deltat);
     440:	vldr	s10, [r4, #120]	; 0x78
     444:	vldr	s12, [r4, #116]	; 0x74
     448:	vldr	s14, [r4, #112]	; 0x70
     44c:	vcvt.f64.f32	d5, s10
     450:	vcvt.f64.f32	d6, s12
     454:	vldr	s9, [r4, #56]	; 0x38
     458:	vcvt.f64.f32	d7, s14
     45c:	vldr	s8, [r4, #132]	; 0x84
     460:	vldr	s7, [r4, #124]	; 0x7c
     464:	vldr	s6, [r4, #128]	; 0x80
     468:	vldr	s2, [r4, #108]	; 0x6c
     46c:	vldr	s1, [r4, #104]	; 0x68
     470:	vldr	s0, [r4, #100]	; 0x64
     474:	vldr	d2, [pc, #760]	; 770 <loop+0x370>
     478:	vmul.f64	d7, d7, d2
     47c:	vmul.f64	d5, d5, d2
     480:	vmul.f64	d6, d6, d2
     484:	vcvt.f32.f64	s3, d7
     488:	vcvt.f32.f64	s5, d5
     48c:	vcvt.f32.f64	s4, d6
     490:	bl	b50 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)>
     494:	ldr	r3, [r6, #0]
    } // if (myIMU.delt_t > 500)
  } // if (!AHRS)
  else
  {
    // Serial print and/or display at 0.5 s rate independent of data rates
    myIMU.delt_t = millis() - myIMU.count;
     496:	ldr	r2, [r4, #48]	; 0x30
     498:	subs	r3, r3, r2

    // update LCD once per half-second independent of read rate
    if (myIMU.delt_t > 500)
     49a:	cmp.w	r3, #500	; 0x1f4
    } // if (myIMU.delt_t > 500)
  } // if (!AHRS)
  else
  {
    // Serial print and/or display at 0.5 s rate independent of data rates
    myIMU.delt_t = millis() - myIMU.count;
     49e:	str	r3, [r4, #44]	; 0x2c

    // update LCD once per half-second independent of read rate
    if (myIMU.delt_t > 500)
     4a0:	bls.w	660 <loop+0x260>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
     4a4:	bl	f00 <getQ()>
     4a8:	vldr	s18, [r0, #4]
     4ac:	bl	f00 <getQ()>
     4b0:	vldr	s17, [r0, #8]
     4b4:	bl	f00 <getQ()>
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
     4b8:	vldr	s16, [r0]
     4bc:	bl	f00 <getQ()>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
     4c0:	vldr	s15, [r0, #12]
     4c4:	vmul.f32	s16, s16, s15
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
     4c8:	bl	f00 <getQ()>
     4cc:	vldr	s20, [r0]
     4d0:	bl	f00 <getQ()>
     4d4:	vldr	s19, [r0]
     4d8:	bl	f00 <getQ()>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
     4dc:	vfma.f32	s16, s18, s17
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
     4e0:	vldr	s18, [r0, #4]
     4e4:	bl	f00 <getQ()>
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
     4e8:	vldr	s2, [r0, #4]
     4ec:	vmul.f32	s18, s18, s2
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
     4f0:	bl	f00 <getQ()>
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
     4f4:	vfma.f32	s18, s20, s19
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
     4f8:	vldr	s19, [r0, #8]
     4fc:	bl	f00 <getQ()>
     500:	vldr	s15, [r0, #8]
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
     504:	vadd.f32	s16, s16, s16
     508:	vcvt.f64.f32	d8, s16
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
     50c:	vfms.f32	s18, s19, s15
     510:	bl	f00 <getQ()>
                    * *(getQ()+3));
     514:	vldr	s19, [r0, #12]
     518:	bl	f00 <getQ()>
// must be applied in the correct order which for this configuration is yaw,
// pitch, and then roll.
// For more see
// http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
     51c:	vldr	s15, [r0, #12]
     520:	vmov.f64	d0, d8
     524:	vmov.f32	s2, s18
     528:	vfms.f32	s2, s19, s15
     52c:	vcvt.f64.f32	d1, s2
     530:	bl	3d50 <atan2>
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
     534:	vcvt.f32.f64	s0, d0
     538:	vstr	s0, [r5, #28]
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
     53c:	bl	f00 <getQ()>
     540:	vldr	s17, [r0, #4]
     544:	bl	f00 <getQ()>
     548:	vldr	s16, [r0, #12]
     54c:	bl	f00 <getQ()>
                    * *(getQ()+2)));
     550:	vldr	s18, [r0]
     554:	bl	f00 <getQ()>
// which has additional links.
      myIMU.yaw   = atan2(2.0f * (*(getQ()+1) * *(getQ()+2) + *getQ()
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
     558:	vldr	s15, [r0, #8]
     55c:	vnmul.f32	s0, s15, s18
     560:	vfma.f32	s0, s17, s16
     564:	vadd.f32	s0, s0, s0
     568:	vcvt.f64.f32	d0, s0
     56c:	bl	3ca4 <asin>
                    * *(getQ()+2)));
     570:	vcvt.f32.f64	s0, d0
     574:	vneg.f32	s0, s0
     578:	vstr	s0, [r5, #24]
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
     57c:	bl	f00 <getQ()>
     580:	vldr	s18, [r0]
     584:	bl	f00 <getQ()>
     588:	vldr	s17, [r0, #4]
     58c:	bl	f00 <getQ()>
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
     590:	vldr	s16, [r0, #8]
     594:	bl	f00 <getQ()>
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
     598:	vldr	s15, [r0, #12]
     59c:	vmul.f32	s16, s16, s15
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
     5a0:	bl	f00 <getQ()>
     5a4:	vldr	s20, [r0]
     5a8:	bl	f00 <getQ()>
     5ac:	vldr	s19, [r0]
     5b0:	bl	f00 <getQ()>
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
     5b4:	vfma.f32	s16, s18, s17
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
     5b8:	vldr	s18, [r0, #4]
     5bc:	bl	f00 <getQ()>
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
     5c0:	vldr	s15, [r0, #4]
     5c4:	vnmul.f32	s18, s15, s18
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
     5c8:	bl	f00 <getQ()>
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
     5cc:	vfma.f32	s18, s20, s19
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
     5d0:	vldr	s19, [r0, #8]
     5d4:	bl	f00 <getQ()>
     5d8:	vldr	s15, [r0, #8]
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
     5dc:	vadd.f32	s16, s16, s16
     5e0:	vcvt.f64.f32	d8, s16
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
     5e4:	vfms.f32	s18, s19, s15
     5e8:	bl	f00 <getQ()>
                    * *(getQ()+3));
     5ec:	vldr	s19, [r0, #12]
     5f0:	bl	f00 <getQ()>
                    * *(getQ()+3)), *getQ() * *getQ() + *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) - *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch = -asin(2.0f * (*(getQ()+1) * *(getQ()+3) - *getQ()
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
     5f4:	vldr	s15, [r0, #12]
     5f8:	vmov.f64	d0, d8
     5fc:	vmov.f32	s2, s18
     600:	vfma.f32	s2, s19, s15
     604:	vcvt.f64.f32	d1, s2
     608:	bl	3d50 <atan2>
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     60c:	vldr	s14, [r5, #28]
      myIMU.roll *= RAD_TO_DEG;
     610:	vcvt.f32.f64	s0, d0
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     614:	vldr	s12, [r5, #24]
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     618:	vcvt.f64.f32	d7, s14
     61c:	ldr	r1, [r7, #0]
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     61e:	vcvt.f64.f32	d6, s12
        Serial.print((float)myIMU.sumCount / myIMU.sum, 2);
        Serial.println(" Hz");
      }

      myIMU.count = millis();
      myIMU.sumCount = 0;
     622:	movs	r2, #0

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
      myIMU.roll *= RAD_TO_DEG;
     624:	vcvt.f64.f32	d0, s0
        Serial.println(" Hz");
      }

      myIMU.count = millis();
      myIMU.sumCount = 0;
      myIMU.sum = 0;
     628:	movs	r3, #0
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     62a:	vmov.f32	s9, #33	; 0x41080000  8.5
        Serial.print("rate = ");
        Serial.print((float)myIMU.sumCount / myIMU.sum, 2);
        Serial.println(" Hz");
      }

      myIMU.count = millis();
     62e:	str	r1, [r5, #48]	; 0x30
      myIMU.sumCount = 0;
     630:	str	r2, [r5, #52]	; 0x34
      myIMU.sum = 0;
     632:	str	r3, [r5, #60]	; 0x3c
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     634:	vldr	d5, [pc, #320]	; 778 <loop+0x378>
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     638:	vmul.f64	d7, d7, d5
      myIMU.roll *= RAD_TO_DEG;
     63c:	vmul.f64	d0, d0, d5
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     640:	vmul.f64	d6, d6, d5
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     644:	vcvt.f32.f64	s14, d7
      myIMU.roll *= RAD_TO_DEG;
     648:	vcvt.f32.f64	s0, d0
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     64c:	vsub.f32	s14, s14, s9
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     650:	vcvt.f32.f64	s12, d6

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
      myIMU.roll *= RAD_TO_DEG;
     654:	vstr	s0, [r5, #32]
      myIMU.yaw   *= RAD_TO_DEG;

      // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
      // 	8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
      // - http://www.ngdc.noaa.gov/geomag-web/#declination
      myIMU.yaw  -= 8.5;
     658:	vstr	s14, [r5, #28]
                    * *(getQ()+2)));
      myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ()+1) + *(getQ()+2)
                    * *(getQ()+3)), *getQ() * *getQ() - *(getQ()+1)
                    * *(getQ()+1) - *(getQ()+2) * *(getQ()+2) + *(getQ()+3)
                    * *(getQ()+3));
      myIMU.pitch *= RAD_TO_DEG;
     65c:	vstr	s12, [r5, #24]
      myIMU.count = millis();
      myIMU.sumCount = 0;
      myIMU.sum = 0;
    } // if (myIMU.delt_t > 500)
  } // if (AHRS)
}
     660:	vpop	{d8-d10}
     664:	pop	{r3, r4, r5, r6, r7, pc}
  timer = millis();
  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values
     666:	add.w	r1, r4, #232	; 0xe8
     66a:	mov	r0, r4
     66c:	bl	1710 <MPU9250::readAccelData(short*)>

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
     670:	ldrsh.w	r3, [r4, #232]	; 0xe8
     674:	vldr	s12, [r4, #88]	; 0x58
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values
     678:	add.w	r1, r4, #76	; 0x4c
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
     67c:	vmov	s13, r3
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
     680:	ldrsh.w	r3, [r4, #234]	; 0xea
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values
     684:	mov	r0, r4
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
     686:	vmov	s14, r3
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];
     68a:	ldrsh.w	r3, [r4, #236]	; 0xec
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
     68e:	vcvt.f32.s32	s13, s13
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];
     692:	vmov	s15, r3
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
     696:	vcvt.f32.s32	s14, s14
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];
     69a:	vcvt.f32.s32	s15, s15
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
     69e:	vmul.f32	s13, s13, s12
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
     6a2:	vmul.f32	s14, s14, s12
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];
     6a6:	vmul.f32	s15, s15, s12
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
     6aa:	vstr	s13, [r4, #100]	; 0x64
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
     6ae:	vstr	s14, [r4, #104]	; 0x68
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];
     6b2:	vstr	s15, [r4, #108]	; 0x6c

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values
     6b6:	bl	1754 <MPU9250::readGyroData(short*)>

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6ba:	ldrsh.w	r3, [r4, #76]	; 0x4c
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
     6be:	add.w	r1, r4, #82	; 0x52

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6c2:	vldr	s12, [r4, #92]	; 0x5c
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
     6c6:	mov	r0, r4

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6c8:	vmov	s13, r3
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
     6cc:	ldrsh.w	r3, [r4, #78]	; 0x4e
     6d0:	vmov	s14, r3
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;
     6d4:	ldrsh.w	r3, [r4, #80]	; 0x50

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6d8:	vcvt.f32.s32	s13, s13
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;
     6dc:	vmov	s15, r3
    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
     6e0:	vcvt.f32.s32	s14, s14
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;
     6e4:	vcvt.f32.s32	s15, s15

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6e8:	vmul.f32	s13, s13, s12
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
     6ec:	vmul.f32	s14, s14, s12
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;
     6f0:	vmul.f32	s15, s15, s12

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
     6f4:	vstr	s13, [r4, #112]	; 0x70
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
     6f8:	vstr	s14, [r4, #116]	; 0x74
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;
     6fc:	vstr	s15, [r4, #120]	; 0x78

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
     700:	bl	1798 <MPU9250::readMagData(short*)>
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     704:	ldrsh.w	r3, [r4, #82]	; 0x52

    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
     708:	vldr	s12, [r4, #96]	; 0x60
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     70c:	vmov	s13, r3
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     710:	ldrsh.w	r3, [r4, #84]	; 0x54
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     714:	vldr	s10, [r4, #184]	; 0xb8
     718:	vcvt.f32.s32	s13, s13
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     71c:	vmov	s14, r3
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     720:	vldr	s8, [r4, #136]	; 0x88
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     724:	ldrsh.w	r3, [r4, #86]	; 0x56
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     728:	vcvt.f32.s32	s14, s14
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     72c:	vmul.f32	s13, s13, s12
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     730:	vldr	s11, [r4, #188]	; 0xbc
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     734:	vmov	s15, r3
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     738:	vldr	s9, [r4, #140]	; 0x8c
     73c:	vmul.f32	s14, s14, s12
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     740:	vfnms.f32	s10, s13, s8
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     744:	vcvt.f32.s32	s15, s15
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     748:	vfnms.f32	s11, s14, s9
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     74c:	vmul.f32	s15, s15, s12
     750:	vldr	s12, [r4, #192]	; 0xc0
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     754:	vmov.f32	s13, s10
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     758:	vldr	s10, [r4, #144]	; 0x90
     75c:	vfnms.f32	s12, s15, s10
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
     760:	vstr	s11, [r4, #128]	; 0x80
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
     764:	vstr	s13, [r4, #124]	; 0x7c
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
     768:	vstr	s12, [r4, #132]	; 0x84
     76c:	b.n	436 <loop+0x36>
     76e:	nop
     770:	.word	0xa2529d39
     774:	.word	0x3f91df46
     778:	.word	0x1a63c1f8
     77c:	.word	0x404ca5dc
     780:	.word	0x20001718
     784:	.word	0x20000d9c
     788:	.word	0x20000848
     78c:	.word	0x20000cac

00000790 <_GLOBAL__sub_I_intPin>:
#define I2Cclock 400000
#define I2Cport Wire
//#define MPU9250_ADDRESS MPU9250_ADDRESS_AD0   // Use either this line or the next to select which I2C address your device is using
#define MPU9250_ADDRESS MPU9250_ADDRESS_AD0

MPU9250 myIMU(MPU9250_ADDRESS, I2Cport, I2Cclock);
     790:	ldr	r3, [pc, #8]	; (79c <_GLOBAL__sub_I_intPin+0xc>)
     792:	movs	r1, #104	; 0x68
     794:	ldr	r2, [pc, #8]	; (7a0 <_GLOBAL__sub_I_intPin+0x10>)
     796:	ldr	r0, [pc, #12]	; (7a4 <_GLOBAL__sub_I_intPin+0x14>)
     798:	b.w	f18 <MPU9250::MPU9250(unsigned char, TwoWire&, unsigned long)>
     79c:	.word	0x00061a80
     7a0:	.word	0x20000710
     7a4:	.word	0x20000cac

000007a8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     7a8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     7aa:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     7ac:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     7ae:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     7b0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     7b2:	beq.n	7bc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     7b4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     7b8:	b.w	37f8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     7bc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     7be:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     7c2:	bx	r3

000007c4 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     7c4:	movs	r0, #0
     7c6:	bx	lr

000007c8 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     7c8:	ldrb.w	r2, [r0, #59]	; 0x3b
     7cc:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
     7d0:	subs	r0, r2, r0
     7d2:	bx	lr

000007d4 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     7d4:	ldrb.w	r3, [r0, #58]	; 0x3a
     7d8:	ldrb.w	r2, [r0, #59]	; 0x3b
     7dc:	cmp	r2, r3
     7de:	bls.n	7ec <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     7e0:	adds	r2, r3, #1
     7e2:	add	r3, r0
     7e4:	strb.w	r2, [r0, #58]	; 0x3a
     7e8:	ldrb	r0, [r3, #26]
     7ea:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     7ec:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
     7f0:	bx	lr
     7f2:	nop

000007f4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     7f4:	ldrb.w	r3, [r0, #58]	; 0x3a
     7f8:	ldrb.w	r2, [r0, #59]	; 0x3b
     7fc:	cmp	r2, r3
     7fe:	bls.n	806 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     800:	add	r3, r0
     802:	ldrb	r0, [r3, #26]
     804:	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     806:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
     80a:	bx	lr

0000080c <TwoWire::flush()>:
	virtual void flush(void) {
     80c:	bx	lr
     80e:	nop

00000810 <TwoWire::write(unsigned char)>:

}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
     810:	ldrh.w	r3, [r0, #96]	; 0x60
     814:	cbz	r3, 83c <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     816:	ldrb.w	r3, [r0, #95]	; 0x5f
     81a:	cmp	r3, #32
     81c:	bhi.n	836 <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     81e:	adds	r2, r0, r3
	scl_pin_index_ = newindex;

}

size_t TwoWire::write(uint8_t data)
{
     820:	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     822:	adds	r4, r3, #1
		return 1;
     824:	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     826:	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
     82a:	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     82c:	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
     830:	ldr.w	r4, [sp], #4
     834:	bx	lr
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     836:	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
     838:	movs	r3, #0
     83a:	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
     83c:	mov	r0, r3
     83e:	bx	lr

00000840 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     840:	push	{r3, r4, r5, lr}
     842:	mov	r5, r0
	if (transmitting || slave_mode) {
     844:	ldrh.w	r0, [r0, #96]	; 0x60
     848:	cbz	r0, 870 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     84a:	ldrb.w	r3, [r5, #95]	; 0x5f
     84e:	mov	r4, r2
     850:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
     854:	cmp	r4, r2
     856:	bhi.n	872 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
     858:	add.w	r0, r5, #61	; 0x3d
     85c:	mov	r2, r4
     85e:	add	r0, r3
     860:	bl	214c <memcpy>
		txBufferLength += quantity;
     864:	ldrb.w	r3, [r5, #95]	; 0x5f
     868:	mov	r0, r4
     86a:	add	r4, r3
     86c:	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
     870:	pop	{r3, r4, r5, pc}
     872:	mov	r4, r2
     874:	movs	r2, #1
     876:	strb	r2, [r5, #4]
     878:	b.n	858 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
     87a:	nop

0000087c <TwoWire::begin()>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)

#include "debug/printf.h"

void TwoWire::begin(void)
{
     87c:	push	{r4, r5, r6, r7, lr}
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
     87e:	ldr	r7, [pc, #184]	; (938 <TwoWire::begin()+0xbc>)



void TwoWire::setClock(uint32_t frequency)
{
        port->MCR = 0;
     880:	movs	r5, #0

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     882:	ldr	r2, [r0, #20]
        port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     884:	movs	r4, #1
#include "debug/printf.h"

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
     886:	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    port->MCR = LPI2C_MCR_RST;
     888:	mov.w	lr, #2

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     88c:	ldr	r6, [r2, #0]
#include "debug/printf.h"

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
     88e:	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    port->MCR = LPI2C_MCR_RST;
     892:	ldr	r3, [r0, #16]
#include "debug/printf.h"

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
     894:	orr.w	r1, r1, #262144	; 0x40000
     898:	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     89a:	ldr	r7, [r6, #0]
     89c:	ldr	r1, [r2, #4]
     89e:	orrs	r1, r7
{
        port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
     8a0:	ldr	r7, [pc, #152]	; (93c <TwoWire::begin()+0xc0>)

void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     8a2:	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(3900);
	}
        port->MCCR1 = port->MCCR0;
        port->MCFGR0 = 0;
        port->MCFGR3 = LPI2C_MCFGR3_PINLOW(3900);
        port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     8a4:	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     8a8:	ldr	r6, [pc, #148]	; (940 <TwoWire::begin()+0xc4>)
void TwoWire::begin(void)
{
        // use 24 MHz clock
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    port->MCR = LPI2C_MCR_RST;
     8aa:	str.w	lr, [r3, #16]



void TwoWire::setClock(uint32_t frequency)
{
        port->MCR = 0;
     8ae:	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
     8b0:	str	r7, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     8b2:	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     8b4:	str	r6, [r3, #40]	; 0x28
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	}
        port->MCCR1 = port->MCCR0;
        port->MCFGR0 = 0;
        port->MCFGR3 = LPI2C_MCFGR3_PINLOW(3900);
     8b6:	ldr	r6, [pc, #140]	; (944 <TwoWire::begin()+0xc8>)
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	}
        port->MCCR1 = port->MCCR0;
     8b8:	ldr	r7, [r3, #72]	; 0x48
     8ba:	str	r7, [r3, #80]	; 0x50
        port->MCFGR0 = 0;
     8bc:	str	r5, [r3, #32]
        port->MCFGR3 = LPI2C_MCFGR3_PINLOW(3900);
     8be:	str	r6, [r3, #44]	; 0x2c
        port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     8c0:	str	r1, [r3, #88]	; 0x58
        port->MCR = LPI2C_MCR_MEN;
     8c2:	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    port->MCR = LPI2C_MCR_RST;
    setClock(100000);

    // Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
     8c4:	ldrb	r1, [r0, #24]
     8c6:	ldr	r3, [pc, #128]	; (948 <TwoWire::begin()+0xcc>)
     8c8:	add.w	r1, r2, r1, lsl #4
     8cc:	ldrb	r1, [r1, #8]
     8ce:	add.w	r1, r3, r1, lsl #4
     8d2:	ldr	r4, [r1, #8]
     8d4:	ldr	r1, [r4, #0]
     8d6:	orr.w	r1, r1, #61440	; 0xf000
     8da:	str	r1, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     8dc:	ldrb	r1, [r0, #24]
     8de:	add.w	r1, r2, r1, lsl #4
     8e2:	ldrb	r4, [r1, #8]
     8e4:	ldr	r5, [r1, #12]
     8e6:	add.w	r1, r3, r4, lsl #4
     8ea:	ldr	r1, [r1, #4]
     8ec:	str	r5, [r1, #0]
     8ee:	ldrb	r1, [r0, #24]
     8f0:	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
     8f4:	ldr	r4, [r1, #16]
     8f6:	cbz	r4, 8fc <TwoWire::begin()+0x80>
	 	*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;		
     8f8:	ldr	r1, [r1, #20]
     8fa:	str	r1, [r4, #0]
	}	

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
     8fc:	ldrb	r1, [r0, #25]
     8fe:	add.w	r1, r2, r1, lsl #4
     902:	ldrb.w	r1, [r1, #40]	; 0x28
     906:	add.w	r1, r3, r1, lsl #4
     90a:	ldr	r4, [r1, #8]
     90c:	ldr	r1, [r4, #0]
     90e:	orr.w	r1, r1, #61440	; 0xf000
     912:	str	r1, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     914:	ldrb	r1, [r0, #25]
     916:	add.w	r1, r2, r1, lsl #4
     91a:	ldrb.w	r4, [r1, #40]	; 0x28
     91e:	ldr	r1, [r1, #44]	; 0x2c
     920:	add.w	r3, r3, r4, lsl #4
     924:	ldr	r3, [r3, #4]
     926:	str	r1, [r3, #0]
     928:	ldrb	r3, [r0, #25]
     92a:	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
     92e:	ldr	r3, [r2, #48]	; 0x30
     930:	cbz	r3, 936 <TwoWire::begin()+0xba>
	 	*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;		
     932:	ldr	r2, [r2, #52]	; 0x34
     934:	str	r2, [r3, #0]
     936:	pop	{r4, r5, r6, r7, pc}
     938:	.word	0x400fc000
     93c:	.word	0x1928373b
     940:	.word	0x05050f3c
     944:	.word	0x000f3c00
     948:	.word	0x2000037c

0000094c <TwoWire::endTransmission(unsigned char)>:
	}
	return 0;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
     94c:	push	{r4, r5, r6, r7}
	//printf("\nendTransmission %d (%x %x %x) %x\n", txBufferLength,txBuffer[0], txBuffer[1], txBuffer[2], sendStop);
	uint32_t i=0, len, status;

	len = txBufferLength;
     94e:	ldrb.w	r6, [r0, #95]	; 0x5f
	if (!len) return 4; // no data to transmit
     952:	cbnz	r6, 95a <TwoWire::endTransmission(unsigned char)+0xe>
     954:	movs	r0, #4
				//printf("fifo empty, msr=%x\n", status);
				return 0;
			}
		}
	}
}
     956:	pop	{r4, r5, r6, r7}
     958:	bx	lr
     95a:	ldr	r5, [r0, #16]
     95c:	b.n	962 <TwoWire::endTransmission(unsigned char)+0x16>

	// wait while bus is busy
	while (1) {
		status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     95e:	lsls	r3, r2, #7
     960:	bmi.n	968 <TwoWire::endTransmission(unsigned char)+0x1c>
	len = txBufferLength;
	if (!len) return 4; // no data to transmit

	// wait while bus is busy
	while (1) {
		status = port->MSR; // pg 2899 & 2892
     962:	ldr	r2, [r5, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     964:	lsls	r4, r2, #6
     966:	bmi.n	95e <TwoWire::endTransmission(unsigned char)+0x12>
		// TODO: timeout...
	}
	//printf("m=%x\n", status);

	// Wonder if MFSR we should maybe clear it?
	if ( port->MFSR & 0x7) {
     968:	ldr	r3, [r5, #92]	; 0x5c
     96a:	lsls	r7, r3, #29
     96c:	bne.n	9de <TwoWire::endTransmission(unsigned char)+0x92>
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	//printf("\nendTransmission %d (%x %x %x) %x\n", txBufferLength,txBuffer[0], txBuffer[1], txBuffer[2], sendStop);
	uint32_t i=0, len, status;
     96e:	movs	r3, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[i++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     970:	mov.w	r7, #512	; 0x200
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
		//printf("Clear TX Fifo %lx %lx\n", port->MSR, port->MFSR);
	}
	// TODO: is this correct if the prior use didn't send stop?
	//port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF; // clear flags
	port->MSR = status;
     974:	str	r2, [r5, #20]
	//printf("MSR=%lX, MFSR=%lX\n", status, port->MFSR);
	//elapsedMillis timeout=0;

	while (1) {
		// transmit stuff, if we haven't already
		if (i <= len) {
     976:	cmp	r3, r6
     978:	bhi.n	9b0 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     97a:	ldr	r2, [r5, #92]	; 0x5c
     97c:	and.w	r2, r2, #7
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
     980:	cmp	r2, #3
     982:	bls.n	998 <TwoWire::endTransmission(unsigned char)+0x4c>
     984:	b.n	9b0 <TwoWire::endTransmission(unsigned char)+0x64>
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     986:	ldrb.w	r4, [r0, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					i++;
					break;
				}
				fifo_used = fifo_used + 1;
     98a:	adds	r2, #1
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
     98c:	movs	r3, #1
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     98e:	orr.w	r4, r4, #1024	; 0x400
	while (1) {
		// transmit stuff, if we haven't already
		if (i <= len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
     992:	cmp	r2, #4
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     994:	str	r4, [r5, #96]	; 0x60
	while (1) {
		// transmit stuff, if we haven't already
		if (i <= len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
     996:	beq.n	9b0 <TwoWire::endTransmission(unsigned char)+0x64>
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[i++];
     998:	adds	r4, r0, r3
		// transmit stuff, if we haven't already
		if (i <= len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
				if (i == 0) {
     99a:	cmp	r3, #0
     99c:	beq.n	986 <TwoWire::endTransmission(unsigned char)+0x3a>
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
     99e:	cmp	r6, r3
     9a0:	bls.n	9d6 <TwoWire::endTransmission(unsigned char)+0x8a>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					i++;
					break;
				}
				fifo_used = fifo_used + 1;
     9a2:	adds	r2, #1
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[i++];
     9a4:	ldrb.w	r4, [r4, #61]	; 0x3d
     9a8:	adds	r3, #1
	while (1) {
		// transmit stuff, if we haven't already
		if (i <= len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
     9aa:	cmp	r2, #4
				if (i == 0) {
					//printf("start %x\n", txBuffer[0]);
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[i++];
     9ac:	str	r4, [r5, #96]	; 0x60
	while (1) {
		// transmit stuff, if we haven't already
		if (i <= len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			//if (fifo_used < 4) printf("t=%ld\n", fifo_used);
			while (fifo_used < 4) {
     9ae:	bne.n	998 <TwoWire::endTransmission(unsigned char)+0x4c>
				}
				fifo_used = fifo_used + 1;
			}
		}
		// monitor status
		status = port->MSR; // pg 2899 & 2892
     9b0:	ldr	r2, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     9b2:	lsls	r4, r2, #20
     9b4:	bmi.n	954 <TwoWire::endTransmission(unsigned char)+0x8>
			//printf("arbitration lost\n");
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
     9b6:	lsls	r4, r2, #21
     9b8:	bmi.n	9ec <TwoWire::endTransmission(unsigned char)+0xa0>
		//if (timeout > 100) {
			//printf("status = %x\n", status);
			//timeout = 0;
		//}

		if (sendStop) {
     9ba:	cbz	r1, 9cc <TwoWire::endTransmission(unsigned char)+0x80>
			if (status & LPI2C_MSR_SDF) {
     9bc:	lsls	r4, r2, #22
     9be:	bpl.n	976 <TwoWire::endTransmission(unsigned char)+0x2a>
				// master automatically sends stop condition on some
				// types of errors, so this flag only means success
				// when all comments in fifo have been fully used
				uint32_t fifo = port->MFSR & 0x07;
     9c0:	ldr	r2, [r5, #92]	; 0x5c
				if (fifo == 0) return 0;
     9c2:	ands.w	r2, r2, #7
     9c6:	bne.n	976 <TwoWire::endTransmission(unsigned char)+0x2a>
     9c8:	mov	r0, r2
     9ca:	b.n	956 <TwoWire::endTransmission(unsigned char)+0xa>
			}
		} else {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9cc:	ldr	r2, [r5, #92]	; 0x5c
			if (fifo_used == 0) {
     9ce:	lsls	r2, r2, #29
     9d0:	bne.n	976 <TwoWire::endTransmission(unsigned char)+0x2a>
			if (status & LPI2C_MSR_SDF) {
				// master automatically sends stop condition on some
				// types of errors, so this flag only means success
				// when all comments in fifo have been fully used
				uint32_t fifo = port->MFSR & 0x07;
				if (fifo == 0) return 0;
     9d2:	mov	r0, r1
     9d4:	b.n	956 <TwoWire::endTransmission(unsigned char)+0xa>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					i = 1;
				} else if (i < len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[i++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     9d6:	cbz	r1, 9da <TwoWire::endTransmission(unsigned char)+0x8e>
     9d8:	str	r7, [r5, #96]	; 0x60
					i++;
     9da:	adds	r3, #1
					break;
     9dc:	b.n	9b0 <TwoWire::endTransmission(unsigned char)+0x64>
	}
	//printf("m=%x\n", status);

	// Wonder if MFSR we should maybe clear it?
	if ( port->MFSR & 0x7) {
		port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
     9de:	movw	r4, #257	; 0x101
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
     9e2:	mov.w	r3, #15872	; 0x3e00
	}
	//printf("m=%x\n", status);

	// Wonder if MFSR we should maybe clear it?
	if ( port->MFSR & 0x7) {
		port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
     9e6:	str	r4, [r5, #16]
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
     9e8:	str	r3, [r5, #20]
     9ea:	b.n	96e <TwoWire::endTransmission(unsigned char)+0x22>
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			//printf("NACK, f=%d, i=%d\n", port->MFSR & 0x07, i);
			// TODO: check that hardware really sends stop automatically
			port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
     9ec:	movw	r2, #257	; 0x101
			// TODO: is always sending a stop the right way to recover?
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     9f0:	mov.w	r3, #512	; 0x200
			return 2; // NACK for address
     9f4:	movs	r0, #2
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			//printf("NACK, f=%d, i=%d\n", port->MFSR & 0x07, i);
			// TODO: check that hardware really sends stop automatically
			port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
     9f6:	str	r2, [r5, #16]
			// TODO: is always sending a stop the right way to recover?
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     9f8:	str	r3, [r5, #96]	; 0x60
				//printf("fifo empty, msr=%x\n", status);
				return 0;
			}
		}
	}
}
     9fa:	pop	{r4, r5, r6, r7}
     9fc:	bx	lr
     9fe:	nop

00000a00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
     a00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a04:	mov	ip, r2
     a06:	mov	r6, r0
     a08:	mov	r2, r3
     a0a:	ldr	r5, [r0, #16]
     a0c:	b.n	a12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x12>
	// wait while bus is busy
	//printf("\nrequestFrom %x %x %x\n", address, length, sendStop);
	while (1) {
		status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     a0e:	lsls	r4, r3, #7
     a10:	bmi.n	a18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
	uint32_t cmd=0, status, fifo;

	// wait while bus is busy
	//printf("\nrequestFrom %x %x %x\n", address, length, sendStop);
	while (1) {
		status = port->MSR; // pg 2899 & 2892
     a12:	ldr	r3, [r5, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     a14:	lsls	r7, r3, #6
     a16:	bmi.n	a0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe>
		// TODO: timeout...
	}
	//printf("idle2, msr=%x\n", status);

	// TODO: is this correct if the prior use didn't send stop?
	port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
     a18:	mov.w	r3, #15872	; 0x3e00
     a1c:	str	r3, [r5, #20]

	//printf("MSR=%lX, MCR:%lx, MFSR=%lX\n", status, port->MCR, port->MFSR);

	// Wonder if MFSR we should maybe clear it?
	if ( port->MFSR & 0x7) {
     a1e:	ldr	r0, [r5, #92]	; 0x5c
     a20:	lsls	r0, r0, #29
     a22:	beq.n	a2c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x2c>
		port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
     a24:	movw	r0, #257	; 0x101
     a28:	str	r0, [r5, #16]
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
     a2a:	str	r3, [r5, #20]
		//printf("Clear TX Fifo %lx %lx\n", port->MSR, port->MFSR);
	}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
     a2c:	cmp.w	ip, #0
	if ( port->MFSR & 0x7) {
		port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
		//printf("Clear TX Fifo %lx %lx\n", port->MSR, port->MFSR);
	}
	address = (address & 0x7F) << 1;
     a30:	mov.w	r1, r1, lsl #1
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
     a34:	mov.w	r4, #0
		if (cmd < 3) {
			fifo = port->MFSR & 0x07; // pg 2914
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a38:	movw	r3, #1025	; 0x401
		port->MCR = LPI2C_MCR_MEN | LPI2C_MCR_RTF;  // clear the FIFO
		port->MSR = LPI2C_MSR_PLTF | LPI2C_MSR_ALF | LPI2C_MSR_NDF | LPI2C_MSR_SDF | LPI2C_MSR_FEF; // clear flags
		//printf("Clear TX Fifo %lx %lx\n", port->MSR, port->MFSR);
	}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
     a3c:	it	eq
     a3e:	moveq.w	ip, #1
		if (cmd < 3) {
			fifo = port->MFSR & 0x07; // pg 2914
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a42:	uxtb	r0, r1
				} else if (cmd == 1) {
					// causes bus stuck... need way to recover
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     a44:	mov.w	r8, #512	; 0x200
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint32_t cmd=0, status, fifo;
     a48:	mov	r1, r4
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (cmd == 1) {
					// causes bus stuck... need way to recover
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     a4a:	add.w	r9, ip, #4294967295
		if (cmd < 3) {
			fifo = port->MFSR & 0x07; // pg 2914
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a4e:	orrs	r3, r0
		//printf("Clear TX Fifo %lx %lx\n", port->MSR, port->MFSR);
	}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
     a50:	strb.w	r4, [r6, #58]	; 0x3a
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (cmd == 1) {
					// causes bus stuck... need way to recover
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     a54:	orr.w	r9, r9, #256	; 0x100
	}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
	rxBufferLength = 0;
     a58:	strb.w	r4, [r6, #59]	; 0x3b

	//elapsedMillis timeout=0;

	while (1) {
		// transmit stuff, if we haven't already
		if (cmd < 3) {
     a5c:	cmp	r1, #3
     a5e:	beq.n	a7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			fifo = port->MFSR & 0x07; // pg 2914
     a60:	ldr	r4, [r5, #92]	; 0x5c
     a62:	and.w	r4, r4, #7
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
     a66:	cmp	r4, #3
     a68:	bhi.n	a7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     a6a:	subs	r4, r4, r1
				if (cmd == 0) {
     a6c:	cbnz	r1, ac2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc2>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a6e:	str	r3, [r5, #96]	; 0x60
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				cmd++;
     a70:	adds	r1, #1
	while (1) {
		// transmit stuff, if we haven't already
		if (cmd < 3) {
			fifo = port->MFSR & 0x07; // pg 2914
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
     a72:	adds	r0, r1, r4
     a74:	cmp	r0, #3
     a76:	bhi.n	a7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     a78:	cmp	r1, #2
     a7a:	bls.n	a6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				cmd++;
				fifo = fifo + 1;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
     a7c:	ldrb.w	r0, [r6, #59]	; 0x3b
     a80:	cmp	r0, #31
     a82:	bhi.n	aae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
			fifo = (port->MFSR >> 16) & 0x07;
     a84:	ldr	r4, [r5, #92]	; 0x5c
     a86:	ubfx	r4, r4, #16, #3
			//if (fifo > 0) printf("r=%ld\n", fifo);
			while (fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     a8a:	cbz	r4, aae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
     a8c:	mov	r7, r0
     a8e:	b.n	a94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
     a90:	cmp	r0, #32
     a92:	beq.n	aae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
				rxBuffer[rxBufferLength++] = port->MRDR;
     a94:	adds	r0, #1
     a96:	add.w	lr, r6, r7
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			fifo = (port->MFSR >> 16) & 0x07;
			//if (fifo > 0) printf("r=%ld\n", fifo);
			while (fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     a9a:	subs	r4, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
     a9c:	uxtb	r0, r0
     a9e:	strb.w	r0, [r6, #59]	; 0x3b
     aa2:	mov	r7, r0
     aa4:	ldr.w	sl, [r5, #112]	; 0x70
     aa8:	strb.w	sl, [lr, #26]
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			fifo = (port->MFSR >> 16) & 0x07;
			//if (fifo > 0) printf("r=%ld\n", fifo);
			while (fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     aac:	bne.n	a90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
				rxBuffer[rxBufferLength++] = port->MRDR;
				fifo = fifo - 1;
			}
		}
		// monitor status
		status = port->MSR; // pg 2899 & 2892
     aae:	ldr	r4, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
			//printf("arbitration lost\n");
			break;
		}
		if (status & LPI2C_MSR_NDF) {
     ab0:	tst.w	r4, #3072	; 0xc00
     ab4:	bne.n	abe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		//if (timeout > 250) {
			//printf("Status = %x\n", status);
			//timeout = 0;
		//}

		if (rxBufferLength >= length && cmd >= 3) break;
     ab6:	cmp	ip, r0
     ab8:	bhi.n	a5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5c>
     aba:	cmp	r1, #2
     abc:	bls.n	a5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5c>
	}
	//digitalWriteFast(15, HIGH);
	//delayMicroseconds(2);
	//digitalWriteFast(15, LOW);
	return rxBufferLength;
}
     abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fifo = port->MFSR & 0x07; // pg 2914
			//if (fifo < 4) printf("t=%ld\n", fifo);
			while (fifo < 4 && cmd < 3) {
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (cmd == 1) {
     ac2:	cmp	r1, #1
     ac4:	beq.n	ad0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd0>
					// causes bus stuck... need way to recover
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     ac6:	cmp	r2, #0
     ac8:	beq.n	a70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x70>
     aca:	str.w	r8, [r5, #96]	; 0x60
     ace:	b.n	a70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x70>
				if (cmd == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (cmd == 1) {
					// causes bus stuck... need way to recover
					//port->MTDR = LPI2C_MTDR_CMD_START | (length - 1);
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     ad0:	str.w	r9, [r5, #96]	; 0x60
     ad4:	b.n	a70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x70>
     ad6:	nop

00000ad8 <TwoWire::setClock(unsigned long)>:



void TwoWire::setClock(uint32_t frequency)
{
        port->MCR = 0;
     ad8:	ldr	r3, [r0, #16]
     ada:	movs	r2, #0
	if (frequency < 400000) {
     adc:	ldr	r0, [pc, #76]	; (b2c <TwoWire::setClock(unsigned long)+0x54>)
     ade:	cmp	r1, r0




void TwoWire::setClock(uint32_t frequency)
{
     ae0:	push	{r4, r5}
        port->MCR = 0;
     ae2:	str	r2, [r3, #16]
	if (frequency < 400000) {
     ae4:	bls.n	b1c <TwoWire::setClock(unsigned long)+0x44>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	} else if (frequency < 1000000) {
     ae6:	ldr	r0, [pc, #72]	; (b30 <TwoWire::setClock(unsigned long)+0x58>)
     ae8:	cmp	r1, r0
     aea:	bls.n	b10 <TwoWire::setClock(unsigned long)+0x38>
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
     aec:	ldr	r0, [pc, #68]	; (b34 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     aee:	ldr	r1, [pc, #72]	; (b38 <TwoWire::setClock(unsigned long)+0x60>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
     af0:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
     af2:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     af4:	str	r1, [r3, #40]	; 0x28
	}
        port->MCCR1 = port->MCCR0;
     af6:	ldr	r5, [r3, #72]	; 0x48
        port->MCFGR0 = 0;
     af8:	movs	r4, #0
        port->MCFGR3 = LPI2C_MCFGR3_PINLOW(3900);
     afa:	ldr	r0, [pc, #64]	; (b3c <TwoWire::setClock(unsigned long)+0x64>)
        port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     afc:	mov.w	r1, #65537	; 0x10001
        port->MCR = LPI2C_MCR_MEN;
     b00:	movs	r2, #1
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	}
        port->MCCR1 = port->MCCR0;
     b02:	str	r5, [r3, #80]	; 0x50
        port->MCFGR0 = 0;
     b04:	str	r4, [r3, #32]
        port->MCFGR3 = LPI2C_MCFGR3_PINLOW(3900);
     b06:	str	r0, [r3, #44]	; 0x2c
        port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     b08:	str	r1, [r3, #88]	; 0x58
        port->MCR = LPI2C_MCR_MEN;
     b0a:	str	r2, [r3, #16]
}
     b0c:	pop	{r4, r5}
     b0e:	bx	lr
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	} else if (frequency < 1000000) {
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
     b10:	ldr	r0, [pc, #44]	; (b40 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     b12:	ldr	r1, [pc, #48]	; (b44 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
	} else if (frequency < 1000000) {
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
     b14:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
     b16:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     b18:	str	r1, [r3, #40]	; 0x28
     b1a:	b.n	af6 <TwoWire::setClock(unsigned long)+0x1e>
{
        port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
     b1c:	ldr	r0, [pc, #40]	; (b48 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     b1e:	movs	r1, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     b20:	ldr	r2, [pc, #40]	; (b4c <TwoWire::setClock(unsigned long)+0x74>)
{
        port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
     b22:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     b24:	str	r1, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3900);
     b26:	str	r2, [r3, #40]	; 0x28
     b28:	b.n	af6 <TwoWire::setClock(unsigned long)+0x1e>
     b2a:	nop
     b2c:	.word	0x00061a7f
     b30:	.word	0x000f423f
     b34:	.word	0x0407090a
     b38:	.word	0x01010f3c
     b3c:	.word	0x000f3c00
     b40:	.word	0x0c121a1c
     b44:	.word	0x02020f3c
     b48:	.word	0x1928373b
     b4c:	.word	0x05050f3c

00000b50 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)>:
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
     b50:	vmul.f32	s14, s1, s1


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
     b54:	push	{r4, lr}
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
     b56:	vfma.f32	s14, s0, s0
// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
     b5a:	ldr	r4, [pc, #924]	; (ef8 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x3a8>)


// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
     b5c:	vpush	{d8-d15}
     b60:	vmov.f32	s23, s1
     b64:	sub	sp, #48	; 0x30
     b66:	vmov.f32	s24, s0
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
     b6a:	vldr	s19, [r4]
     b6e:	vldr	s18, [r4, #4]
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
     b72:	vfma.f32	s14, s2, s2
// Similar to Madgwick scheme but uses proportional and integral filtering on
// the error between estimated reference vectors and measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
  // short name local variable for readability
  float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
     b76:	vldr	s17, [r4, #8]
     b7a:	vldr	s16, [r4, #12]
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
     b7e:	vcvt.f64.f32	d7, s14
     b82:	vsqrt.f64	d0, d7
     b86:	vcmp.f64	d0, d0
     b8a:	vmrs	APSR_nzcv, fpscr
     b8e:	bne.w	df0 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x2a0>
     b92:	vcvt.f32.f64	s22, d0
  if (norm == 0.0f) return; // Handle NaN
     b96:	vcmp.f32	s22, #0.0
     b9a:	vmrs	APSR_nzcv, fpscr
     b9e:	bne.n	ba8 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x58>
  norm = 1.0f / norm;
  q[0] = q1 * norm;
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}
     ba0:	add	sp, #48	; 0x30
     ba2:	vpop	{d8-d15}
     ba6:	pop	{r4, pc}
  ax *= norm;
  ay *= norm;
  az *= norm;

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
     ba8:	vmul.f32	s14, s7, s7
     bac:	vfma.f32	s14, s6, s6
     bb0:	vfma.f32	s14, s8, s8
     bb4:	vcvt.f64.f32	d7, s14
     bb8:	vsqrt.f64	d0, d7
     bbc:	vcmp.f64	d0, d0
     bc0:	vmrs	APSR_nzcv, fpscr
     bc4:	bne.w	e3a <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x2ea>
     bc8:	vcvt.f32.f64	s0, d0
  if (norm == 0.0f) return; // Handle NaN
     bcc:	vcmp.f32	s0, #0.0
     bd0:	vmrs	APSR_nzcv, fpscr
     bd4:	beq.n	ba0 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x50>
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
     bd6:	vmov.f32	s1, #112	; 0x3f800000  1.0
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     bda:	vmov.f32	s11, #96	; 0x3f000000  0.5
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     bde:	vneg.f32	s29, s18
  az *= norm;

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
     be2:	vdiv.f32	s12, s1, s0
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     be6:	vmov.f32	s26, s11
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     bea:	vneg.f32	s28, s16
  float q1q1 = q1 * q1;
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
     bee:	vmul.f32	s10, s18, s17
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     bf2:	vfma.f32	s26, s29, s18
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     bf6:	vneg.f32	s27, s17
     bfa:	vneg.f32	s30, s19
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     bfe:	vmov.f32	s15, s10
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c02:	vfma.f32	s11, s27, s17
     c06:	vfma.f32	s10, s30, s16
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c0a:	vmov.f32	s14, s26
     c0e:	vfma.f32	s15, s19, s16
  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
  my *= norm;
     c12:	vmul.f32	s7, s7, s12
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c16:	vfma.f32	s14, s28, s16

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
     c1a:	vmul.f32	s6, s6, s12
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c1e:	vadd.f32	s21, s7, s7
  float q1q2 = q1 * q2;
  float q1q3 = q1 * q3;
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
     c22:	vmul.f32	s20, s18, s16
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c26:	vadd.f32	s13, s6, s6
     c2a:	vfma.f32	s11, s28, s16
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c2e:	vmul.f32	s14, s14, s21
  float q1q4 = q1 * q4;
  float q2q2 = q2 * q2;
  float q2q3 = q2 * q3;
  float q2q4 = q2 * q4;
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
     c32:	vmul.f32	s25, s17, s16
  norm = sqrt(mx * mx + my * my + mz * mz);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  mx *= norm;
  my *= norm;
  mz *= norm;
     c36:	vmul.f32	s8, s8, s12

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c3a:	vfma.f32	s14, s13, s15
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c3e:	vmul.f32	s12, s21, s10
     c42:	vmov.f32	s15, s20
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c46:	vmov.f32	s0, s25
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c4a:	vfma.f32	s12, s13, s11
     c4e:	vfma.f32	s15, s19, s17
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c52:	vfma.f32	s0, s30, s18
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c56:	vadd.f32	s31, s8, s8
     c5a:	vstr	s12, [sp]
     c5e:	vmov.f32	s12, s15
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
     c62:	vdiv.f32	s15, s1, s22
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c66:	vldr	s1, [sp]
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
     c6a:	vfma.f32	s14, s31, s0
  mx *= norm;
  my *= norm;
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
     c6e:	vfma.f32	s1, s31, s12
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
     c72:	vmul.f32	s14, s14, s14
     c76:	vfma.f32	s14, s1, s1

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
  if (norm == 0.0f) return; // Handle NaN
  norm = 1.0f / norm;       // Use reciprocal for division
  ax *= norm;
     c7a:	vmul.f32	s24, s24, s15
  ay *= norm;
     c7e:	vmul.f32	s23, s23, s15
  az *= norm;
     c82:	vmul.f32	s2, s2, s15
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
     c86:	vcvt.f64.f32	d7, s14
     c8a:	vsqrt.f64	d0, d7
     c8e:	vcmp.f64	d0, d0
     c92:	vmrs	APSR_nzcv, fpscr
     c96:	bne.w	e8e <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x33e>
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
     c9a:	vfma.f32	s25, s19, s18
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     c9e:	vldr	s15, [pc, #604]	; efc <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x3ac>

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
     ca2:	vfma.f32	s20, s30, s17
     ca6:	vfma.f32	s26, s27, s17

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
     caa:	vmul.f32	s22, s19, s19
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cae:	vcvt.f32.f64	s0, d0
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     cb2:	vmov.f32	s14, #36	; 0x41200000  10.0

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cb6:	vmul.f32	s21, s21, s25
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
     cba:	vfma.f32	s22, s29, s18
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cbe:	vadd.f32	s0, s0, s0
     cc2:	vfma.f32	s21, s13, s20
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
     cc6:	vadd.f32	s1, s20, s20
  vy = 2.0f * (q1q2 + q3q4);
     cca:	vadd.f32	s13, s25, s25
  vz = q1q1 - q2q2 - q3q3 + q4q4;
     cce:	vfma.f32	s22, s27, s17
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     cd2:	vnmul.f32	s30, s13, s2

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cd6:	vfma.f32	s21, s31, s26
  bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
     cda:	vfma.f32	s22, s16, s16
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cde:	vadd.f32	s21, s21, s21
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
  wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
     ce2:	vmul.f32	s26, s26, s21

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     ce6:	vmul.f32	s20, s20, s21
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
     cea:	vmul.f32	s25, s25, s21
  wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
     cee:	vfma.f32	s26, s12, s0

  // Estimated direction of gravity and magnetic field
  vx = 2.0f * (q2q4 - q1q3);
  vy = 2.0f * (q1q2 + q3q4);
  vz = q1q1 - q2q2 - q3q3 + q4q4;
  wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
     cf2:	vfma.f32	s20, s11, s0
  wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
     cf6:	vfma.f32	s25, s10, s0
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
     cfa:	vnmul.f32	s12, s22, s24
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     cfe:	vfma.f32	s30, s23, s22
  gy = gy + Kp * ey + Ki * eInt[1];
  gz = gz + Kp * ez + Ki * eInt[2];
     d02:	vnmul.f32	s23, s1, s23
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
     d06:	vnmul.f32	s10, s26, s6
     d0a:	vfma.f32	s12, s2, s1
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     d0e:	vnmul.f32	s11, s25, s8
  gy = gy + Kp * ey + Ki * eInt[1];
     d12:	vfma.f32	s10, s8, s20
  gz = gz + Kp * ez + Ki * eInt[2];
     d16:	vfma.f32	s23, s24, s13
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     d1a:	vfma.f32	s11, s7, s26
  gy = gy + Kp * ey + Ki * eInt[1];
  gz = gz + Kp * ez + Ki * eInt[2];
     d1e:	vnmul.f32	s20, s20, s7
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
     d22:	vmov.f32	s8, #96	; 0x3f000000  0.5
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
     d26:	vadd.f32	s13, s12, s10
  gz = gz + Kp * ez + Ki * eInt[2];
     d2a:	vfma.f32	s20, s6, s25
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     d2e:	vadd.f32	s30, s30, s11
  gy = gy + Kp * ey + Ki * eInt[1];
     d32:	vfma.f32	s4, s13, s14
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
     d36:	vmul.f32	s9, s9, s8
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     d3a:	vfma.f32	s3, s30, s14
  gy = gy + Kp * ey + Ki * eInt[1];
  gz = gz + Kp * ez + Ki * eInt[2];
     d3e:	vadd.f32	s23, s23, s20
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
     d42:	vadd.f32	s4, s4, s15
  gz = gz + Kp * ez + Ki * eInt[2];
     d46:	vfma.f32	s5, s23, s14
    eInt[1] = 0.0f;
    eInt[2] = 0.0f;
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
     d4a:	vadd.f32	s3, s3, s15
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
     d4e:	vnmul.f32	s11, s4, s17
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
     d52:	vmul.f32	s14, s18, s4
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
     d56:	vfma.f32	s11, s29, s3
  }

  // Apply feedback terms
  gx = gx + Kp * ex + Ki * eInt[0];
  gy = gy + Kp * ey + Ki * eInt[1];
  gz = gz + Kp * ez + Ki * eInt[2];
     d5a:	vadd.f32	s15, s5, s15
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
     d5e:	vmul.f32	s12, s17, s15
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
     d62:	vnmul.f32	s13, s15, s18
 
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
     d66:	vfma.f32	s11, s28, s15
     d6a:	vfma.f32	s19, s11, s9
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
     d6e:	vfma.f32	s12, s3, s19
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
     d72:	vfma.f32	s14, s15, s19
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
     d76:	vfma.f32	s13, s4, s19
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
     d7a:	vfma.f32	s12, s28, s4
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
     d7e:	vmov.f32	s15, s14
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
     d82:	vmov.f32	s14, s13
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
     d86:	vfma.f32	s15, s27, s3
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
     d8a:	vfma.f32	s14, s16, s3
  // Integrate rate of change of quaternion
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
     d8e:	vfma.f32	s18, s9, s12
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
     d92:	vfma.f32	s16, s9, s15
  pa = q2;
  pb = q3;
  pc = q4;
  q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
     d96:	vfma.f32	s17, s9, s14
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
     d9a:	vmul.f32	s14, s18, s18
     d9e:	vfma.f32	s14, s19, s19
     da2:	vfma.f32	s14, s17, s17
     da6:	vfma.f32	s14, s16, s16
     daa:	vcvt.f64.f32	d7, s14
     dae:	vsqrt.f64	d0, d7
     db2:	vcmp.f64	d0, d0
     db6:	vmrs	APSR_nzcv, fpscr
     dba:	bne.n	e84 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x334>
     dbc:	vcvt.f32.f64	s0, d0
  norm = 1.0f / norm;
     dc0:	vmov.f32	s14, #112	; 0x3f800000  1.0
     dc4:	vdiv.f32	s15, s14, s0
  q[0] = q1 * norm;
     dc8:	vmul.f32	s19, s19, s15
  q[1] = q2 * norm;
     dcc:	vmul.f32	s18, s18, s15
  q[2] = q3 * norm;
     dd0:	vmul.f32	s17, s17, s15
  q[3] = q4 * norm;
     dd4:	vmul.f32	s16, s16, s15
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
  norm = 1.0f / norm;
  q[0] = q1 * norm;
     dd8:	vstr	s19, [r4]
  q[1] = q2 * norm;
     ddc:	vstr	s18, [r4, #4]
  q[2] = q3 * norm;
     de0:	vstr	s17, [r4, #8]
  q[3] = q4 * norm;
     de4:	vstr	s16, [r4, #12]
}
     de8:	add	sp, #48	; 0x30
     dea:	vpop	{d8-d15}
     dee:	pop	{r4, pc}
  float q3q3 = q3 * q3;
  float q3q4 = q3 * q4;
  float q4q4 = q4 * q4;

  // Normalise accelerometer measurement
  norm = sqrt(ax * ax + ay * ay + az * az);
     df0:	vmov.f64	d0, d7
     df4:	vstr	s9, [sp, #28]
     df8:	vstr	s8, [sp, #24]
     dfc:	vstr	s7, [sp, #20]
     e00:	vstr	s6, [sp, #16]
     e04:	vstr	s5, [sp, #12]
     e08:	vstr	s4, [sp, #8]
     e0c:	vstr	s3, [sp, #4]
     e10:	vstr	s2, [sp]
     e14:	bl	3fd8 <sqrt>
     e18:	vldr	s9, [sp, #28]
     e1c:	vldr	s8, [sp, #24]
     e20:	vldr	s7, [sp, #20]
     e24:	vldr	s6, [sp, #16]
     e28:	vldr	s5, [sp, #12]
     e2c:	vldr	s4, [sp, #8]
     e30:	vldr	s3, [sp, #4]
     e34:	vldr	s2, [sp]
     e38:	b.n	b92 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x42>
  ax *= norm;
  ay *= norm;
  az *= norm;

  // Normalise magnetometer measurement
  norm = sqrt(mx * mx + my * my + mz * mz);
     e3a:	vmov.f64	d0, d7
     e3e:	vstr	s9, [sp, #28]
     e42:	vstr	s8, [sp, #24]
     e46:	vstr	s7, [sp, #20]
     e4a:	vstr	s6, [sp, #16]
     e4e:	vstr	s5, [sp, #12]
     e52:	vstr	s4, [sp, #8]
     e56:	vstr	s3, [sp, #4]
     e5a:	vstr	s2, [sp]
     e5e:	bl	3fd8 <sqrt>
     e62:	vldr	s9, [sp, #28]
     e66:	vldr	s8, [sp, #24]
     e6a:	vldr	s7, [sp, #20]
     e6e:	vldr	s6, [sp, #16]
     e72:	vldr	s5, [sp, #12]
     e76:	vldr	s4, [sp, #8]
     e7a:	vldr	s3, [sp, #4]
     e7e:	vldr	s2, [sp]
     e82:	b.n	bc8 <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x78>
  q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
  q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
  q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);

  // Normalise quaternion
  norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
     e84:	vmov.f64	d0, d7
     e88:	bl	3fd8 <sqrt>
     e8c:	b.n	dbc <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x26c>
  mz *= norm;

  // Reference direction of Earth's magnetic field
  hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
  hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
  bx = sqrt((hx * hx) + (hy * hy));
     e8e:	vmov.f64	d0, d7
     e92:	vstr	s9, [sp, #44]	; 0x2c
     e96:	vstr	s5, [sp, #40]	; 0x28
     e9a:	vstr	s4, [sp, #36]	; 0x24
     e9e:	vstr	s3, [sp, #32]
     ea2:	vstr	s12, [sp, #28]
     ea6:	vstr	s10, [sp, #24]
     eaa:	vstr	s11, [sp, #20]
     eae:	vstr	s13, [sp, #16]
     eb2:	vstr	s8, [sp, #12]
     eb6:	vstr	s7, [sp, #8]
     eba:	vstr	s6, [sp, #4]
     ebe:	vstr	s2, [sp]
     ec2:	bl	3fd8 <sqrt>
     ec6:	vldr	s9, [sp, #44]	; 0x2c
     eca:	vldr	s5, [sp, #40]	; 0x28
     ece:	vldr	s4, [sp, #36]	; 0x24
     ed2:	vldr	s3, [sp, #32]
     ed6:	vldr	s12, [sp, #28]
     eda:	vldr	s10, [sp, #24]
     ede:	vldr	s11, [sp, #20]
     ee2:	vldr	s13, [sp, #16]
     ee6:	vldr	s8, [sp, #12]
     eea:	vldr	s7, [sp, #8]
     eee:	vldr	s6, [sp, #4]
     ef2:	vldr	s2, [sp]
     ef6:	b.n	c9a <MahonyQuaternionUpdate(float, float, float, float, float, float, float, float, float, float)+0x14a>
     ef8:	.word	0x20000780
     efc:	.word	0x00000000

00000f00 <getQ()>:
  q[1] = q2 * norm;
  q[2] = q3 * norm;
  q[3] = q4 * norm;
}

const float * getQ () { return q; }
     f00:	ldr	r0, [pc, #0]	; (f04 <getQ()+0x4>)
     f02:	bx	lr
     f04:	.word	0x20000780

00000f08 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff>:
// noticed any reduction in solution accuracy. This is essentially the I
// coefficient in a PID control sense; the bigger the feedback coefficient,
// the faster the solution converges, usually at the expense of accuracy.
// In any case, this is the free parameter in the Madgwick filtering and
// fusion scheme.
static float beta = sqrt(3.0f / 4.0f) * GyroMeasError;   // Compute beta
     f08:	ldr	r3, [pc, #4]	; (f10 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0x8>)
     f0a:	ldr	r2, [pc, #8]	; (f14 <_GLOBAL__sub_I__Z24MadgwickQuaternionUpdateffffffffff+0xc>)
     f0c:	str	r2, [r3, #0]
     f0e:	bx	lr
     f10:	.word	0x20000da0
     f14:	.word	0x3f1ac70d

00000f18 <MPU9250::MPU9250(unsigned char, TwoWire&, unsigned long)>:
    _spi->begin();
    pinMode(_csPin, OUTPUT);
    deselect();

}
MPU9250::MPU9250( uint8_t address, TwoWire &wirePort, uint32_t clock_frequency )
     f18:	push	{r3, r4, r5, r6, r7, lr}
     f1a:	mov	r4, r0
{
	_I2Caddr = address;
     f1c:	strb	r1, [r0, #4]
    _spi->begin();
    pinMode(_csPin, OUTPUT);
    deselect();

}
MPU9250::MPU9250( uint8_t address, TwoWire &wirePort, uint32_t clock_frequency )
     f1e:	movs	r5, #0
     f20:	movs	r6, #0
     f22:	mov.w	lr, #1
	_wire = &wirePort;
	_spi = NULL;

	_interfaceSpeed = clock_frequency;

	_csPin = NOT_SPI;	// Used to tell the library that the sensor is using I2C
     f26:	movs	r1, #255	; 0xff
    _spi->begin();
    pinMode(_csPin, OUTPUT);
    deselect();

}
MPU9250::MPU9250( uint8_t address, TwoWire &wirePort, uint32_t clock_frequency )
     f28:	movs	r7, #2
{
	_I2Caddr = address;
	_wire = &wirePort;
     f2a:	str	r2, [r0, #0]

	_interfaceSpeed = clock_frequency;

	_csPin = NOT_SPI;	// Used to tell the library that the sensor is using I2C

	_wire->begin();
     f2c:	mov	r0, r2
    _spi->begin();
    pinMode(_csPin, OUTPUT);
    deselect();

}
MPU9250::MPU9250( uint8_t address, TwoWire &wirePort, uint32_t clock_frequency )
     f2e:	strb.w	lr, [r4, #22]
     f32:	strb	r7, [r4, #23]
     f34:	strb	r6, [r4, #20]
     f36:	strb	r6, [r4, #21]
     f38:	str	r6, [r4, #44]	; 0x2c
     f3a:	str	r6, [r4, #48]	; 0x30
     f3c:	str	r6, [r4, #52]	; 0x34
     f3e:	str	r6, [r4, #64]	; 0x40
     f40:	str	r6, [r4, #68]	; 0x44
     f42:	str	r6, [r4, #72]	; 0x48
     f44:	str	r5, [r4, #56]	; 0x38
     f46:	str	r5, [r4, #60]	; 0x3c
     f48:	str.w	r5, [r4, #136]	; 0x88
     f4c:	str.w	r5, [r4, #140]	; 0x8c
     f50:	str.w	r5, [r4, #144]	; 0x90
     f54:	str.w	r5, [r4, #148]	; 0x94
     f58:	str.w	r5, [r4, #152]	; 0x98
     f5c:	str.w	r5, [r4, #156]	; 0x9c
     f60:	str.w	r5, [r4, #160]	; 0xa0
     f64:	str.w	r5, [r4, #164]	; 0xa4
     f68:	str.w	r5, [r4, #168]	; 0xa8
     f6c:	str.w	r5, [r4, #172]	; 0xac
     f70:	str.w	r5, [r4, #176]	; 0xb0
     f74:	str.w	r5, [r4, #180]	; 0xb4
     f78:	str.w	r5, [r4, #184]	; 0xb8
     f7c:	str.w	r5, [r4, #188]	; 0xbc
     f80:	str.w	r5, [r4, #192]	; 0xc0
     f84:	str.w	r5, [r4, #196]	; 0xc4
     f88:	str.w	r5, [r4, #200]	; 0xc8
     f8c:	str.w	r5, [r4, #204]	; 0xcc
{
	_I2Caddr = address;
	_wire = &wirePort;
	_spi = NULL;

	_interfaceSpeed = clock_frequency;
     f90:	str	r3, [r4, #16]

	_csPin = NOT_SPI;	// Used to tell the library that the sensor is using I2C
     f92:	strb	r1, [r4, #12]
}
MPU9250::MPU9250( uint8_t address, TwoWire &wirePort, uint32_t clock_frequency )
{
	_I2Caddr = address;
	_wire = &wirePort;
	_spi = NULL;
     f94:	str	r6, [r4, #8]

	_interfaceSpeed = clock_frequency;

	_csPin = NOT_SPI;	// Used to tell the library that the sensor is using I2C

	_wire->begin();
     f96:	bl	87c <TwoWire::begin()>
	_wire->setClock(_interfaceSpeed);
     f9a:	ldr	r0, [r4, #0]
     f9c:	ldr	r1, [r4, #16]
     f9e:	bl	ad8 <TwoWire::setClock(unsigned long)>
}
     fa2:	mov	r0, r4
     fa4:	pop	{r3, r4, r5, r6, r7, pc}
     fa6:	nop

00000fa8 <MPU9250::getMres()>:
  writeByteSPI(36, 0b10000000);   // Enable the multi-master mode
}

void MPU9250::getMres()
{
  switch (Mscale)
     fa8:	ldrb	r3, [r0, #22]
     faa:	cbz	r3, fb8 <MPU9250::getMres()+0x10>
     fac:	cmp	r3, #1
     fae:	bne.n	fb6 <MPU9250::getMres()+0xe>
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
      break;
    case MFS_16BITS:
      mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
     fb0:	ldr	r3, [pc, #12]	; (fc0 <MPU9250::getMres()+0x18>)
     fb2:	str	r3, [r0, #96]	; 0x60
     fb4:	bx	lr
     fb6:	bx	lr
  switch (Mscale)
  {
    // Possible magnetometer scales (and their register bit settings) are:
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
      mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
     fb8:	ldr	r3, [pc, #8]	; (fc4 <MPU9250::getMres()+0x1c>)
     fba:	str	r3, [r0, #96]	; 0x60
      break;
     fbc:	bx	lr
     fbe:	nop
     fc0:	.word	0x3fbfebff
     fc4:	.word	0x40bfebff

00000fc8 <MPU9250::getGres()>:
  }
}

void MPU9250::getGres()
{
  switch (Gscale)
     fc8:	ldrb	r3, [r0, #20]
     fca:	cmp	r3, #3
     fcc:	bhi.n	fda <MPU9250::getGres()+0x12>
     fce:	tbb	[pc, r3]
     fd2:	.short	0x080b
     fd4:	.short	0x0205
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
      break;
    case GFS_2000DPS:
      gRes = 2000.0f / 32768.0f;
     fd6:	ldr	r3, [pc, #24]	; (ff0 <MPU9250::getGres()+0x28>)
     fd8:	str	r3, [r0, #92]	; 0x5c
     fda:	bx	lr
      break;
    case GFS_500DPS:
      gRes = 500.0f / 32768.0f;
      break;
    case GFS_1000DPS:
      gRes = 1000.0f / 32768.0f;
     fdc:	ldr	r3, [pc, #20]	; (ff4 <MPU9250::getGres()+0x2c>)
     fde:	str	r3, [r0, #92]	; 0x5c
      break;
     fe0:	bx	lr
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
      break;
    case GFS_500DPS:
      gRes = 500.0f / 32768.0f;
     fe2:	ldr	r3, [pc, #20]	; (ff8 <MPU9250::getGres()+0x30>)
     fe4:	str	r3, [r0, #92]	; 0x5c
      break;
     fe6:	bx	lr
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case GFS_250DPS:
      gRes = 250.0f / 32768.0f;
     fe8:	ldr	r3, [pc, #16]	; (ffc <MPU9250::getGres()+0x34>)
     fea:	str	r3, [r0, #92]	; 0x5c
      break;
     fec:	bx	lr
     fee:	nop
     ff0:	.word	0x3d7a0000
     ff4:	.word	0x3cfa0000
     ff8:	.word	0x3c7a0000
     ffc:	.word	0x3bfa0000

00001000 <MPU9250::getAres()>:
  }
}

void MPU9250::getAres()
{
  switch (Ascale)
    1000:	ldrb	r3, [r0, #21]
    1002:	cmp	r3, #3
    1004:	bhi.n	1014 <MPU9250::getAres()+0x14>
    1006:	tbb	[pc, r3]
    100a:	.short	0x0a0e
    100c:	.short	0x0206
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
      break;
    case AFS_16G:
      aRes = 16.0f / 32768.0f;
    100e:	mov.w	r3, #973078528	; 0x3a000000
    1012:	str	r3, [r0, #88]	; 0x58
    1014:	bx	lr
      break;
    case AFS_4G:
      aRes = 4.0f / 32768.0f;
      break;
    case AFS_8G:
      aRes = 8.0f / 32768.0f;
    1016:	mov.w	r3, #964689920	; 0x39800000
    101a:	str	r3, [r0, #88]	; 0x58
      break;
    101c:	bx	lr
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
      break;
    case AFS_4G:
      aRes = 4.0f / 32768.0f;
    101e:	mov.w	r3, #956301312	; 0x39000000
    1022:	str	r3, [r0, #88]	; 0x58
      break;
    1024:	bx	lr
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
    // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
    // 2-bit value:
    case AFS_2G:
      aRes = 2.0f / 32768.0f;
    1026:	mov.w	r3, #947912704	; 0x38800000
    102a:	str	r3, [r0, #88]	; 0x58
      break;
    102c:	bx	lr
    102e:	nop

00001030 <MPU9250::updateTime()>:
}

// Calculate the time the last update took for use in the quaternion filters
// TODO: This doesn't really belong in this class.
void MPU9250::updateTime()
{
    1030:	push	{r4, lr}
    1032:	mov	r4, r0
  Now = micros();
    1034:	bl	3344 <micros>

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    1038:	vldr	s12, [pc, #44]	; 1068 <MPU9250::updateTime()+0x38>
    103c:	ldr	r3, [r4, #64]	; 0x40
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
    103e:	vldr	s14, [r4, #60]	; 0x3c
void MPU9250::updateTime()
{
  Now = micros();

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    1042:	subs	r3, r0, r3
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
  sumCount++;
    1044:	ldr	r2, [r4, #52]	; 0x34

// Calculate the time the last update took for use in the quaternion filters
// TODO: This doesn't really belong in this class.
void MPU9250::updateTime()
{
  Now = micros();
    1046:	str	r0, [r4, #72]	; 0x48

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    1048:	vmov	s15, r3
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
  sumCount++;
    104c:	adds	r2, #1
{
  Now = micros();

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
  lastUpdate = Now;
    104e:	str	r0, [r4, #64]	; 0x40
void MPU9250::updateTime()
{
  Now = micros();

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    1050:	vcvt.f32.u32	s15, s15
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
  sumCount++;
    1054:	str	r2, [r4, #52]	; 0x34
void MPU9250::updateTime()
{
  Now = micros();

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    1056:	vdiv.f32	s13, s15, s12
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
    105a:	vadd.f32	s15, s14, s13
void MPU9250::updateTime()
{
  Now = micros();

  // Set integration time by time elapsed since last filter update
  deltat = ((Now - lastUpdate) / 1000000.0f);
    105e:	vstr	s13, [r4, #56]	; 0x38
  lastUpdate = Now;

  sum += deltat; // sum for averaging filter update rate
    1062:	vstr	s15, [r4, #60]	; 0x3c
    1066:	pop	{r4, pc}
    1068:	.word	0x49742400

0000106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>:
    return writeByteWire(deviceAddress,registerAddress, data);
  }
}

uint8_t MPU9250::writeByteSPI(uint8_t registerAddress, uint8_t writeData)
{
    106c:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t returnVal;

  _spi->beginTransaction(SPISettings(_interfaceSpeed, MSBFIRST, SPI_MODE));
    106e:	ldr	r3, [r0, #8]
    return writeByteWire(deviceAddress,registerAddress, data);
  }
}

uint8_t MPU9250::writeByteSPI(uint8_t registerAddress, uint8_t writeData)
{
    1070:	mov	r5, r2
    1072:	mov	r4, r0
    1074:	mov	r6, r1

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1076:	ldrb	r2, [r3, #19]
  uint8_t returnVal;

  _spi->beginTransaction(SPISettings(_interfaceSpeed, MSBFIRST, SPI_MODE));
    1078:	ldr	r0, [r0, #16]
    107a:	cmp	r2, #0
    107c:	beq.n	10d0 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x64>
			__disable_irq();
    107e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1080:	ldrb	r2, [r3, #19]
    1082:	lsls	r7, r2, #31
    1084:	bpl.n	1094 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1086:	ldr	r1, [pc, #320]	; (11c8 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x15c>)
    1088:	ldr	r2, [r3, #20]
    108a:	ldr	r7, [r1, #0]
    108c:	ands	r2, r7
    108e:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1090:	str	r2, [r1, #0]
    1092:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    1094:	lsls	r1, r2, #30
    1096:	bpl.n	10a6 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1098:	ldr	r1, [pc, #304]	; (11cc <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x160>)
    109a:	ldr	r2, [r3, #24]
    109c:	ldr	r7, [r1, #0]
    109e:	ands	r2, r7
    10a0:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    10a2:	str	r2, [r1, #0]
    10a4:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    10a6:	lsls	r7, r2, #29
    10a8:	bpl.n	10b8 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x4c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    10aa:	ldr	r1, [pc, #292]	; (11d0 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x164>)
    10ac:	ldr	r2, [r3, #28]
    10ae:	ldr	r7, [r1, #0]
    10b0:	ands	r2, r7
    10b2:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    10b4:	str	r2, [r1, #0]
    10b6:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    10b8:	lsls	r1, r2, #28
    10ba:	bpl.n	10ca <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x5e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    10bc:	ldr	r1, [pc, #276]	; (11d4 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x168>)
    10be:	ldr	r2, [r3, #32]
    10c0:	ldr	r7, [r1, #0]
    10c2:	ands	r2, r7
    10c4:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    10c6:	str	r2, [r1, #0]
    10c8:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    10ca:	lsls	r7, r2, #27
    10cc:	bmi.n	11a4 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x138>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    10ce:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    10d0:	ldr	r2, [r3, #8]
    10d2:	cmp	r0, r2
    10d4:	beq.n	11b2 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x146>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    10d6:	ldr	r2, [pc, #256]	; (11d8 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x16c>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    10d8:	str	r0, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    10da:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    10dc:	ldr	r1, [pc, #252]	; (11dc <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x170>)
    10de:	ubfx	r7, r2, #4, #2
    10e2:	ubfx	r2, r2, #26, #3
    10e6:	ldr.w	r1, [r1, r7, lsl #2]
    10ea:	adds	r2, #1
    10ec:	udiv	r2, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    10f0:	cmp	r0, #0
    10f2:	beq.n	119a <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x12e>
    10f4:	udiv	r1, r2, r0

			if (d && clkhz/d > _clock) d++;
    10f8:	cmp	r1, #0
    10fa:	beq.n	11a0 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x134>
    10fc:	udiv	r2, r2, r1
    1100:	cmp	r0, r2
    1102:	it	cc
    1104:	addcc	r1, #1
			if (d > 257) d= 257;  // max div
    1106:	cmp.w	r1, #258	; 0x102
    110a:	bcc.n	11b6 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x14a>
    110c:	movw	r0, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    1110:	str	r0, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1112:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    1114:	movs	r1, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1116:	mov.w	lr, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    111a:	movs	r2, #1
		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    111c:	ldr	r7, [pc, #192]	; (11e0 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x174>)
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    111e:	str	r1, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1120:	str.w	lr, [r3, #36]	; 0x24
		port().CCR = _ccr;
    1124:	str	r0, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1126:	str	r7, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1128:	str	r2, [r3, #16]
}

// Select slave IC by asserting CS pin
void MPU9250::select()
{
  digitalWrite(_csPin, LOW);
    112a:	ldrb	r0, [r4, #12]
    112c:	bl	3674 <digitalWrite>
    1130:	ldr	r3, [r4, #8]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1132:	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1134:	str	r6, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1136:	ldr	r1, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1138:	tst.w	r1, #2031616	; 0x1f0000
    113c:	beq.n	1136 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xca>
    113e:	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1140:	str	r5, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1142:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1144:	tst.w	r2, #2031616	; 0x1f0000
    1148:	beq.n	1142 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xd6>
}

// Select slave IC by deasserting CS pin
void MPU9250::deselect()
{
  digitalWrite(_csPin, HIGH);
    114a:	movs	r1, #1
    114c:	ldrb	r0, [r4, #12]
    114e:	ldr	r5, [r3, #116]	; 0x74
    1150:	bl	3674 <digitalWrite>

  _spi->transfer(registerAddress);
  returnVal = _spi->transfer(writeData);

  deselect();
  _spi->endTransaction();
    1154:	ldr	r2, [r4, #8]
    1156:	uxtb	r5, r5
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1158:	ldrb	r3, [r2, #19]
    115a:	cbz	r3, 1196 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x12a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    115c:	lsls	r6, r3, #31
    115e:	bpl.n	1168 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xfc>
    1160:	ldr	r3, [pc, #128]	; (11e4 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x178>)
    1162:	ldr	r1, [r2, #40]	; 0x28
    1164:	str	r1, [r3, #0]
    1166:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1168:	lsls	r4, r3, #30
    116a:	bpl.n	1174 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x108>
    116c:	ldr	r3, [pc, #120]	; (11e8 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x17c>)
    116e:	ldr	r1, [r2, #44]	; 0x2c
    1170:	str	r1, [r3, #0]
    1172:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1174:	lsls	r0, r3, #29
    1176:	bpl.n	1180 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x114>
    1178:	ldr	r3, [pc, #112]	; (11ec <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x180>)
    117a:	ldr	r1, [r2, #48]	; 0x30
    117c:	str	r1, [r3, #0]
    117e:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1180:	lsls	r1, r3, #28
    1182:	bpl.n	118c <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x120>
    1184:	ldr	r3, [pc, #104]	; (11f0 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x184>)
    1186:	ldr	r1, [r2, #52]	; 0x34
    1188:	str	r1, [r3, #0]
    118a:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    118c:	lsls	r3, r3, #27
    118e:	bpl.n	1196 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x12a>
    1190:	ldr	r2, [r2, #56]	; 0x38
    1192:	ldr	r3, [pc, #96]	; (11f4 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x188>)
    1194:	str	r2, [r3, #0]
// #ifdef SERIAL_DEBUG
//   Serial.print("MPU9250::writeByteSPI slave returned: 0x");
//   Serial.println(returnVal, HEX);
// #endif
  return returnVal;
}
    1196:	mov	r0, r5
    1198:	pop	{r3, r4, r5, r6, r7, pc}

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    119a:	mov	r1, r2

			if (d && clkhz/d > _clock) d++;
    119c:	cmp	r1, #0
    119e:	bne.n	10fc <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x90>
    11a0:	mov	r0, r1
    11a2:	b.n	1110 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xa4>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    11a4:	ldr	r1, [pc, #80]	; (11f8 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x18c>)
    11a6:	ldr	r2, [r3, #36]	; 0x24
    11a8:	ldr	r7, [r1, #0]
    11aa:	ands	r2, r7
    11ac:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    11ae:	str	r2, [r1, #0]
    11b0:	b.n	10ce <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x62>
    11b2:	ldr	r0, [r3, #12]
    11b4:	b.n	1112 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xa6>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    11b6:	cmp	r1, #2
    11b8:	bls.n	11c4 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0x158>
    11ba:	subs	r1, #2
    11bc:	lsrs	r0, r1, #1
    11be:	orr.w	r0, r1, r0, lsl #8
    11c2:	b.n	1110 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xa4>
    11c4:	movs	r0, #0
    11c6:	b.n	1110 <MPU9250::writeByteSPI(unsigned char, unsigned char)+0xa4>
    11c8:	.word	0xe000e180
    11cc:	.word	0xe000e184
    11d0:	.word	0xe000e188
    11d4:	.word	0xe000e18c
    11d8:	.word	0x400fc000
    11dc:	.word	0x20000238
    11e0:	.word	0xc0000007
    11e4:	.word	0xe000e100
    11e8:	.word	0xe000e104
    11ec:	.word	0xe000e108
    11f0:	.word	0xe000e10c
    11f4:	.word	0xe000e110
    11f8:	.word	0xe000e190

000011fc <MPU9250::setupMagForSPI()>:
	_wire->begin();
	_wire->setClock(_interfaceSpeed);
}

void MPU9250::setupMagForSPI()
{
    11fc:	push	{r4, lr}
    11fe:	mov	r4, r0
  // Use slave 4 for talking to the magnetometer
  writeByteSPI(49, ((1 << 7) | AK8963_ADDRESS));    // Set the SLV_4_ADDR register to the magnetometer's address
    1200:	movs	r2, #140	; 0x8c
    1202:	movs	r1, #49	; 0x31
    1204:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
  writeByteSPI(52, 0b00000000);                     // Setup SLV_4 control as needed (but not set to do an operation yet)
    1208:	mov	r0, r4
    120a:	movs	r2, #0
    120c:	movs	r1, #52	; 0x34
    120e:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>

  writeByteSPI(36, 0b10000000);   // Enable the multi-master mode
    1212:	mov	r0, r4
    1214:	movs	r2, #128	; 0x80
    1216:	movs	r1, #36	; 0x24
}
    1218:	ldmia.w	sp!, {r4, lr}
{
  // Use slave 4 for talking to the magnetometer
  writeByteSPI(49, ((1 << 7) | AK8963_ADDRESS));    // Set the SLV_4_ADDR register to the magnetometer's address
  writeByteSPI(52, 0b00000000);                     // Setup SLV_4 control as needed (but not set to do an operation yet)

  writeByteSPI(36, 0b10000000);   // Enable the multi-master mode
    121c:	b.w	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>

00001220 <MPU9250::writeByteWire(unsigned char, unsigned char, unsigned char)>:
  return returnVal;
}

uint8_t MPU9250::writeByteWire(uint8_t deviceAddress, uint8_t registerAddress,
                            uint8_t data)
{
    1220:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1224:	mov	r4, r0
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    1226:	movs	r5, #1
    1228:	mov	r6, r1
	_wire->setClock(_interfaceSpeed);			// Reset to the desired speed, in case other devices required a slowdown
    122a:	ldr	r1, [r0, #16]
    122c:	ldr	r0, [r0, #0]
  return returnVal;
}

uint8_t MPU9250::writeByteWire(uint8_t deviceAddress, uint8_t registerAddress,
                            uint8_t data)
{
    122e:	mov	r8, r2
    1230:	mov	r7, r3
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1232:	lsls	r6, r5
	_wire->setClock(_interfaceSpeed);			// Reset to the desired speed, in case other devices required a slowdown
    1234:	bl	ad8 <TwoWire::setClock(unsigned long)>
  	_wire->beginTransmission(deviceAddress);  	// Initialize the Tx buffer
    1238:	ldr	r0, [r4, #0]
  	_wire->write(registerAddress);      		// Put slave register address in Tx buffer
    123a:	mov	r1, r8
		transmitting = 1;
    123c:	strb.w	r5, [r0, #96]	; 0x60
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1240:	strb.w	r6, [r0, #61]	; 0x3d
		transmitting = 1;
		txBufferLength = 1;
    1244:	strb.w	r5, [r0, #95]	; 0x5f
    1248:	ldr	r0, [r4, #0]
    124a:	ldr	r3, [r0, #0]
    124c:	ldr	r3, [r3, #0]
    124e:	blx	r3
  	_wire->write(data);                 		// Put data in Tx buffer
    1250:	ldr	r0, [r4, #0]
    1252:	mov	r1, r7
    1254:	ldr	r3, [r0, #0]
    1256:	ldr	r3, [r3, #0]
    1258:	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    125a:	mov	r1, r5
    125c:	ldr	r0, [r4, #0]
    125e:	bl	94c <TwoWire::endTransmission(unsigned char)>
  	_wire->endTransmission();           		// Send the Tx buffer
  	// TODO: Fix this to return something meaningful
  	// return NULL; // In the meantime fix it to return the right type
  	return 0;
}
    1262:	movs	r0, #0
    1264:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>:
}

// Wire.h read and write protocols
uint8_t MPU9250::writeByte(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t data)
{
    1268:	push	{r4, r5, r6}
  if (_csPin != NOT_SPI)
    126a:	ldrsb.w	r4, [r0, #12]
    126e:	adds	r4, #1
    1270:	beq.n	127e <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)+0x16>
    1272:	mov	r5, r2
  {
    return writeByteSPI(registerAddress, data);
    1274:	mov	r2, r3
    1276:	mov	r1, r5
  }
  else
  {
    return writeByteWire(deviceAddress,registerAddress, data);
  }
}
    1278:	pop	{r4, r5, r6}
uint8_t MPU9250::writeByte(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t data)
{
  if (_csPin != NOT_SPI)
  {
    return writeByteSPI(registerAddress, data);
    127a:	b.w	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
  }
  else
  {
    return writeByteWire(deviceAddress,registerAddress, data);
  }
}
    127e:	pop	{r4, r5, r6}
  {
    return writeByteSPI(registerAddress, data);
  }
  else
  {
    return writeByteWire(deviceAddress,registerAddress, data);
    1280:	b.w	1220 <MPU9250::writeByteWire(unsigned char, unsigned char, unsigned char)>

00001284 <MPU9250::readMagByteSPI(unsigned char)>:
    return readByteWire(deviceAddress, registerAddress);
  }
}

uint8_t MPU9250::readMagByteSPI(uint8_t registerAddress)
{
    1284:	push	{r4, r5, r6, lr}
    1286:	mov	r5, r0
    1288:	mov	r4, r1
  setupMagForSPI();
    128a:	bl	11fc <MPU9250::setupMagForSPI()>

  writeByteSPI(49, ((1 << 7) | AK8963_ADDRESS));
    128e:	movs	r2, #140	; 0x8c
    1290:	movs	r1, #49	; 0x31
    1292:	mov	r0, r5
    1294:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
  writeByteSPI(50, registerAddress);
    1298:	mov	r2, r4
    129a:	movs	r1, #50	; 0x32
    129c:	mov	r0, r5
    129e:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
  writeByteSPI(52, 0b11000000);         // Command the read into I2C_SLV4_DI register, cause an interrupt when complete
    12a2:	movs	r2, #192	; 0xc0
    12a4:	movs	r1, #52	; 0x34
    12a6:	mov	r0, r5
    12a8:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    12ac:	movs	r2, #255	; 0xff
    12ae:	mov	r0, r5
    12b0:	movs	r1, #182	; 0xb6
    12b2:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>

  // Wait for the data to be ready
  uint8_t I2C_MASTER_STATUS = readByteSPI(54);

  uint32_t count = 0;
  while(((I2C_MASTER_STATUS & 0b01000000) == 0) && (count++ < 100000))            // Checks against the I2C_SLV4_DONE bit in the I2C master status register
    12b6:	lsls	r2, r0, #25
    12b8:	bmi.n	12d4 <MPU9250::readMagByteSPI(unsigned char)+0x50>
    12ba:	movs	r4, #1
    12bc:	ldr	r6, [pc, #56]	; (12f8 <MPU9250::readMagByteSPI(unsigned char)+0x74>)
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    12be:	movs	r2, #255	; 0xff
    12c0:	movs	r1, #182	; 0xb6
    12c2:	mov	r0, r5
    12c4:	bl	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>

  // Wait for the data to be ready
  uint8_t I2C_MASTER_STATUS = readByteSPI(54);

  uint32_t count = 0;
  while(((I2C_MASTER_STATUS & 0b01000000) == 0) && (count++ < 100000))            // Checks against the I2C_SLV4_DONE bit in the I2C master status register
    12c8:	lsls	r3, r0, #25
    12ca:	bpl.n	12e2 <MPU9250::readMagByteSPI(unsigned char)+0x5e>
  {
    I2C_MASTER_STATUS = readByteSPI(54);  
  }
  if(count > 10000)
    12cc:	movw	r3, #10000	; 0x2710
    12d0:	cmp	r4, r3
    12d2:	bhi.n	12e8 <MPU9250::readMagByteSPI(unsigned char)+0x64>
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    12d4:	mov	r0, r5
    12d6:	movs	r2, #255	; 0xff
    12d8:	movs	r1, #181	; 0xb5
  
  


  return readByteSPI(53);   // Read the data that is in the SLV4_DI register 
}
    12da:	ldmia.w	sp!, {r4, r5, r6, lr}
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    12de:	b.w	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>

  // Wait for the data to be ready
  uint8_t I2C_MASTER_STATUS = readByteSPI(54);

  uint32_t count = 0;
  while(((I2C_MASTER_STATUS & 0b01000000) == 0) && (count++ < 100000))            // Checks against the I2C_SLV4_DONE bit in the I2C master status register
    12e2:	adds	r4, #1
    12e4:	cmp	r4, r6
    12e6:	bne.n	12be <MPU9250::readMagByteSPI(unsigned char)+0x3a>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    12e8:	movs	r1, #9
    12ea:	ldr	r0, [pc, #16]	; (12fc <MPU9250::readMagByteSPI(unsigned char)+0x78>)
    12ec:	bl	26c8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    12f0:	ldr	r0, [pc, #12]	; (1300 <MPU9250::readMagByteSPI(unsigned char)+0x7c>)
    12f2:	bl	3a14 <Print::println()>
    12f6:	b.n	12d4 <MPU9250::readMagByteSPI(unsigned char)+0x50>
    12f8:	.word	0x000186a1
    12fc:	.word	0x2000026c
    1300:	.word	0x20000848

00001304 <MPU9250::readByteWire(unsigned char, unsigned char)>:
  return 0x00;
}

// Read a byte from the given register address from device using I2C
uint8_t MPU9250::readByteWire(uint8_t deviceAddress, uint8_t registerAddress)
{
    1304:	push	{r4, r5, r6, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    1306:	movs	r5, #1
    1308:	mov	r6, r1
  uint8_t data; // `data` will store the register data

  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
    130a:	ldr	r3, [r0, #0]
  // Put slave register address in Tx buffer
  _wire->write(registerAddress);
    130c:	mov	r1, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    130e:	lsl.w	r2, r6, r5
  return 0x00;
}

// Read a byte from the given register address from device using I2C
uint8_t MPU9250::readByteWire(uint8_t deviceAddress, uint8_t registerAddress)
{
    1312:	mov	r4, r0
		transmitting = 1;
    1314:	strb.w	r5, [r3, #96]	; 0x60
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1318:	strb.w	r2, [r3, #61]	; 0x3d
		transmitting = 1;
		txBufferLength = 1;
    131c:	strb.w	r5, [r3, #95]	; 0x5f
  uint8_t data; // `data` will store the register data

  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
  // Put slave register address in Tx buffer
  _wire->write(registerAddress);
    1320:	ldr	r0, [r0, #0]
    1322:	ldr	r3, [r0, #0]
    1324:	ldr	r3, [r3, #0]
    1326:	blx	r3
  // Send the Tx buffer, but send a restart to keep connection alive
  _wire->endTransmission(false);
    1328:	movs	r1, #0
    132a:	ldr	r0, [r4, #0]
    132c:	bl	94c <TwoWire::endTransmission(unsigned char)>
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    1330:	mov	r3, r5
    1332:	mov	r2, r5
    1334:	mov	r1, r6
    1336:	ldr	r0, [r4, #0]
    1338:	bl	a00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
  // Read one byte from slave register address
  _wire->requestFrom(deviceAddress, (uint8_t) 1);
  // Fill Rx buffer with result
  data = _wire->read();
    133c:	ldr	r0, [r4, #0]
    133e:	ldr	r2, [pc, #44]	; (136c <MPU9250::readByteWire(unsigned char, unsigned char)+0x68>)
    1340:	ldr	r3, [r0, #0]
    1342:	ldr	r3, [r3, #20]
    1344:	cmp	r3, r2
    1346:	bne.n	1360 <MPU9250::readByteWire(unsigned char, unsigned char)+0x5c>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1348:	ldrb.w	r3, [r0, #58]	; 0x3a
    134c:	ldrb.w	r2, [r0, #59]	; 0x3b
    1350:	cmp	r2, r3
    1352:	bls.n	1366 <MPU9250::readByteWire(unsigned char, unsigned char)+0x62>
		return rxBuffer[rxBufferIndex++];
    1354:	adds	r2, r3, r5
    1356:	add	r3, r0
    1358:	strb.w	r2, [r0, #58]	; 0x3a
    135c:	ldrb	r0, [r3, #26]
    135e:	pop	{r4, r5, r6, pc}
    1360:	blx	r3
    1362:	uxtb	r0, r0
    1364:	pop	{r4, r5, r6, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1366:	movs	r0, #255	; 0xff
  // Return data read from slave register
  return data;
}
    1368:	pop	{r4, r5, r6, pc}
    136a:	nop
    136c:	.word	0x000007d5

00001370 <MPU9250::readByte(unsigned char, unsigned char)>:

// Read a byte from given register on device. Calls necessary SPI or I2C
// implementation. This was configured in the constructor.
uint8_t MPU9250::readByte(uint8_t deviceAddress, uint8_t registerAddress)
{
  if (_csPin != NOT_SPI)
    1370:	ldrsb.w	r3, [r0, #12]
    1374:	adds	r3, #1
    1376:	beq.n	1392 <MPU9250::readByte(unsigned char, unsigned char)+0x22>
  {
    if(deviceAddress == AK8963_ADDRESS)
    1378:	cmp	r1, #12
}

// Read a byte from given register on device. Calls necessary SPI or I2C
// implementation. This was configured in the constructor.
uint8_t MPU9250::readByte(uint8_t deviceAddress, uint8_t registerAddress)
{
    137a:	push	{r4, r5}
  if (_csPin != NOT_SPI)
  {
    if(deviceAddress == AK8963_ADDRESS)
    137c:	beq.n	138a <MPU9250::readByte(unsigned char, unsigned char)+0x1a>
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    137e:	orr.w	r1, r2, #128	; 0x80
    1382:	movs	r2, #255	; 0xff
  }
  else
  {
    return readByteWire(deviceAddress, registerAddress);
  }
}
    1384:	pop	{r4, r5}
}

// Read a byte from the given register address using SPI
uint8_t MPU9250::readByteSPI(uint8_t registerAddress)
{
  return writeByteSPI(registerAddress | READ_FLAG, 0xFF /*0xFF is arbitrary*/);
    1386:	b.w	106c <MPU9250::writeByteSPI(unsigned char, unsigned char)>
{
  if (_csPin != NOT_SPI)
  {
    if(deviceAddress == AK8963_ADDRESS)
    {
      return readMagByteSPI(registerAddress);
    138a:	mov	r1, r2
  }
  else
  {
    return readByteWire(deviceAddress, registerAddress);
  }
}
    138c:	pop	{r4, r5}
{
  if (_csPin != NOT_SPI)
  {
    if(deviceAddress == AK8963_ADDRESS)
    {
      return readMagByteSPI(registerAddress);
    138e:	b.w	1284 <MPU9250::readMagByteSPI(unsigned char)>
      return readByteSPI(registerAddress);
    } 
  }
  else
  {
    return readByteWire(deviceAddress, registerAddress);
    1392:	b.w	1304 <MPU9250::readByteWire(unsigned char, unsigned char)>
    1396:	nop

00001398 <MPU9250::initMPU9250()>:
    setupMagForSPI();
  }
}

void MPU9250::initMPU9250()
{
    1398:	push	{r3, r4, r5, lr}
  // wake up device
  // Clear sleep mode bit (6), enable all sensors
  writeByte(_I2Caddr, PWR_MGMT_1, 0x00);
    139a:	movs	r2, #107	; 0x6b
    setupMagForSPI();
  }
}

void MPU9250::initMPU9250()
{
    139c:	mov	r4, r0
  // wake up device
  // Clear sleep mode bit (6), enable all sensors
  writeByte(_I2Caddr, PWR_MGMT_1, 0x00);
    139e:	movs	r3, #0
    13a0:	ldrb	r1, [r0, #4]
    13a2:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(100); // Wait for all registers to reset
    13a6:	movs	r0, #100	; 0x64
    13a8:	bl	3284 <delay>

  // Get stable time source
  // Auto select clock source to be PLL gyroscope reference if ready else
  writeByte(_I2Caddr, PWR_MGMT_1, 0x01);
    13ac:	ldrb	r1, [r4, #4]
    13ae:	movs	r3, #1
    13b0:	movs	r2, #107	; 0x6b
    13b2:	mov	r0, r4
    13b4:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(200);
    13b8:	movs	r0, #200	; 0xc8
    13ba:	bl	3284 <delay>
  // minimum delay time for this setting is 5.9 ms, which means sensor fusion
  // update rates cannot be higher than 1 / 0.0059 = 170 Hz
  // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
  // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!),
  // 8 kHz, or 1 kHz
  writeByte(_I2Caddr, CONFIG, 0x03);
    13be:	ldrb	r1, [r4, #4]
    13c0:	movs	r3, #3
    13c2:	movs	r2, #26
    13c4:	mov	r0, r4
    13c6:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  // Use a 200 Hz rate; a rate consistent with the filter update rate
  // determined inset in CONFIG above.
  writeByte(_I2Caddr, SMPLRT_DIV, 0x04);
    13ca:	movs	r3, #4
    13cc:	ldrb	r1, [r4, #4]
    13ce:	movs	r2, #25
    13d0:	mov	r0, r4
    13d2:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Set gyroscope full scale range
  // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are
  // left-shifted into positions 4:3

  // get current GYRO_CONFIG register value
  uint8_t c = readByte(_I2Caddr, GYRO_CONFIG);
    13d6:	ldrb	r1, [r4, #4]
    13d8:	movs	r2, #27
    13da:	mov	r0, r4
    13dc:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
  c = c & ~0x18; // Clear AFS bits [4:3]
  c = c | Gscale << 3; // Set full scale range for the gyro
    13e0:	ldrb	r5, [r4, #20]
    13e2:	bic.w	r3, r0, #26
  // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of
  // GYRO_CONFIG
  // c =| 0x00;
  // Write new GYRO_CONFIG value to register
  writeByte(_I2Caddr, GYRO_CONFIG, c );
    13e6:	ldrb	r1, [r4, #4]
    13e8:	movs	r2, #27
    13ea:	mov	r0, r4
  // get current GYRO_CONFIG register value
  uint8_t c = readByte(_I2Caddr, GYRO_CONFIG);
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
  c = c & ~0x18; // Clear AFS bits [4:3]
  c = c | Gscale << 3; // Set full scale range for the gyro
    13ec:	orr.w	r3, r3, r5, lsl #3
  // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of
  // GYRO_CONFIG
  // c =| 0x00;
  // Write new GYRO_CONFIG value to register
  writeByte(_I2Caddr, GYRO_CONFIG, c );
    13f0:	and.w	r3, r3, #253	; 0xfd
    13f4:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  // Set accelerometer full-scale range configuration
  // Get current ACCEL_CONFIG register value
  c = readByte(_I2Caddr, ACCEL_CONFIG);
    13f8:	ldrb	r1, [r4, #4]
    13fa:	movs	r2, #28
    13fc:	mov	r0, r4
    13fe:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
    1402:	ldrb	r5, [r4, #21]
    1404:	bic.w	r3, r0, #24
  // Write new ACCEL_CONFIG register value
  writeByte(_I2Caddr, ACCEL_CONFIG, c);
    1408:	ldrb	r1, [r4, #4]
    140a:	movs	r2, #28
    140c:	mov	r0, r4
  // Set accelerometer full-scale range configuration
  // Get current ACCEL_CONFIG register value
  c = readByte(_I2Caddr, ACCEL_CONFIG);
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
    140e:	orr.w	r3, r3, r5, lsl #3
  // Write new ACCEL_CONFIG register value
  writeByte(_I2Caddr, ACCEL_CONFIG, c);
    1412:	uxtb	r3, r3
    1414:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by
  // choosing 1 for accel_fchoice_b bit [3]; in this case the bandwidth is
  // 1.13 kHz
  // Get current ACCEL_CONFIG2 register value
  c = readByte(_I2Caddr, ACCEL_CONFIG2);
    1418:	ldrb	r1, [r4, #4]
    141a:	movs	r2, #29
    141c:	mov	r0, r4
    141e:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
    1422:	and.w	r3, r0, #240	; 0xf0
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  // Write new ACCEL_CONFIG2 register value
  writeByte(_I2Caddr, ACCEL_CONFIG2, c);
    1426:	ldrb	r1, [r4, #4]
    1428:	movs	r2, #29
    142a:	orr.w	r3, r3, #3
    142e:	mov	r0, r4
    1430:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH
  // until interrupt cleared, clear on read of INT_STATUS, and enable
  // I2C_BYPASS_EN so additional chips can join the I2C bus and all can be
  // controlled by the Arduino as master.
  writeByte(_I2Caddr, INT_PIN_CFG, 0x22);
    1434:	ldrb	r1, [r4, #4]
    1436:	movs	r3, #34	; 0x22
    1438:	movs	r2, #55	; 0x37
    143a:	mov	r0, r4
    143c:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Enable data ready (bit 0) interrupt
  writeByte(_I2Caddr, INT_ENABLE, 0x01);
    1440:	movs	r3, #1
    1442:	ldrb	r1, [r4, #4]
    1444:	movs	r2, #56	; 0x38
    1446:	mov	r0, r4
    1448:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(100);
    144c:	movs	r0, #100	; 0x64
    144e:	bl	3284 <delay>

  if(_csPin != NOT_SPI)
    1452:	ldrsb.w	r3, [r4, #12]
    1456:	adds	r3, #1
    1458:	beq.n	1464 <MPU9250::initMPU9250()+0xcc>
  {
    setupMagForSPI();
    145a:	mov	r0, r4
  }
}
    145c:	ldmia.w	sp!, {r3, r4, r5, lr}
  writeByte(_I2Caddr, INT_ENABLE, 0x01);
  delay(100);

  if(_csPin != NOT_SPI)
  {
    setupMagForSPI();
    1460:	b.w	11fc <MPU9250::setupMagForSPI()>
    1464:	pop	{r3, r4, r5, pc}
    1466:	nop

00001468 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)>:
}

// Read 1 or more bytes from given register and device using I2C
uint8_t MPU9250::readBytesWire(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
    1468:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    146c:	movs	r7, #1
    146e:	mov	r9, r1
    1470:	mov	r5, r0
  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
  // Put slave register address in Tx buffer
  _wire->write(registerAddress);
    1472:	mov	r1, r2
// Read 1 or more bytes from given register and device using I2C
uint8_t MPU9250::readBytesWire(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
    1474:	ldr	r0, [r0, #0]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1476:	lsl.w	r2, r9, r7
}

// Read 1 or more bytes from given register and device using I2C
uint8_t MPU9250::readBytesWire(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
    147a:	mov	sl, r3
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    147c:	movs	r4, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    147e:	strb.w	r2, [r0, #61]	; 0x3d
		transmitting = 1;
    1482:	strb.w	r7, [r0, #96]	; 0x60
		txBufferLength = 1;
    1486:	strb.w	r7, [r0, #95]	; 0x5f
  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
  // Put slave register address in Tx buffer
  _wire->write(registerAddress);
    148a:	ldr	r0, [r5, #0]
}

// Read 1 or more bytes from given register and device using I2C
uint8_t MPU9250::readBytesWire(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
    148c:	ldr.w	r8, [sp, #32]
  // Initialize the Tx buffer
  _wire->beginTransmission(deviceAddress);
  // Put slave register address in Tx buffer
  _wire->write(registerAddress);
    1490:	ldr	r3, [r0, #0]
    1492:	ldr	r6, [pc, #116]	; (1508 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa0>)
    1494:	ldr	r3, [r3, #0]
    1496:	blx	r3
  // Send the Tx buffer, but send a restart to keep connection alive
  _wire->endTransmission(false);
    1498:	mov	r1, r4
    149a:	ldr	r0, [r5, #0]
    149c:	bl	94c <TwoWire::endTransmission(unsigned char)>
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    14a0:	mov	r3, r7
    14a2:	mov	r2, sl
    14a4:	mov	r1, r9
    14a6:	ldr	r0, [r5, #0]
    14a8:	ldr	r7, [pc, #96]	; (150c <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0xa4>)
    14aa:	bl	a00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

  uint8_t i = 0;
  // Read bytes from slave register address
  _wire->requestFrom(deviceAddress, count);
  while (_wire->available())
    14ae:	ldr	r0, [r5, #0]
    14b0:	uxtb.w	r9, r4
    14b4:	ldr	r3, [r0, #0]
    14b6:	ldr	r3, [r3, #16]
    14b8:	cmp	r3, r6
    14ba:	bne.n	14f2 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x8a>
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    14bc:	ldrb.w	r3, [r0, #59]	; 0x3b
    14c0:	ldrb.w	r0, [r0, #58]	; 0x3a
    14c4:	subs	r0, r3, r0
    14c6:	cbz	r0, 14f8 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x90>
  {
    // Put read results in the Rx buffer
    dest[i++] = _wire->read();
    14c8:	ldr	r0, [r5, #0]
    14ca:	ldr	r3, [r0, #0]
    14cc:	ldr	r3, [r3, #20]
    14ce:	cmp	r3, r7
    14d0:	bne.n	14fe <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x96>
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    14d2:	ldrb.w	r3, [r0, #58]	; 0x3a
    14d6:	ldrb.w	r2, [r0, #59]	; 0x3b
		return rxBuffer[rxBufferIndex++];
    14da:	add.w	lr, r3, #1
    14de:	adds	r1, r0, r3
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    14e0:	cmp	r2, r3
    14e2:	bls.n	1504 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x9c>
		return rxBuffer[rxBufferIndex++];
    14e4:	strb.w	lr, [r0, #58]	; 0x3a
    14e8:	ldrb	r0, [r1, #26]
    14ea:	adds	r4, #1
    14ec:	strb.w	r0, [r8, r9]
  _wire->endTransmission(false);

  uint8_t i = 0;
  // Read bytes from slave register address
  _wire->requestFrom(deviceAddress, count);
  while (_wire->available())
    14f0:	b.n	14ae <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x46>
    14f2:	blx	r3
    14f4:	cmp	r0, #0
    14f6:	bne.n	14c8 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x60>
    // Put read results in the Rx buffer
    dest[i++] = _wire->read();
  }

  return i; // Return number of bytes written
}
    14f8:	mov	r0, r9
    14fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  // Read bytes from slave register address
  _wire->requestFrom(deviceAddress, count);
  while (_wire->available())
  {
    // Put read results in the Rx buffer
    dest[i++] = _wire->read();
    14fe:	blx	r3
    1500:	uxtb	r0, r0
    1502:	b.n	14ea <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x82>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1504:	movs	r0, #255	; 0xff
    1506:	b.n	14ea <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)+0x82>
    1508:	.word	0x000007c9
    150c:	.word	0x000007d5

00001510 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)>:
  digitalWrite(_csPin, HIGH);
}

uint8_t MPU9250::readBytesSPI(uint8_t registerAddress, uint8_t count,
                           uint8_t * dest)
{
    1510:	push	{r3, r4, r5, r6, r7, lr}
    1512:	mov	r4, r2
  _spi->beginTransaction(SPISettings(SPI_DATA_RATE, MSBFIRST, SPI_MODE));
    1514:	ldr	r2, [r0, #8]
  digitalWrite(_csPin, HIGH);
}

uint8_t MPU9250::readBytesSPI(uint8_t registerAddress, uint8_t count,
                           uint8_t * dest)
{
    1516:	mov	r7, r3
    1518:	mov	r5, r0

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    151a:	ldrb	r3, [r2, #19]
    151c:	mov	r6, r1
    151e:	cmp	r3, #0
    1520:	beq.n	1576 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x66>
			__disable_irq();
    1522:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1524:	ldrb	r3, [r2, #19]
    1526:	lsls	r0, r3, #31
    1528:	bpl.n	1538 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    152a:	ldr	r1, [pc, #380]	; (16a8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x198>)
    152c:	ldr	r3, [r2, #20]
    152e:	ldr	r0, [r1, #0]
    1530:	ands	r3, r0
    1532:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1534:	str	r3, [r1, #0]
    1536:	ldrb	r3, [r2, #19]
			}
			if (interruptMasksUsed & 0x02) {
    1538:	lsls	r1, r3, #30
    153a:	bpl.n	154a <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x3a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    153c:	ldr	r1, [pc, #364]	; (16ac <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x19c>)
    153e:	ldr	r3, [r2, #24]
    1540:	ldr	r0, [r1, #0]
    1542:	ands	r3, r0
    1544:	str	r3, [r2, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1546:	str	r3, [r1, #0]
    1548:	ldrb	r3, [r2, #19]
			}
			if (interruptMasksUsed & 0x04) {
    154a:	lsls	r0, r3, #29
    154c:	bpl.n	155c <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x4c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    154e:	ldr	r1, [pc, #352]	; (16b0 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1a0>)
    1550:	ldr	r3, [r2, #28]
    1552:	ldr	r0, [r1, #0]
    1554:	ands	r3, r0
    1556:	str	r3, [r2, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1558:	str	r3, [r1, #0]
    155a:	ldrb	r3, [r2, #19]
			}
			if (interruptMasksUsed & 0x08) {
    155c:	lsls	r1, r3, #28
    155e:	bpl.n	156e <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x5e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1560:	ldr	r1, [pc, #336]	; (16b4 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1a4>)
    1562:	ldr	r3, [r2, #32]
    1564:	ldr	r0, [r1, #0]
    1566:	ands	r3, r0
    1568:	str	r3, [r2, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    156a:	str	r3, [r1, #0]
    156c:	ldrb	r3, [r2, #19]
			}
			if (interruptMasksUsed & 0x10) {
    156e:	lsls	r3, r3, #27
    1570:	bmi.w	1684 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x174>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1574:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1576:	ldr.w	lr, [pc, #364]	; 16e4 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1d4>
    157a:	ldr	r3, [r2, #8]
    157c:	cmp	r3, lr
    157e:	beq.w	1692 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x182>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1582:	ldr	r3, [pc, #308]	; (16b8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1a8>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1584:	str.w	lr, [r2, #8]

			uint32_t cbcmr = CCM_CBCMR;
    1588:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    158a:	ldr	r0, [pc, #304]	; (16bc <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1ac>)
    158c:	ubfx	ip, r3, #4, #2
    1590:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1594:	ldr	r3, [pc, #296]	; (16c0 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1b0>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1596:	ldr.w	r0, [r0, ip, lsl #2]
    159a:	adds	r1, #1
    159c:	udiv	r1, r0, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    15a0:	umull	r0, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    15a4:	lsrs	r0, r3, #18
    15a6:	bne.n	166e <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x15e>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    15a8:	str	r0, [r2, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    15aa:	ldr	r3, [r2, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    15ac:	movs	r1, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    15ae:	mov.w	ip, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    15b2:	ldr.w	lr, [pc, #308]	; 16e8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1d8>
		port().CR = LPSPI_CR_MEN;
    15b6:	movs	r2, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    15b8:	str	r1, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    15ba:	str.w	ip, [r3, #36]	; 0x24
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15be:	orr.w	r6, r6, #128	; 0x80

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
    15c2:	str	r0, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    15c4:	str.w	lr, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    15c8:	str	r2, [r3, #16]
}

// Select slave IC by asserting CS pin
void MPU9250::select()
{
  digitalWrite(_csPin, LOW);
    15ca:	ldrb	r0, [r5, #12]
    15cc:	bl	3674 <digitalWrite>
                           uint8_t * dest)
{
  _spi->beginTransaction(SPISettings(SPI_DATA_RATE, MSBFIRST, SPI_MODE));
  select();

  _spi->transfer(registerAddress | READ_FLAG);
    15d0:	ldr	r3, [r5, #8]
    15d2:	ldr	r1, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15d4:	str	r6, [r1, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    15d6:	ldr	r0, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    15d8:	tst.w	r0, #2031616	; 0x1f0000
    15dc:	beq.n	15d6 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0xc6>
    15de:	ldr	r2, [r1, #116]	; 0x74

  uint8_t i;

  for (i = 0; i < count; i++)
    15e0:	cbz	r4, 1606 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0xf6>
    15e2:	subs	r2, r4, #1
    15e4:	subs	r0, r7, #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15e6:	movs	r6, #0
    15e8:	uxtab	r2, r7, r2
    15ec:	str	r6, [r1, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    15ee:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    15f0:	tst.w	r3, #2031616	; 0x1f0000
    15f4:	beq.n	15ee <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0xde>
    15f6:	ldr	r3, [r1, #116]	; 0x74
  {
    dest[i] = _spi->transfer(0x00);
    15f8:	strb.w	r3, [r0, #1]!

  _spi->transfer(registerAddress | READ_FLAG);

  uint8_t i;

  for (i = 0; i < count; i++)
    15fc:	cmp	r2, r0
    15fe:	ldr	r3, [r5, #8]
    1600:	beq.n	1606 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0xf6>
    1602:	ldr	r1, [r3, #0]
    1604:	b.n	15ec <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0xdc>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1606:	ldrb	r2, [r3, #19]
    1608:	cbz	r2, 1644 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x134>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    160a:	lsls	r7, r2, #31
    160c:	bpl.n	1616 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x106>
    160e:	ldr	r2, [pc, #180]	; (16c4 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1b4>)
    1610:	ldr	r1, [r3, #40]	; 0x28
    1612:	str	r1, [r2, #0]
    1614:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1616:	lsls	r6, r2, #30
    1618:	bpl.n	1622 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x112>
    161a:	ldr	r2, [pc, #172]	; (16c8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1b8>)
    161c:	ldr	r1, [r3, #44]	; 0x2c
    161e:	str	r1, [r2, #0]
    1620:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1622:	lsls	r0, r2, #29
    1624:	bpl.n	162e <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x11e>
    1626:	ldr	r2, [pc, #164]	; (16cc <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1bc>)
    1628:	ldr	r1, [r3, #48]	; 0x30
    162a:	str	r1, [r2, #0]
    162c:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    162e:	lsls	r1, r2, #28
    1630:	bpl.n	163a <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x12a>
    1632:	ldr	r2, [pc, #156]	; (16d0 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1c0>)
    1634:	ldr	r1, [r3, #52]	; 0x34
    1636:	str	r1, [r2, #0]
    1638:	ldrb	r2, [r3, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    163a:	lsls	r2, r2, #27
    163c:	bpl.n	1644 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x134>
    163e:	ldr	r2, [r3, #56]	; 0x38
    1640:	ldr	r3, [pc, #144]	; (16d4 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1c4>)
    1642:	str	r2, [r3, #0]
}

// Select slave IC by deasserting CS pin
void MPU9250::deselect()
{
  digitalWrite(_csPin, HIGH);
    1644:	ldrb	r0, [r5, #12]
    1646:	movs	r1, #1
    1648:	bl	3674 <digitalWrite>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    164c:	ldr	r2, [pc, #136]	; (16d8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1c8>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    164e:	ldr	r1, [pc, #140]	; (16dc <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1cc>)
    1650:	movs	r3, #50	; 0x32
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1652:	ldr	r0, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1654:	ldr	r5, [pc, #104]	; (16c0 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1b0>)
    1656:	ldr	r1, [r1, #0]
    1658:	umull	r5, r1, r5, r1
    165c:	lsrs	r1, r1, #18
    165e:	mul.w	r1, r3, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1662:	ldr	r3, [r2, #0]
    1664:	subs	r3, r3, r0
    1666:	cmp	r1, r3
    1668:	bhi.n	1662 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x152>

  // Read count bytes from registerAddress via I2C_SLV0
  Serial.print("BHW::readBytesSPI: return value test: ");
  Serial.println(writeByteSPI(I2C_SLV0_CTRL, READ_FLAG | count));
  */
}
    166a:	mov	r0, r4
    166c:	pop	{r3, r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    166e:	udiv	r1, r1, r0
    1672:	cmp	r1, lr
    1674:	it	hi
    1676:	addhi	r0, #1
			if (d > 257) d= 257;  // max div
    1678:	cmp.w	r0, #258	; 0x102
    167c:	bcc.n	1696 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x186>
    167e:	movw	r0, #32767	; 0x7fff
    1682:	b.n	15a8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x98>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1684:	ldr	r1, [pc, #88]	; (16e0 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x1d0>)
    1686:	ldr	r3, [r2, #36]	; 0x24
    1688:	ldr	r0, [r1, #0]
    168a:	ands	r3, r0
    168c:	str	r3, [r2, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    168e:	str	r3, [r1, #0]
    1690:	b.n	1574 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x64>
    1692:	ldr	r0, [r2, #12]
    1694:	b.n	15aa <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x9a>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    1696:	cmp	r0, #2
    1698:	bhi.n	169e <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x18e>
    169a:	movs	r0, #0
    169c:	b.n	15a8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x98>
    169e:	subs	r0, #2
    16a0:	lsrs	r3, r0, #1
    16a2:	orr.w	r0, r0, r3, lsl #8
    16a6:	b.n	15a8 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)+0x98>
    16a8:	.word	0xe000e180
    16ac:	.word	0xe000e184
    16b0:	.word	0xe000e188
    16b4:	.word	0xe000e18c
    16b8:	.word	0x400fc000
    16bc:	.word	0x20000238
    16c0:	.word	0x431bde83
    16c4:	.word	0xe000e100
    16c8:	.word	0xe000e104
    16cc:	.word	0xe000e108
    16d0:	.word	0xe000e10c
    16d4:	.word	0xe000e110
    16d8:	.word	0xe0001004
    16dc:	.word	0x20000794
    16e0:	.word	0xe000e190
    16e4:	.word	0x000f4240
    16e8:	.word	0xc0000007

000016ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:

uint8_t MPU9250::readBytes(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
    16ec:	push	{r4, r5, r6, r7}
  if (_csPin == NOT_SPI)  // Read via I2C
    16ee:	ldrsb.w	r4, [r0, #12]
  */
}

uint8_t MPU9250::readBytes(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
    16f2:	ldr	r5, [sp, #16]
  if (_csPin == NOT_SPI)  // Read via I2C
    16f4:	adds	r4, #1
    16f6:	beq.n	1708 <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x1c>
    16f8:	mov	r6, r2
    16fa:	mov	r7, r3
  {
    return readBytesWire(deviceAddress, registerAddress, count, dest);
  }
  else  // Read using SPI
  {
    return readBytesSPI(registerAddress, count, dest);
    16fc:	mov	r3, r5
    16fe:	mov	r2, r7
    1700:	mov	r1, r6
  }
}
    1702:	pop	{r4, r5, r6, r7}
  {
    return readBytesWire(deviceAddress, registerAddress, count, dest);
  }
  else  // Read using SPI
  {
    return readBytesSPI(registerAddress, count, dest);
    1704:	b.w	1510 <MPU9250::readBytesSPI(unsigned char, unsigned char, unsigned char*)>
  }
}
    1708:	pop	{r4, r5, r6, r7}
uint8_t MPU9250::readBytes(uint8_t deviceAddress, uint8_t registerAddress,
                        uint8_t count, uint8_t * dest)
{
  if (_csPin == NOT_SPI)  // Read via I2C
  {
    return readBytesWire(deviceAddress, registerAddress, count, dest);
    170a:	b.w	1468 <MPU9250::readBytesWire(unsigned char, unsigned char, unsigned char, unsigned char*)>
    170e:	nop

00001710 <MPU9250::readAccelData(short*)>:
  }
}


void MPU9250::readAccelData(int16_t * destination)
{
    1710:	push	{r4, r5, lr}
    1712:	sub	sp, #20
  uint8_t rawData[6];  // x/y/z accel register data stored here
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    1714:	ldrb	r5, [r0, #4]
  }
}


void MPU9250::readAccelData(int16_t * destination)
{
    1716:	mov	r4, r1
  uint8_t rawData[6];  // x/y/z accel register data stored here
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    1718:	movs	r3, #6
    171a:	add	r2, sp, #8
    171c:	mov	r1, r5
    171e:	str	r2, [sp, #0]
    1720:	movs	r2, #59	; 0x3b
    1722:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    1726:	ldrb.w	r3, [sp, #9]
    172a:	ldrb.w	r1, [sp, #8]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    172e:	ldrb.w	r5, [sp, #10]
  uint8_t rawData[6];  // x/y/z accel register data stored here
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    1732:	orr.w	r1, r3, r1, lsl #8
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    1736:	ldrb.w	r2, [sp, #11]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    173a:	ldrb.w	r0, [sp, #12]
    173e:	ldrb.w	r3, [sp, #13]
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    1742:	orr.w	r2, r2, r5, lsl #8
  uint8_t rawData[6];  // x/y/z accel register data stored here
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    1746:	strh	r1, [r4, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    1748:	orr.w	r3, r3, r0, lsl #8
  // Read the six raw data registers into data array
  readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    174c:	strh	r2, [r4, #2]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    174e:	strh	r3, [r4, #4]
}
    1750:	add	sp, #20
    1752:	pop	{r4, r5, pc}

00001754 <MPU9250::readGyroData(short*)>:


void MPU9250::readGyroData(int16_t * destination)
{
    1754:	push	{r4, r5, lr}
    1756:	sub	sp, #20
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1758:	ldrb	r5, [r0, #4]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}


void MPU9250::readGyroData(int16_t * destination)
{
    175a:	mov	r4, r1
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    175c:	movs	r3, #6
    175e:	add	r2, sp, #8
    1760:	mov	r1, r5
    1762:	str	r2, [sp, #0]
    1764:	movs	r2, #67	; 0x43
    1766:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    176a:	ldrb.w	r3, [sp, #9]
    176e:	ldrb.w	r1, [sp, #8]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    1772:	ldrb.w	r5, [sp, #10]
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    1776:	orr.w	r1, r3, r1, lsl #8
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    177a:	ldrb.w	r2, [sp, #11]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    177e:	ldrb.w	r0, [sp, #12]
    1782:	ldrb.w	r3, [sp, #13]
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    1786:	orr.w	r2, r2, r5, lsl #8
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
    178a:	strh	r1, [r4, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    178c:	orr.w	r3, r3, r0, lsl #8
  // Read the six raw data registers sequentially into data array
  readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
    1790:	strh	r2, [r4, #2]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
    1792:	strh	r3, [r4, #4]
}
    1794:	add	sp, #20
    1796:	pop	{r4, r5, pc}

00001798 <MPU9250::readMagData(short*)>:

void MPU9250::readMagData(int16_t * destination)
{
    1798:	push	{r4, r5, lr}
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end
  // of data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if (readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
    179a:	movs	r2, #2
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}

void MPU9250::readMagData(int16_t * destination)
{
    179c:	sub	sp, #20
    179e:	mov	r4, r1
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end
  // of data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if (readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
    17a0:	movs	r1, #12
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}

void MPU9250::readMagData(int16_t * destination)
{
    17a2:	mov	r5, r0
  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end
  // of data acquisition
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if (readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
    17a4:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
    17a8:	lsls	r2, r0, #31
    17aa:	bmi.n	17b0 <MPU9250::readMagData(short*)+0x18>
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
      destination[2] = ((int16_t)rawData[5] << 8) | rawData[4];
    }
  }
}
    17ac:	add	sp, #20
    17ae:	pop	{r4, r5, pc}
  uint8_t rawData[7];
  // Wait for magnetometer data ready bit to be set
  if (readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
  {
    // Read the six raw data and ST2 registers sequentially into data array
    readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);
    17b0:	add	r1, sp, #8
    17b2:	movs	r3, #7
    17b4:	mov	r0, r5
    17b6:	movs	r2, #3
    17b8:	str	r1, [sp, #0]
    17ba:	movs	r1, #12
    17bc:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    uint8_t c = rawData[6]; // End data read by reading ST2 register
    // Check if magnetic sensor overflow set, if not then report data
    if (!(c & 0x08))
    17c0:	ldrb.w	r3, [sp, #14]
    17c4:	lsls	r3, r3, #28
    17c6:	bmi.n	17ac <MPU9250::readMagData(short*)+0x14>
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
    17c8:	ldrb.w	r3, [sp, #8]
    17cc:	ldrb.w	r1, [sp, #9]
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
    17d0:	ldrb.w	r5, [sp, #11]
    uint8_t c = rawData[6]; // End data read by reading ST2 register
    // Check if magnetic sensor overflow set, if not then report data
    if (!(c & 0x08))
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
    17d4:	orr.w	r1, r3, r1, lsl #8
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
    17d8:	ldrb.w	r2, [sp, #10]
      destination[2] = ((int16_t)rawData[5] << 8) | rawData[4];
    17dc:	ldrb.w	r0, [sp, #13]
    17e0:	ldrb.w	r3, [sp, #12]
    if (!(c & 0x08))
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
    17e4:	orr.w	r2, r2, r5, lsl #8
    uint8_t c = rawData[6]; // End data read by reading ST2 register
    // Check if magnetic sensor overflow set, if not then report data
    if (!(c & 0x08))
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
    17e8:	strh	r1, [r4, #0]
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
      destination[2] = ((int16_t)rawData[5] << 8) | rawData[4];
    17ea:	orr.w	r3, r3, r0, lsl #8
    if (!(c & 0x08))
    {
      // Turn the MSB and LSB into a signed 16-bit value
      destination[0] = ((int16_t)rawData[1] << 8) | rawData[0];
      // Data stored as little Endian
      destination[1] = ((int16_t)rawData[3] << 8) | rawData[2];
    17ee:	strh	r2, [r4, #2]
      destination[2] = ((int16_t)rawData[5] << 8) | rawData[4];
    17f0:	strh	r3, [r4, #4]
    }
  }
}
    17f2:	add	sp, #20
    17f4:	pop	{r4, r5, pc}
    17f6:	nop

000017f8 <MPU9250::initAK8963(float*)>:
  sum += deltat; // sum for averaging filter update rate
  sumCount++;
}

void MPU9250::initAK8963(float * destination)
{
    17f8:	push	{r4, r5, lr}
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  // TODO: Test this!! Likely doesn't work
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    17fa:	movs	r3, #0
  sum += deltat; // sum for averaging filter update rate
  sumCount++;
}

void MPU9250::initAK8963(float * destination)
{
    17fc:	sub	sp, #20
    17fe:	mov	r4, r0
    1800:	mov	r5, r1
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  // TODO: Test this!! Likely doesn't work
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1802:	movs	r2, #10
    1804:	movs	r1, #12
    1806:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    180a:	movs	r0, #10
    180c:	bl	3284 <delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
    1810:	movs	r3, #15
    1812:	movs	r2, #10
    1814:	movs	r1, #12
    1816:	mov	r0, r4
    1818:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    181c:	movs	r0, #10
    181e:	bl	3284 <delay>

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);
    1822:	add	r2, sp, #12
    1824:	movs	r3, #3
    1826:	movs	r1, #12
    1828:	str	r2, [sp, #0]
    182a:	mov	r0, r4
    182c:	movs	r2, #16
    182e:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    1832:	ldrb.w	r1, [sp, #12]
    1836:	vmov.f64	d7, #112	; 0x3f800000  1.0
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    183a:	ldrb.w	r2, [sp, #13]

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    183e:	subs	r1, #128	; 0x80
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    1840:	ldrb.w	r3, [sp, #14]
  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1844:	subs	r2, #128	; 0x80
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1846:	mov	r0, r4

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    1848:	vmov	s13, r1
    184c:	vmov.f64	d2, d7
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    1850:	subs	r3, #128	; 0x80
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1852:	movs	r1, #12

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    1854:	vcvt.f64.s32	d4, s13
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1858:	vmov	s13, r2
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    185c:	vmov	s12, r3
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1860:	movs	r2, #10
  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1862:	vcvt.f64.s32	d5, s13
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1866:	movs	r3, #0
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    1868:	vcvt.f64.s32	d6, s12

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    186c:	vldr	d3, [pc, #104]	; 18d8 <MPU9250::initAK8963(float*)+0xe0>
    1870:	vfma.f64	d2, d4, d3
    1874:	vmov.f64	d4, d2
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1878:	vmov.f64	d2, d7
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    187c:	vfma.f64	d7, d6, d3
  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1880:	vfma.f64	d2, d5, d3

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    1884:	vcvt.f32.f64	s8, d4
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    1888:	vcvt.f32.f64	s14, d7

  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
    188c:	vstr	s8, [r5]
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    1890:	vstr	s14, [r5, #8]
  // Read the x-, y-, and z-axis calibration values
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);

  // Return x-axis sensitivity adjustment values, etc.
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1894:	vcvt.f32.f64	s10, d2
    1898:	vstr	s10, [r5, #4]
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    189c:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    18a0:	movs	r0, #10
    18a2:	bl	3284 <delay>
  // Set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL
  // register, and enable continuous mode data acquisition Mmode (bits [3:0]),
  // 0010 for 8 Hz and 0110 for 100 Hz sample rates.

  // Set magnetometer data resolution and sample ODR
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode);
    18a6:	ldrb	r5, [r4, #22]
    18a8:	ldrb	r3, [r4, #23]
    18aa:	movs	r2, #10
    18ac:	movs	r1, #12
    18ae:	mov	r0, r4
    18b0:	orr.w	r3, r3, r5, lsl #4
    18b4:	uxtb	r3, r3
    18b6:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(10);
    18ba:	movs	r0, #10
    18bc:	bl	3284 <delay>

  if(_csPin != NOT_SPI)
    18c0:	ldrsb.w	r3, [r4, #12]
    18c4:	adds	r3, #1
    18c6:	beq.n	18ce <MPU9250::initAK8963(float*)+0xd6>
  {
    setupMagForSPI();
    18c8:	mov	r0, r4
    18ca:	bl	11fc <MPU9250::setupMagForSPI()>
  }
}
    18ce:	add	sp, #20
    18d0:	pop	{r4, r5, pc}
    18d2:	nop
    18d4:	nop.w
    18d8:	.word	0x00000000
    18dc:	.word	0x3f700000

000018e0 <MPU9250::calibrateMPU9250(float*, float*)>:

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{
    18e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18e4:	sub	sp, #60	; 0x3c
    18e6:	mov	r4, r0
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  writeByte(_I2Caddr, PWR_MGMT_1, READ_FLAG);
    18e8:	movs	r3, #128	; 0x80

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250::calibrateMPU9250(float * gyroBias, float * accelBias)
{
    18ea:	str	r1, [sp, #16]
    18ec:	str	r2, [sp, #20]
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  writeByte(_I2Caddr, PWR_MGMT_1, READ_FLAG);
    18ee:	movs	r2, #107	; 0x6b
    18f0:	ldrb	r1, [r0, #4]
    18f2:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(100);
    18f6:	movs	r0, #100	; 0x64
    18f8:	bl	3284 <delay>

  // get stable time source; Auto select clock source to be PLL gyroscope
  // reference if ready else use the internal oscillator, bits 2:0 = 001
  writeByte(_I2Caddr, PWR_MGMT_1, 0x01);
    18fc:	ldrb	r1, [r4, #4]
    18fe:	movs	r3, #1
    1900:	movs	r2, #107	; 0x6b
    1902:	mov	r0, r4
    1904:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, PWR_MGMT_2, 0x00);
    1908:	ldrb	r1, [r4, #4]
    190a:	movs	r3, #0
    190c:	movs	r2, #108	; 0x6c
    190e:	mov	r0, r4
    1910:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(200);
    1914:	movs	r0, #200	; 0xc8
    1916:	bl	3284 <delay>

  // Configure device for bias calculation
  // Disable all interrupts
  writeByte(_I2Caddr, INT_ENABLE, 0x00);
    191a:	ldrb	r1, [r4, #4]
    191c:	movs	r3, #0
    191e:	movs	r2, #56	; 0x38
    1920:	mov	r0, r4
    1922:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Disable FIFO
  writeByte(_I2Caddr, FIFO_EN, 0x00);
    1926:	ldrb	r1, [r4, #4]
    1928:	movs	r3, #0
    192a:	movs	r2, #35	; 0x23
    192c:	mov	r0, r4
    192e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Turn on internal clock source
  writeByte(_I2Caddr, PWR_MGMT_1, 0x00);
    1932:	ldrb	r1, [r4, #4]
    1934:	movs	r3, #0
    1936:	movs	r2, #107	; 0x6b
    1938:	mov	r0, r4
    193a:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Disable I2C master
  writeByte(_I2Caddr, I2C_MST_CTRL, 0x00);
    193e:	ldrb	r1, [r4, #4]
    1940:	movs	r3, #0
    1942:	movs	r2, #36	; 0x24
    1944:	mov	r0, r4
    1946:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Disable FIFO and I2C master modes
  writeByte(_I2Caddr, USER_CTRL, 0x00);
    194a:	ldrb	r1, [r4, #4]
    194c:	movs	r3, #0
    194e:	movs	r2, #106	; 0x6a
    1950:	mov	r0, r4
    1952:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Reset FIFO and DMP
  writeByte(_I2Caddr, USER_CTRL, 0x0C);
    1956:	ldrb	r1, [r4, #4]
    1958:	movs	r3, #12
    195a:	movs	r2, #106	; 0x6a
    195c:	mov	r0, r4
    195e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(15);
    1962:	movs	r0, #15
    1964:	bl	3284 <delay>

  // Configure MPU6050 gyro and accelerometer for bias calculation
  // Set low-pass filter to 188 Hz
  writeByte(_I2Caddr, CONFIG, 0x01);
    1968:	ldrb	r1, [r4, #4]
    196a:	movs	r3, #1
    196c:	movs	r2, #26
    196e:	mov	r0, r4
    1970:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Set sample rate to 1 kHz
  writeByte(_I2Caddr, SMPLRT_DIV, 0x00);
    1974:	ldrb	r1, [r4, #4]
    1976:	movs	r3, #0
    1978:	movs	r2, #25
    197a:	mov	r0, r4
    197c:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
  writeByte(_I2Caddr, GYRO_CONFIG, 0x00);
    1980:	ldrb	r1, [r4, #4]
    1982:	movs	r3, #0
    1984:	movs	r2, #27
    1986:	mov	r0, r4
    1988:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Set accelerometer full-scale to 2 g, maximum sensitivity
  writeByte(_I2Caddr, ACCEL_CONFIG, 0x00);
    198c:	ldrb	r1, [r4, #4]
    198e:	movs	r3, #0
    1990:	movs	r2, #28
    1992:	mov	r0, r4
    1994:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384; // = 16384 LSB/g

  // Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(_I2Caddr, USER_CTRL, 0x40);  // Enable FIFO
    1998:	ldrb	r1, [r4, #4]
    199a:	movs	r3, #64	; 0x40
    199c:	movs	r2, #106	; 0x6a
    199e:	mov	r0, r4
    19a0:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in
  // MPU-9150)
  writeByte(_I2Caddr, FIFO_EN, 0x78);
    19a4:	ldrb	r1, [r4, #4]
    19a6:	movs	r3, #120	; 0x78
    19a8:	movs	r2, #35	; 0x23
    19aa:	mov	r0, r4
    19ac:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(40);  // accumulate 40 samples in 40 milliseconds = 480 bytes
    19b0:	movs	r0, #40	; 0x28
    19b2:	bl	3284 <delay>

  // At end of sample accumulation, turn off FIFO sensor read
  // Disable gyro and accelerometer sensors for FIFO
  writeByte(_I2Caddr, FIFO_EN, 0x00);
    19b6:	ldrb	r1, [r4, #4]
    19b8:	movs	r3, #0
    19ba:	movs	r2, #35	; 0x23
    19bc:	mov	r0, r4
    19be:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Read FIFO sample count
  readBytes(_I2Caddr, FIFO_COUNTH, 2, &data[0]);
    19c2:	add	r3, sp, #32
    19c4:	ldrb	r1, [r4, #4]
    19c6:	movs	r2, #114	; 0x72
    19c8:	str	r3, [sp, #0]
    19ca:	mov	r0, r4
    19cc:	movs	r3, #2
    19ce:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;
    19d2:	ldrb.w	fp, [sp, #32]
    19d6:	ldrb.w	r3, [sp, #33]	; 0x21
    19da:	ldr	r2, [pc, #808]	; (1d04 <MPU9250::calibrateMPU9250(float*, float*)+0x424>)
    19dc:	orr.w	r3, r3, fp, lsl #8
    19e0:	umull	r3, fp, r2, r3

  for (ii = 0; ii < packet_count; ii++)
    19e4:	movs.w	r3, fp, lsr #3
    19e8:	str	r3, [sp, #12]
    19ea:	beq.w	1cf2 <MPU9250::calibrateMPU9250(float*, float*)+0x412>
    19ee:	movs	r5, #0
    19f0:	mov	sl, r5
    19f2:	mov	r9, r5
    19f4:	mov	r8, r5
    19f6:	mov	fp, r5
    19f8:	mov	r7, r5
    19fa:	mov	r6, r5
  {
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    // Read data for averaging
    readBytes(_I2Caddr, FIFO_R_W, 12, &data[0]);
    19fc:	add	r2, sp, #32
    19fe:	ldrb	r1, [r4, #4]
    1a00:	movs	r3, #12
    1a02:	mov	r0, r4
    1a04:	str	r2, [sp, #0]
    1a06:	movs	r2, #116	; 0x74
    1a08:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    1a0c:	ldrb.w	r1, [sp, #33]	; 0x21
    accel_bias[1] += (int32_t) accel_temp[1];
    1a10:	ldrb.w	r3, [sp, #35]	; 0x23
    1a14:	adds	r5, #1
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    1a16:	ldrb.w	lr, [sp, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
    1a1a:	ldrb.w	r2, [sp, #34]	; 0x22
  readBytes(_I2Caddr, FIFO_COUNTH, 2, &data[0]);
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;

  for (ii = 0; ii < packet_count; ii++)
    1a1e:	uxth	r0, r5
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    1a20:	orr.w	lr, r1, lr, lsl #8
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    1a24:	ldrb.w	ip, [sp, #36]	; 0x24
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    1a28:	orr.w	r2, r3, r2, lsl #8
    accel_bias[2] += (int32_t) accel_temp[2];
    1a2c:	ldrb.w	r3, [sp, #37]	; 0x25
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    1a30:	ldrb.w	r1, [sp, #38]	; 0x26
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    1a34:	sxtah	fp, fp, lr
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    1a38:	orr.w	r3, r3, ip, lsl #8
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    1a3c:	ldrb.w	lr, [sp, #39]	; 0x27
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    1a40:	ldrb.w	ip, [sp, #40]	; 0x28
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    1a44:	sxtah	r7, r7, r2
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    1a48:	orr.w	r1, lr, r1, lsl #8

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    1a4c:	sxtah	r6, r6, r3
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
    1a50:	ldrb.w	lr, [sp, #42]	; 0x2a
    1a54:	ldrb.w	r3, [sp, #43]	; 0x2b
    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    1a58:	sxtah	sl, sl, r1
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    1a5c:	ldrb.w	r2, [sp, #41]	; 0x29
    gyro_bias[2]  += (int32_t) gyro_temp[2];
    1a60:	orr.w	r3, r3, lr, lsl #8
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    1a64:	orr.w	r2, r2, ip, lsl #8
    gyro_bias[2]  += (int32_t) gyro_temp[2];
    1a68:	sxtah	r8, r8, r3
  readBytes(_I2Caddr, FIFO_COUNTH, 2, &data[0]);
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;

  for (ii = 0; ii < packet_count; ii++)
    1a6c:	ldr	r3, [sp, #12]
    // biases.
    accel_bias[0] += (int32_t) accel_temp[0];
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    1a6e:	sxtah	r9, r9, r2
  readBytes(_I2Caddr, FIFO_COUNTH, 2, &data[0]);
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;

  for (ii = 0; ii < packet_count; ii++)
    1a72:	cmp	r3, r0
    1a74:	bhi.n	19fc <MPU9250::calibrateMPU9250(float*, float*)+0x11c>
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  accel_bias[0] /= (int32_t) packet_count;
  accel_bias[1] /= (int32_t) packet_count;
  accel_bias[2] /= (int32_t) packet_count;
    1a76:	sdiv	r6, r6, r3
  gyro_bias[0]  /= (int32_t) packet_count;
  gyro_bias[1]  /= (int32_t) packet_count;
  gyro_bias[2]  /= (int32_t) packet_count;

  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  if (accel_bias[2] > 0L)
    1a7a:	cmp	r6, #0
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  accel_bias[0] /= (int32_t) packet_count;
    1a7c:	sdiv	r5, fp, r3
  accel_bias[1] /= (int32_t) packet_count;
    1a80:	sdiv	r7, r7, r3
  accel_bias[2] /= (int32_t) packet_count;
  gyro_bias[0]  /= (int32_t) packet_count;
    1a84:	sdiv	sl, sl, r3
  gyro_bias[1]  /= (int32_t) packet_count;
    1a88:	sdiv	r9, r9, r3
  gyro_bias[2]  /= (int32_t) packet_count;
    1a8c:	sdiv	r8, r8, r3

  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  if (accel_bias[2] > 0L)
    1a90:	ble.w	1cfe <MPU9250::calibrateMPU9250(float*, float*)+0x41e>
  {
    accel_bias[2] -= (int32_t) accelsensitivity;
    1a94:	sub.w	r6, r6, #16384	; 0x4000

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1a98:	cmp.w	sl, #0
    1a9c:	mov	r1, sl
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1a9e:	mov	r2, r9
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1aa0:	mov	lr, r8

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1aa2:	it	lt
    1aa4:	addlt.w	r1, sl, #3
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1aa8:	cmp.w	r9, #0
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;

  // Push gyro biases to hardware registers
  writeByte(_I2Caddr, XG_OFFSET_H, data[0]);
    1aac:	mov	r0, r4
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1aae:	it	lt
    1ab0:	addlt.w	r2, r9, #3
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1ab4:	cmp.w	r8, #0

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1ab8:	mov.w	r1, r1, asr #2
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1abc:	it	lt
    1abe:	addlt.w	lr, r8, #3
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1ac2:	asrs	r2, r2, #2

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1ac4:	negs	r1, r1
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1ac6:	mov.w	lr, lr, asr #2
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1aca:	negs	r2, r2

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1acc:	ubfx	r3, r1, #8, #8
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
    1ad0:	strb.w	r1, [sp, #33]	; 0x21
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1ad4:	rsb	lr, lr, #0
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1ad8:	asrs	r1, r2, #8
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
    1ada:	strb.w	r2, [sp, #35]	; 0x23
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;

  // Push gyro biases to hardware registers
  writeByte(_I2Caddr, XG_OFFSET_H, data[0]);
    1ade:	movs	r2, #19
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1ae0:	mov.w	ip, lr, asr #8
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    1ae4:	strb.w	r1, [sp, #34]	; 0x22
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;

  // Push gyro biases to hardware registers
  writeByte(_I2Caddr, XG_OFFSET_H, data[0]);
    1ae8:	ldrb	r1, [r4, #4]
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
    1aea:	strb.w	lr, [sp, #37]	; 0x25
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    1aee:	strb.w	ip, [sp, #36]	; 0x24

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
    1af2:	strb.w	r3, [sp, #32]
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  data[5] = (-gyro_bias[2]/4)       & 0xFF;

  // Push gyro biases to hardware registers
  writeByte(_I2Caddr, XG_OFFSET_H, data[0]);
    1af6:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, XG_OFFSET_L, data[1]);
    1afa:	ldrb.w	r3, [sp, #33]	; 0x21
    1afe:	movs	r2, #20
    1b00:	ldrb	r1, [r4, #4]
    1b02:	mov	r0, r4
    1b04:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, YG_OFFSET_H, data[2]);
    1b08:	ldrb.w	r3, [sp, #34]	; 0x22
    1b0c:	movs	r2, #21
    1b0e:	ldrb	r1, [r4, #4]
    1b10:	mov	r0, r4
    1b12:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, YG_OFFSET_L, data[3]);
    1b16:	ldrb.w	r3, [sp, #35]	; 0x23
    1b1a:	movs	r2, #22
    1b1c:	ldrb	r1, [r4, #4]
    1b1e:	mov	r0, r4
    1b20:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
    1b24:	ldrb.w	r3, [sp, #36]	; 0x24
    1b28:	movs	r2, #23
    1b2a:	ldrb	r1, [r4, #4]
    1b2c:	mov	r0, r4
    1b2e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);
    1b32:	ldrb.w	r3, [sp, #37]	; 0x25
    1b36:	movs	r2, #24
    1b38:	ldrb	r1, [r4, #4]
    1b3a:	mov	r0, r4
    1b3c:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    1b40:	vmov	s15, sl
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    1b44:	vmov	s12, r8
  writeByte(_I2Caddr, YG_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    1b48:	ldr	r1, [sp, #16]
    1b4a:	vcvt.f32.s32	s13, s15
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    1b4e:	vmov	s15, r9
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    1b52:	vcvt.f32.s32	s11, s12
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
    1b56:	add	r3, sp, #32
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    1b58:	vcvt.f32.s32	s14, s15
  writeByte(_I2Caddr, YG_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    1b5c:	vldr	s15, [pc, #424]	; 1d08 <MPU9250::calibrateMPU9250(float*, float*)+0x428>
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
    1b60:	str	r3, [sp, #0]
    1b62:	movs	r2, #119	; 0x77
  writeByte(_I2Caddr, YG_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    1b64:	vdiv.f32	s12, s13, s15
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
    1b68:	movs	r3, #2
    1b6a:	mov	r0, r4
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    1b6c:	vdiv.f32	s13, s14, s15
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    1b70:	vdiv.f32	s14, s11, s15
  writeByte(_I2Caddr, YG_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZG_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZG_OFFSET_L, data[5]);

  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
    1b74:	vstr	s12, [r1]
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    1b78:	vstr	s13, [r1, #4]
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    1b7c:	vstr	s14, [r1, #8]
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
    1b80:	ldrb	r1, [r4, #4]
    1b82:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    1b86:	ldrh.w	r8, [sp, #32]
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(_I2Caddr, YA_OFFSET_H, 2, &data[0]);
    1b8a:	add	r2, sp, #32
    1b8c:	ldrb	r1, [r4, #4]
    1b8e:	rev16.w	r8, r8
    1b92:	movs	r3, #2
    1b94:	str	r2, [sp, #0]
    1b96:	mov	r0, r4
    1b98:	uxth.w	r8, r8
    1b9c:	movs	r2, #122	; 0x7a

  // A place to hold the factory accelerometer trim biases
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    1b9e:	str.w	r8, [sp, #44]	; 0x2c
  readBytes(_I2Caddr, YA_OFFSET_H, 2, &data[0]);
    1ba2:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    1ba6:	ldrh.w	r9, [sp, #32]
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(_I2Caddr, ZA_OFFSET_H, 2, &data[0]);
    1baa:	add	r0, sp, #32
    1bac:	ldrb	r1, [r4, #4]
    1bae:	movs	r3, #2
    1bb0:	rev16.w	r9, r9
    1bb4:	movs	r2, #125	; 0x7d
    1bb6:	str	r0, [sp, #0]
    1bb8:	mov	r0, r4
    1bba:	uxth.w	r9, r9
  int32_t accel_bias_reg[3] = {0, 0, 0};
  // Read factory accelerometer trim values
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(_I2Caddr, YA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    1bbe:	str.w	r9, [sp, #48]	; 0x30
  readBytes(_I2Caddr, ZA_OFFSET_H, 2, &data[0]);
    1bc2:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    1bc6:	ldrh.w	r2, [sp, #32]

  // Define mask for temperature compensation bit 0 of lower byte of
  // accelerometer bias registers
  uint32_t mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  uint8_t mask_bit[3] = {0, 0, 0};
    1bca:	mov	r1, r8
    1bcc:	movs	r0, #0
  for (ii = 0; ii < 3; ii++)
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
    {
      mask_bit[ii] = 0x01;
    1bce:	mov.w	lr, #1
    1bd2:	rev16	r2, r2
  uint8_t mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
    1bd4:	lsls	r1, r1, #31

  // Define mask for temperature compensation bit 0 of lower byte of
  // accelerometer bias registers
  uint32_t mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  uint8_t mask_bit[3] = {0, 0, 0};
    1bd6:	mov	r3, r0
    1bd8:	strb.w	r0, [sp, #28]
    1bdc:	uxth	r2, r2
    1bde:	strb.w	r0, [sp, #29]
    1be2:	strb.w	r0, [sp, #30]
  readBytes(_I2Caddr, XA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(_I2Caddr, YA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(_I2Caddr, ZA_OFFSET_H, 2, &data[0]);
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
    1be6:	str	r2, [sp, #52]	; 0x34
  uint8_t mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
    1be8:	bpl.n	1bf0 <MPU9250::calibrateMPU9250(float*, float*)+0x310>
    {
      mask_bit[ii] = 0x01;
    1bea:	add	r1, sp, #28
    1bec:	strb.w	lr, [r1, r3]
    1bf0:	adds	r3, #1
  // accelerometer bias registers
  uint32_t mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  uint8_t mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
    1bf2:	cmp	r3, #3
    1bf4:	beq.n	1c06 <MPU9250::calibrateMPU9250(float*, float*)+0x326>
    1bf6:	add	r1, sp, #44	; 0x2c
    1bf8:	ldr.w	r1, [r1, r3, lsl #2]
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
    1bfc:	lsls	r1, r1, #31
    1bfe:	bmi.n	1bea <MPU9250::calibrateMPU9250(float*, float*)+0x30a>
    1c00:	adds	r3, #1
  // accelerometer bias registers
  uint32_t mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  uint8_t mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
    1c02:	cmp	r3, #3
    1c04:	bne.n	1bf6 <MPU9250::calibrateMPU9250(float*, float*)+0x316>

  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
    1c06:	cmp	r5, #0
    1c08:	mov	r3, r5
  data[3] = data[3] | mask_bit[1];
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  data[5] = (accel_bias_reg[2])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[5] = data[5] | mask_bit[2];
    1c0a:	ldrb.w	lr, [sp, #30]

  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
    1c0e:	it	lt
    1c10:	addlt	r3, r5, #7
  accel_bias_reg[1] -= (accel_bias[1]/8);
    1c12:	cmp	r7, #0

  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
    1c14:	sub.w	r8, r8, r3, asr #3
  accel_bias_reg[1] -= (accel_bias[1]/8);
    1c18:	mov	r3, r7
    1c1a:	it	lt
    1c1c:	addlt	r3, r7, #7
  accel_bias_reg[2] -= (accel_bias[2]/8);
    1c1e:	cmp	r6, #0

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
    1c20:	ubfx	r1, r8, #8, #8
  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
  accel_bias_reg[1] -= (accel_bias[1]/8);
    1c24:	sub.w	r9, r9, r3, asr #3
  accel_bias_reg[2] -= (accel_bias[2]/8);
    1c28:	mov	r3, r6
    1c2a:	it	lt
    1c2c:	addlt	r3, r6, #7

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
    1c2e:	strb.w	r1, [sp, #32]
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
  accel_bias_reg[1] -= (accel_bias[1]/8);
  accel_bias_reg[2] -= (accel_bias[2]/8);
    1c32:	sub.w	r3, r2, r3, asr #3

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
    1c36:	ldrb.w	r2, [sp, #28]
    1c3a:	orr.w	r8, r2, r8
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[3] = data[3] | mask_bit[1];
    1c3e:	ldrb.w	r2, [sp, #29]
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
    1c42:	asrs	r0, r3, #8
  data[5] = (accel_bias_reg[2])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[5] = data[5] | mask_bit[2];
    1c44:	orr.w	r3, lr, r3
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
    1c48:	mov.w	lr, r9, asr #8
  data[3] = (accel_bias_reg[1])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[3] = data[3] | mask_bit[1];
    1c4c:	orr.w	r9, r2, r9
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
    1c50:	strb.w	r0, [sp, #36]	; 0x24
  data[5] = data[5] | mask_bit[2];

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
  writeByte(_I2Caddr, XA_OFFSET_H, data[0]);
    1c54:	movs	r2, #119	; 0x77
  data[3] = data[3] | mask_bit[1];
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  data[5] = (accel_bias_reg[2])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[5] = data[5] | mask_bit[2];
    1c56:	strb.w	r3, [sp, #37]	; 0x25

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
  writeByte(_I2Caddr, XA_OFFSET_H, data[0]);
    1c5a:	mov	r0, r4
    1c5c:	mov	r3, r1
    1c5e:	ldrb	r1, [r4, #4]
  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
    1c60:	strb.w	lr, [sp, #34]	; 0x22

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  data[1] = (accel_bias_reg[0])      & 0xFF;
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
    1c64:	strb.w	r8, [sp, #33]	; 0x21
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  data[3] = (accel_bias_reg[1])      & 0xFF;
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[3] = data[3] | mask_bit[1];
    1c68:	strb.w	r9, [sp, #35]	; 0x23
  data[5] = data[5] | mask_bit[2];

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
  writeByte(_I2Caddr, XA_OFFSET_H, data[0]);
    1c6c:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, XA_OFFSET_L, data[1]);
    1c70:	ldrb.w	r3, [sp, #33]	; 0x21
    1c74:	movs	r2, #120	; 0x78
    1c76:	ldrb	r1, [r4, #4]
    1c78:	mov	r0, r4
    1c7a:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, YA_OFFSET_H, data[2]);
    1c7e:	ldrb.w	r3, [sp, #34]	; 0x22
    1c82:	ldrb	r1, [r4, #4]
    1c84:	movs	r2, #122	; 0x7a
    1c86:	mov	r0, r4
    1c88:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, YA_OFFSET_L, data[3]);
    1c8c:	ldrb.w	r3, [sp, #35]	; 0x23
    1c90:	ldrb	r1, [r4, #4]
    1c92:	movs	r2, #123	; 0x7b
    1c94:	mov	r0, r4
    1c96:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
    1c9a:	ldrb.w	r3, [sp, #36]	; 0x24
    1c9e:	ldrb	r1, [r4, #4]
    1ca0:	movs	r2, #125	; 0x7d
    1ca2:	mov	r0, r4
    1ca4:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);
    1ca8:	ldrb.w	r3, [sp, #37]	; 0x25
    1cac:	movs	r2, #126	; 0x7e
    1cae:	ldrb	r1, [r4, #4]
    1cb0:	mov	r0, r4
    1cb2:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
    1cb6:	vmov	s15, r5
    1cba:	vldr	s12, [pc, #80]	; 1d0c <MPU9250::calibrateMPU9250(float*, float*)+0x42c>
    1cbe:	vcvt.f32.s32	s13, s15
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
    1cc2:	vmov	s15, r7
  writeByte(_I2Caddr, YA_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
    1cc6:	ldr	r2, [sp, #20]
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
    1cc8:	vcvt.f32.s32	s14, s15
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
    1ccc:	vmov	s15, r6
  writeByte(_I2Caddr, YA_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
    1cd0:	vmul.f32	s13, s13, s12
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
    1cd4:	vcvt.f32.s32	s15, s15
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
    1cd8:	vmul.f32	s14, s14, s12
  writeByte(_I2Caddr, YA_OFFSET_L, data[3]);
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
    1cdc:	vstr	s13, [r2]
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
    1ce0:	vmul.f32	s15, s15, s12
  writeByte(_I2Caddr, ZA_OFFSET_H, data[4]);
  writeByte(_I2Caddr, ZA_OFFSET_L, data[5]);

  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
    1ce4:	vstr	s14, [r2, #4]
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
    1ce8:	vstr	s15, [r2, #8]
}
    1cec:	add	sp, #60	; 0x3c
    1cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
  }
  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  accel_bias[0] /= (int32_t) packet_count;
    1cf2:	ldr	r5, [sp, #12]
  accel_bias[1] /= (int32_t) packet_count;
    1cf4:	mov	r7, r5
  accel_bias[2] /= (int32_t) packet_count;
    1cf6:	mov	r6, r5
  gyro_bias[0]  /= (int32_t) packet_count;
    1cf8:	mov	sl, r5
  gyro_bias[1]  /= (int32_t) packet_count;
    1cfa:	mov	r9, r5
  gyro_bias[2]  /= (int32_t) packet_count;
    1cfc:	mov	r8, r5
  {
    accel_bias[2] -= (int32_t) accelsensitivity;
  }
  else
  {
    accel_bias[2] += (int32_t) accelsensitivity;
    1cfe:	add.w	r6, r6, #16384	; 0x4000
    1d02:	b.n	1a98 <MPU9250::calibrateMPU9250(float*, float*)+0x1b8>
    1d04:	.word	0xaaaaaaab
    1d08:	.word	0x43030000
    1d0c:	.word	0x38800000

00001d10 <MPU9250::MPU9250SelfTest(float*)>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250::MPU9250SelfTest(float * destination)
{
    1d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
    1d14:	movs	r5, #0

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250::MPU9250SelfTest(float * destination)
{
    1d16:	mov	r4, r0
  uint8_t selfTest[6];
  int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  float factoryTrim[6];
  uint8_t FS = GFS_250DPS;
   
  writeByte(_I2Caddr, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    1d18:	movs	r2, #25
  writeByte(_I2Caddr, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(_I2Caddr, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
  writeByte(_I2Caddr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
    1d1a:	mov.w	fp, #200	; 0xc8
  uint8_t selfTest[6];
  int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  float factoryTrim[6];
  uint8_t FS = GFS_250DPS;
   
  writeByte(_I2Caddr, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    1d1e:	mov	r3, r5
  writeByte(_I2Caddr, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(_I2Caddr, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
  writeByte(_I2Caddr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
    1d20:	mov	r7, r5
    1d22:	mov	sl, r5
    1d24:	mov	r6, r5
    1d26:	mov	r9, r5
    1d28:	mov	r8, r5

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250::MPU9250SelfTest(float * destination)
{
    1d2a:	vpush	{d8-d12}
    1d2e:	sub	sp, #100	; 0x64
    1d30:	str	r1, [sp, #12]
  uint8_t selfTest[6];
  int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  float factoryTrim[6];
  uint8_t FS = GFS_250DPS;
   
  writeByte(_I2Caddr, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    1d32:	ldrb	r1, [r0, #4]
// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250::MPU9250SelfTest(float * destination)
{
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
    1d34:	str	r5, [sp, #16]
  uint8_t selfTest[6];
  int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
    1d36:	str	r5, [sp, #24]
    1d38:	str	r5, [sp, #36]	; 0x24
    1d3a:	str	r5, [sp, #48]	; 0x30
    1d3c:	str	r5, [sp, #60]	; 0x3c
// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250::MPU9250SelfTest(float * destination)
{
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
    1d3e:	strh.w	r5, [sp, #20]
  uint8_t selfTest[6];
  int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
    1d42:	str	r5, [sp, #28]
    1d44:	str	r5, [sp, #32]
    1d46:	str	r5, [sp, #40]	; 0x28
    1d48:	str	r5, [sp, #44]	; 0x2c
    1d4a:	str	r5, [sp, #52]	; 0x34
    1d4c:	str	r5, [sp, #56]	; 0x38
    1d4e:	str	r5, [sp, #64]	; 0x40
    1d50:	str	r5, [sp, #68]	; 0x44
  float factoryTrim[6];
  uint8_t FS = GFS_250DPS;
   
  writeByte(_I2Caddr, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    1d52:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
    1d56:	ldrb	r1, [r4, #4]
    1d58:	movs	r3, #2
    1d5a:	movs	r2, #26
    1d5c:	mov	r0, r4
    1d5e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
    1d62:	mov	r3, r5
    1d64:	ldrb	r1, [r4, #4]
    1d66:	movs	r2, #27
    1d68:	mov	r0, r4
    1d6a:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
    1d6e:	ldrb	r1, [r4, #4]
    1d70:	movs	r3, #2
    1d72:	movs	r2, #29
    1d74:	mov	r0, r4
    1d76:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
    1d7a:	mov	r3, r5
    1d7c:	ldrb	r1, [r4, #4]
    1d7e:	mov	r0, r4
    1d80:	movs	r2, #28
    1d82:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    1d86:	add	r2, sp, #16
    1d88:	ldrb	r1, [r4, #4]
    1d8a:	movs	r3, #6
    1d8c:	mov	r0, r4
    1d8e:	str	r2, [sp, #0]
    1d90:	movs	r2, #59	; 0x3b
    1d92:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1d96:	ldrb.w	r1, [sp, #17]
    1d9a:	ldrb.w	ip, [sp, #16]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1d9e:	movs	r3, #6

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1da0:	ldrb.w	lr, [sp, #18]
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1da4:	movs	r2, #67	; 0x43
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1da6:	orr.w	ip, r1, ip, lsl #8
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1daa:	ldrb.w	r1, [sp, #19]
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dae:	ldrb.w	r0, [sp, #20]

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1db2:	orr.w	lr, r1, lr, lsl #8
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1db6:	ldrb.w	r1, [sp, #21]
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1dba:	sxtah	r5, r5, ip
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dbe:	str	r1, [sp, #8]
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1dc0:	add	r1, sp, #16

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1dc2:	sxtah	r7, r7, lr
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1dc6:	str	r5, [sp, #36]	; 0x24
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1dc8:	str	r1, [sp, #0]
  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dca:	ldr	r1, [sp, #8]

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1dcc:	str	r7, [sp, #40]	; 0x28
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dce:	orr.w	r0, r1, r0, lsl #8
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1dd2:	ldrb	r1, [r4, #4]
  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dd4:	sxtah	r6, r6, r0
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1dd8:	mov	r0, r4
  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1dda:	str	r6, [sp, #44]	; 0x2c
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    1ddc:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1de0:	ldrb.w	r3, [sp, #17]
  writeByte(_I2Caddr, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(_I2Caddr, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
  writeByte(_I2Caddr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
    1de4:	subs.w	fp, fp, #1
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1de8:	ldrb.w	r1, [sp, #16]
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1dec:	ldrb.w	lr, [sp, #18]
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1df0:	orr.w	r1, r3, r1, lsl #8
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1df4:	ldrb.w	r2, [sp, #19]
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1df8:	ldrb.w	r0, [sp, #20]
    1dfc:	ldrb.w	r3, [sp, #21]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1e00:	orr.w	r2, r2, lr, lsl #8
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1e04:	sxtah	r8, r8, r1
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1e08:	orr.w	r3, r3, r0, lsl #8
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1e0c:	sxtah	sl, sl, r2
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    1e10:	str.w	r8, [sp, #24]
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1e14:	sxtah	r9, r9, r3
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    1e18:	str.w	sl, [sp, #28]
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    1e1c:	str.w	r9, [sp, #32]
  writeByte(_I2Caddr, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(_I2Caddr, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
  writeByte(_I2Caddr, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(_I2Caddr, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
    1e20:	bne.n	1d86 <MPU9250::MPU9250SelfTest(float*)+0x76>
    1e22:	mov	r6, r8
  }

  // Get average of 200 values and store as average current readings
  for (int ii =0; ii < 3; ii++)
  {
    aAvg[ii] /= 200;
    1e24:	ldr	r2, [pc, #800]	; (2148 <MPU9250::MPU9250SelfTest(float*)+0x438>)
    1e26:	smull	r3, r1, r2, r5
    1e2a:	asrs	r5, r5, #31
    gAvg[ii] /= 200;
    1e2c:	smull	r0, r3, r2, r6
    1e30:	asrs	r6, r6, #31
  }

  // Get average of 200 values and store as average current readings
  for (int ii =0; ii < 3; ii++)
  {
    aAvg[ii] /= 200;
    1e32:	rsb	r5, r5, r1, asr #6
    gAvg[ii] /= 200;
    1e36:	rsb	r6, r6, r3, asr #6
  }

  // Get average of 200 values and store as average current readings
  for (int ii =0; ii < 3; ii++)
  {
    aAvg[ii] /= 200;
    1e3a:	add	r3, sp, #36	; 0x24
    1e3c:	str.w	r5, [r3, fp, lsl #2]
    gAvg[ii] /= 200;
    1e40:	add	r3, sp, #24
    1e42:	str.w	r6, [r3, fp, lsl #2]
    gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }

  // Get average of 200 values and store as average current readings
  for (int ii =0; ii < 3; ii++)
    1e46:	add.w	fp, fp, #1
    1e4a:	cmp.w	fp, #3
    1e4e:	beq.n	1e5e <MPU9250::MPU9250SelfTest(float*)+0x14e>
    1e50:	add	r3, sp, #36	; 0x24
    1e52:	ldr.w	r5, [r3, fp, lsl #2]
    1e56:	add	r3, sp, #24
    1e58:	ldr.w	r6, [r3, fp, lsl #2]
    1e5c:	b.n	1e26 <MPU9250::MPU9250SelfTest(float*)+0x116>
    gAvg[ii] /= 200;
  }

  // Configure the accelerometer for self-test
  // Enable self test on all three axes and set accelerometer range to +/- 2 g
  writeByte(_I2Caddr, ACCEL_CONFIG, 0xE0);
    1e5e:	movs	r3, #224	; 0xe0
    1e60:	movs	r2, #28
    1e62:	ldrb	r1, [r4, #4]
    1e64:	mov	r0, r4
    1e66:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  writeByte(_I2Caddr, GYRO_CONFIG,  0xE0);
  delay(25);  // Delay a while to let the device stabilize
    1e6a:	movs	r7, #200	; 0xc8

  // Configure the accelerometer for self-test
  // Enable self test on all three axes and set accelerometer range to +/- 2 g
  writeByte(_I2Caddr, ACCEL_CONFIG, 0xE0);
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  writeByte(_I2Caddr, GYRO_CONFIG,  0xE0);
    1e6c:	movs	r3, #224	; 0xe0
    1e6e:	movs	r2, #27
    1e70:	ldrb	r1, [r4, #4]
    1e72:	mov	r0, r4
    1e74:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(25);  // Delay a while to let the device stabilize
    1e78:	movs	r0, #25
    1e7a:	mov.w	r8, #0
    1e7e:	bl	3284 <delay>
    1e82:	mov	r3, r7
    1e84:	mov	fp, r8
    1e86:	mov	r6, r8
    1e88:	mov	r9, r8
    1e8a:	mov	r5, r8
    1e8c:	mov	r7, r8
    1e8e:	mov	sl, r3

  // Get average self-test values of gyro and acclerometer
  for (int ii = 0; ii < 200; ii++)
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    1e90:	add	r2, sp, #16
    1e92:	ldrb	r1, [r4, #4]
    1e94:	movs	r3, #6
    1e96:	mov	r0, r4
    1e98:	str	r2, [sp, #0]
    1e9a:	movs	r2, #59	; 0x3b
    1e9c:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1ea0:	ldrb.w	r1, [sp, #17]
    1ea4:	ldrb.w	ip, [sp, #16]
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1ea8:	movs	r3, #6
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1eaa:	ldrb.w	lr, [sp, #18]
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1eae:	movs	r2, #67	; 0x43
  for (int ii = 0; ii < 200; ii++)
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1eb0:	orr.w	ip, r1, ip, lsl #8
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1eb4:	ldrb.w	r1, [sp, #19]
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1eb8:	ldrb.w	r0, [sp, #20]
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1ebc:	orr.w	lr, r1, lr, lsl #8
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ec0:	ldrb.w	r1, [sp, #21]
  for (int ii = 0; ii < 200; ii++)
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1ec4:	sxtah	r5, r5, ip
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ec8:	str	r1, [sp, #8]

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1eca:	add	r1, sp, #16
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1ecc:	sxtah	r6, r6, lr
  for (int ii = 0; ii < 200; ii++)
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1ed0:	str	r5, [sp, #48]	; 0x30
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1ed2:	str	r1, [sp, #0]
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ed4:	ldr	r1, [sp, #8]
  {
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1ed6:	str	r6, [sp, #52]	; 0x34
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ed8:	orr.w	r0, r1, r0, lsl #8

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1edc:	ldrb	r1, [r4, #4]
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ede:	sxtah	r7, r7, r0

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1ee2:	mov	r0, r4
    // Read the six raw data registers into data array
    readBytes(_I2Caddr, ACCEL_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1ee4:	str	r7, [sp, #56]	; 0x38

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    1ee6:	bl	16ec <MPU9250::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1eea:	ldrb.w	r3, [sp, #17]
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  writeByte(_I2Caddr, GYRO_CONFIG,  0xE0);
  delay(25);  // Delay a while to let the device stabilize

  // Get average self-test values of gyro and acclerometer
  for (int ii = 0; ii < 200; ii++)
    1eee:	subs.w	sl, sl, #1
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1ef2:	ldrb.w	r1, [sp, #16]
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1ef6:	ldrb.w	lr, [sp, #18]
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1efa:	orr.w	r1, r3, r1, lsl #8
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1efe:	ldrb.w	r2, [sp, #19]
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1f02:	ldrb.w	r0, [sp, #20]
    1f06:	ldrb.w	r3, [sp, #21]

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1f0a:	orr.w	r2, r2, lr, lsl #8
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1f0e:	sxtah	r9, r9, r1
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1f12:	orr.w	r3, r3, r0, lsl #8

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1f16:	sxtah	fp, fp, r2
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    1f1a:	str.w	r9, [sp, #60]	; 0x3c
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1f1e:	sxtah	r8, r8, r3

    // Read the six raw data registers sequentially into data array
    readBytes(_I2Caddr, GYRO_XOUT_H, 6, &rawData[0]);
    // Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    1f22:	str.w	fp, [sp, #64]	; 0x40
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
    1f26:	str.w	r8, [sp, #68]	; 0x44
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  writeByte(_I2Caddr, GYRO_CONFIG,  0xE0);
  delay(25);  // Delay a while to let the device stabilize

  // Get average self-test values of gyro and acclerometer
  for (int ii = 0; ii < 200; ii++)
    1f2a:	bne.n	1e90 <MPU9250::MPU9250SelfTest(float*)+0x180>
    1f2c:	mov	r6, r9
    1f2e:	mov	r7, sl
  }

  // Get average of 200 values and store as average self-test readings
  for (int ii =0; ii < 3; ii++)
  {
    aSTAvg[ii] /= 200;
    1f30:	ldr	r2, [pc, #532]	; (2148 <MPU9250::MPU9250SelfTest(float*)+0x438>)
    1f32:	smull	r3, r1, r2, r5
    1f36:	asrs	r5, r5, #31
    gSTAvg[ii] /= 200;
    1f38:	smull	r0, r3, r2, r6
    1f3c:	asrs	r6, r6, #31
  }

  // Get average of 200 values and store as average self-test readings
  for (int ii =0; ii < 3; ii++)
  {
    aSTAvg[ii] /= 200;
    1f3e:	rsb	r5, r5, r1, asr #6
    gSTAvg[ii] /= 200;
    1f42:	rsb	r6, r6, r3, asr #6
  }

  // Get average of 200 values and store as average self-test readings
  for (int ii =0; ii < 3; ii++)
  {
    aSTAvg[ii] /= 200;
    1f46:	add	r3, sp, #48	; 0x30
    1f48:	str.w	r5, [r3, r7, lsl #2]
    gSTAvg[ii] /= 200;
    1f4c:	add	r3, sp, #60	; 0x3c
    1f4e:	str.w	r6, [r3, r7, lsl #2]
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for (int ii =0; ii < 3; ii++)
    1f52:	adds	r7, #1
    1f54:	cmp	r7, #3
    1f56:	beq.n	1f66 <MPU9250::MPU9250SelfTest(float*)+0x256>
    1f58:	add	r3, sp, #48	; 0x30
    1f5a:	ldr.w	r5, [r3, r7, lsl #2]
    1f5e:	add	r3, sp, #60	; 0x3c
    1f60:	ldr.w	r6, [r3, r7, lsl #2]
    1f64:	b.n	1f32 <MPU9250::MPU9250SelfTest(float*)+0x222>
    aSTAvg[ii] /= 200;
    gSTAvg[ii] /= 200;
  }

  // Configure the gyro and accelerometer for normal operation
  writeByte(_I2Caddr, ACCEL_CONFIG, 0x00);
    1f66:	ldrb	r1, [r4, #4]
    1f68:	movs	r3, #0
    1f6a:	movs	r2, #28
    1f6c:	mov	r0, r4
    1f6e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  writeByte(_I2Caddr, GYRO_CONFIG,  0x00);
    1f72:	movs	r3, #0
    1f74:	ldrb	r1, [r4, #4]
    1f76:	movs	r2, #27
    1f78:	mov	r0, r4
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
    1f7a:	vmov.f64	d10, #112	; 0x3f800000  1.0
    gSTAvg[ii] /= 200;
  }

  // Configure the gyro and accelerometer for normal operation
  writeByte(_I2Caddr, ACCEL_CONFIG, 0x00);
  writeByte(_I2Caddr, GYRO_CONFIG,  0x00);
    1f7e:	bl	1268 <MPU9250::writeByte(unsigned char, unsigned char, unsigned char)>
  delay(25);  // Delay a while to let the device stabilize
    1f82:	movs	r0, #25
    1f84:	bl	3284 <delay>

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  selfTest[0] = readByte(_I2Caddr, SELF_TEST_X_ACCEL);
    1f88:	ldrb	r1, [r4, #4]
    1f8a:	movs	r2, #13
    1f8c:	mov	r0, r4
    1f8e:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // Y-axis accel self-test results
  selfTest[1] = readByte(_I2Caddr, SELF_TEST_Y_ACCEL);
    1f92:	ldrb	r1, [r4, #4]
  writeByte(_I2Caddr, GYRO_CONFIG,  0x00);
  delay(25);  // Delay a while to let the device stabilize

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  selfTest[0] = readByte(_I2Caddr, SELF_TEST_X_ACCEL);
    1f94:	vmov	s17, r0
  // Y-axis accel self-test results
  selfTest[1] = readByte(_I2Caddr, SELF_TEST_Y_ACCEL);
    1f98:	movs	r2, #14
    1f9a:	mov	r0, r4
    1f9c:	add	r5, sp, #72	; 0x48
    1f9e:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // Z-axis accel self-test results
  selfTest[2] = readByte(_I2Caddr, SELF_TEST_Z_ACCEL);
    1fa2:	ldrb	r1, [r4, #4]

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  selfTest[0] = readByte(_I2Caddr, SELF_TEST_X_ACCEL);
  // Y-axis accel self-test results
  selfTest[1] = readByte(_I2Caddr, SELF_TEST_Y_ACCEL);
    1fa4:	vmov	s25, r0
  // Z-axis accel self-test results
  selfTest[2] = readByte(_I2Caddr, SELF_TEST_Z_ACCEL);
    1fa8:	movs	r2, #15
    1faa:	mov	r0, r4
    1fac:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
    1fb0:	ldrb	r1, [r4, #4]
  // X-axis accel self-test results
  selfTest[0] = readByte(_I2Caddr, SELF_TEST_X_ACCEL);
  // Y-axis accel self-test results
  selfTest[1] = readByte(_I2Caddr, SELF_TEST_Y_ACCEL);
  // Z-axis accel self-test results
  selfTest[2] = readByte(_I2Caddr, SELF_TEST_Z_ACCEL);
    1fb2:	vmov	s24, r0
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
    1fb6:	movs	r2, #0
    1fb8:	mov	r0, r4
    1fba:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // Y-axis gyro self-test results
  selfTest[4] = readByte(_I2Caddr, SELF_TEST_Y_GYRO);
    1fbe:	ldrb	r1, [r4, #4]
  // Y-axis accel self-test results
  selfTest[1] = readByte(_I2Caddr, SELF_TEST_Y_ACCEL);
  // Z-axis accel self-test results
  selfTest[2] = readByte(_I2Caddr, SELF_TEST_Z_ACCEL);
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
    1fc0:	vmov	s23, r0
  // Y-axis gyro self-test results
  selfTest[4] = readByte(_I2Caddr, SELF_TEST_Y_GYRO);
    1fc4:	movs	r2, #1
    1fc6:	mov	r0, r4
    1fc8:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);
    1fcc:	ldrb	r1, [r4, #4]
    1fce:	movs	r2, #2
  // Z-axis accel self-test results
  selfTest[2] = readByte(_I2Caddr, SELF_TEST_Z_ACCEL);
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
  // Y-axis gyro self-test results
  selfTest[4] = readByte(_I2Caddr, SELF_TEST_Y_GYRO);
    1fd0:	vmov	s16, r0
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);
    1fd4:	mov	r0, r4
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
    1fd6:	movs	r4, #0
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
  // Y-axis gyro self-test results
  selfTest[4] = readByte(_I2Caddr, SELF_TEST_Y_GYRO);
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);
    1fd8:	bl	1370 <MPU9250::readByte(unsigned char, unsigned char)>

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
    1fdc:	vcvt.f32.u32	s2, s17
  // X-axis gyro self-test results
  selfTest[3] = readByte(_I2Caddr, SELF_TEST_X_GYRO);
  // Y-axis gyro self-test results
  selfTest[4] = readByte(_I2Caddr, SELF_TEST_Y_GYRO);
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);
    1fe0:	vmov	s22, r0

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
    1fe4:	vcvt.f64.f32	d1, s2
    1fe8:	vldr	d9, [pc, #324]	; 2130 <MPU9250::MPU9250SelfTest(float*)+0x420>
    1fec:	vsub.f64	d1, d1, d10
    1ff0:	vldr	d0, [pc, #324]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    1ff4:	bl	3d58 <pow>
    1ff8:	vmul.f64	d2, d0, d9
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
    1ffc:	vcvt.f32.u32	s2, s25
    2000:	vldr	d0, [pc, #308]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    2004:	vcvt.f64.f32	d1, s2
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
    2008:	vcvt.f32.f64	s17, d2
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
    200c:	vsub.f64	d1, d1, d10
  // Z-axis gyro self-test results
  selfTest[5] = readByte(_I2Caddr, SELF_TEST_Z_GYRO);

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
    2010:	vstr	s17, [sp, #72]	; 0x48
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
    2014:	bl	3d58 <pow>
    2018:	vmul.f64	d7, d0, d9
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
    201c:	vcvt.f32.u32	s2, s24
    2020:	vldr	d0, [pc, #276]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    2024:	vcvt.f64.f32	d1, s2

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
    2028:	vcvt.f32.f64	s14, d7
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
    202c:	vsub.f64	d1, d1, d10

  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
    2030:	vstr	s14, [sp, #76]	; 0x4c
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
    2034:	bl	3d58 <pow>
    2038:	vmul.f64	d7, d0, d9
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
    203c:	vcvt.f32.u32	s2, s23
    2040:	vldr	d0, [pc, #244]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    2044:	vcvt.f64.f32	d1, s2
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
    2048:	vcvt.f32.f64	s14, d7
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
    204c:	vsub.f64	d1, d1, d10
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
    2050:	vstr	s14, [sp, #80]	; 0x50
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
    2054:	bl	3d58 <pow>
    2058:	vmul.f64	d7, d0, d9
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
    205c:	vcvt.f32.u32	s2, s16
    2060:	vldr	d0, [pc, #212]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    2064:	vcvt.f64.f32	d1, s2
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
    2068:	vcvt.f32.f64	s16, d7
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
    206c:	vsub.f64	d1, d1, d10
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
    2070:	vstr	s16, [sp, #84]	; 0x54
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
    2074:	bl	3d58 <pow>
    2078:	vmul.f64	d7, d0, d9
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
    207c:	vcvt.f32.u32	s2, s22
    2080:	vldr	d0, [pc, #180]	; 2138 <MPU9250::MPU9250SelfTest(float*)+0x428>
    2084:	vcvt.f64.f32	d1, s2
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
    2088:	vcvt.f32.f64	s14, d7
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
    208c:	vsub.f64	d1, d1, d10
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
    2090:	vstr	s14, [sp, #88]	; 0x58
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
    2094:	bl	3d58 <pow>
    2098:	vmul.f64	d0, d0, d9
    209c:	ldr	r6, [sp, #12]
    209e:	add.w	r7, r6, #12
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20a2:	vldr	d5, [pc, #156]	; 2140 <MPU9250::MPU9250SelfTest(float*)+0x430>
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
    20a6:	vcvt.f32.f64	s0, d0
    20aa:	vstr	s0, [sp, #92]	; 0x5c
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20ae:	add	r3, sp, #48	; 0x30
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20b0:	add	r1, sp, #24
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20b2:	vcvt.f64.f32	d2, s17
    20b6:	adds	r5, #4
    20b8:	ldr.w	r2, [r3, r4, lsl #2]
    20bc:	add	r3, sp, #36	; 0x24
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20be:	ldr.w	r1, [r1, r4, lsl #2]
    20c2:	vcvt.f64.f32	d3, s16
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20c6:	ldr.w	r0, [r3, r4, lsl #2]
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20ca:	add	r3, sp, #60	; 0x3c
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20cc:	subs	r2, r2, r0
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20ce:	ldr.w	r3, [r3, r4, lsl #2]
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
    20d2:	adds	r4, #1
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20d4:	vmov	s12, r2
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20d8:	subs	r3, r3, r1
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
    20da:	cmp	r4, #3
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20dc:	vcvt.f32.s32	s12, s12
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20e0:	vmov	s14, r3
    20e4:	vcvt.f32.s32	s14, s14
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20e8:	vcvt.f64.f32	d6, s12
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20ec:	vcvt.f64.f32	d7, s14
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20f0:	vmul.f64	d6, d6, d5
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20f4:	vmul.f64	d7, d7, d5
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    20f8:	vdiv.f64	d4, d6, d2
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    20fc:	vdiv.f64	d6, d7, d3
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    2100:	vsub.f64	d7, d4, d5
    2104:	vcvt.f32.f64	s9, d7
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    2108:	vsub.f64	d7, d6, d5
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
  {
    // Report percent differences
    destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i]
      - 100.;
    210c:	vstmia	r6!, {s9}
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
    2110:	vcvt.f32.f64	s14, d7
    2114:	vstmia	r7!, {s14}
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for (int i = 0; i < 3; i++)
    2118:	beq.n	2124 <MPU9250::MPU9250SelfTest(float*)+0x414>
    211a:	vldr	s17, [r5]
    211e:	vldr	s16, [r5, #12]
    2122:	b.n	20ae <MPU9250::MPU9250SelfTest(float*)+0x39e>
      - 100.;
    // Report percent differences
    destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3]
      - 100.;
  }
}
    2124:	add	sp, #100	; 0x64
    2126:	vpop	{d8-d12}
    212a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    212e:	nop
    2130:	.word	0x00000000
    2134:	.word	0x40a47800
    2138:	.word	0xc28f5c29
    213c:	.word	0x3ff028f5
    2140:	.word	0x00000000
    2144:	.word	0x40590000
    2148:	.word	0x51eb851f

0000214c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    214c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    214e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2152:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2156:	bne.n	2234 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2158:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    215a:	bcc.n	21e0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    215c:	ldr.w	r3, [r1], #4
    2160:	str.w	r3, [r0], #4
    2164:	ldr.w	r3, [r1], #4
    2168:	str.w	r3, [r0], #4
    216c:	ldr.w	r3, [r1], #4
    2170:	str.w	r3, [r0], #4
    2174:	ldr.w	r3, [r1], #4
    2178:	str.w	r3, [r0], #4
    217c:	ldr.w	r3, [r1], #4
    2180:	str.w	r3, [r0], #4
    2184:	ldr.w	r3, [r1], #4
    2188:	str.w	r3, [r0], #4
    218c:	ldr.w	r3, [r1], #4
    2190:	str.w	r3, [r0], #4
    2194:	ldr.w	r3, [r1], #4
    2198:	str.w	r3, [r0], #4
    219c:	ldr.w	r3, [r1], #4
    21a0:	str.w	r3, [r0], #4
    21a4:	ldr.w	r3, [r1], #4
    21a8:	str.w	r3, [r0], #4
    21ac:	ldr.w	r3, [r1], #4
    21b0:	str.w	r3, [r0], #4
    21b4:	ldr.w	r3, [r1], #4
    21b8:	str.w	r3, [r0], #4
    21bc:	ldr.w	r3, [r1], #4
    21c0:	str.w	r3, [r0], #4
    21c4:	ldr.w	r3, [r1], #4
    21c8:	str.w	r3, [r0], #4
    21cc:	ldr.w	r3, [r1], #4
    21d0:	str.w	r3, [r0], #4
    21d4:	ldr.w	r3, [r1], #4
    21d8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    21dc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    21de:	bcs.n	215c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    21e0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    21e2:	bcc.n	2208 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    21e4:	ldr.w	r3, [r1], #4
    21e8:	str.w	r3, [r0], #4
    21ec:	ldr.w	r3, [r1], #4
    21f0:	str.w	r3, [r0], #4
    21f4:	ldr.w	r3, [r1], #4
    21f8:	str.w	r3, [r0], #4
    21fc:	ldr.w	r3, [r1], #4
    2200:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2204:	subs	r2, #16
	bhs	.Lmid_block_loop
    2206:	bcs.n	21e4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2208:	adds	r2, #12
	blo	.Lcopy_less_than_4
    220a:	bcc.n	2218 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    220c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2210:	str.w	r3, [r0], #4
	subs	r2, #4
    2214:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2216:	bcs.n	220c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2218:	adds	r2, #4
	beq	.Ldone
    221a:	beq.n	222e <memcpy+0xe2>

	lsls	r2, r2, #31
    221c:	lsls	r2, r2, #31
	itt ne
    221e:	itt	ne
	ldrbne  r3, [r1], #1
    2220:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2224:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2228:	bcc.n	222e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    222a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    222c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    222e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2230:	bx	lr
    2232:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2234:	cmp	r2, #8
	blo	.Lbyte_copy
    2236:	bcc.n	2260 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2238:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    223a:	beq.n	2158 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    223c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2240:	beq.n	2158 <memcpy+0xc>

	rsb	r3, #4
    2242:	rsb	r3, r3, #4
	subs	r2, r3
    2246:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2248:	lsls	r3, r3, #31
	itt ne
    224a:	itt	ne
	ldrbne  r3, [r1], #1
    224c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2250:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2254:	bcc.n	2158 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2256:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    225a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    225e:	b.n	2158 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2260:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2262:	bcc.n	2218 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2264:	subs	r2, #1
	ldrb    r3, [r1], #1
    2266:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    226a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    226e:	bcs.n	2264 <memcpy+0x118>

	ldrb	r3, [r1]
    2270:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2272:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2274:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2276:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2278:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    227a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    227c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    227e:	bx	lr

00002280 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2280:	movs	r0, #4
    2282:	mov	r1, lr
    2284:	tst	r0, r1
    2286:	beq.n	2290 <_MSP>
    2288:	mrs	r0, PSP
    228c:	b.w	22a0 <HardFault_HandlerC>

00002290 <_MSP>:
    2290:	mrs	r0, MSP
    2294:	b.w	22a0 <HardFault_HandlerC>

00002298 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2298:	bx	lr
    229a:	nop

0000229c <startup_default_late_hook>:
extern void __libc_init_array(void); // C++ standard library


void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    229c:	bx	lr
    229e:	nop

000022a0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    22a0:	ldr	r3, [pc, #108]	; (2310 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    22a2:	movs	r1, #5
    22a4:	ldr	r2, [pc, #108]	; (2314 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    22a6:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    22a8:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    22aa:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    22ae:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    22b0:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    22b4:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    22b6:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    22b8:	ldr	r4, [pc, #92]	; (2318 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    22ba:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    22bc:	ldr	r0, [pc, #92]	; (231c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    22be:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    22c0:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    22c4:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    22c8:	ldr	r3, [r4, #0]
    22ca:	cmp	r3, r0
    22cc:	bls.n	22d4 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    22ce:	ldr	r0, [pc, #80]	; (2320 <HardFault_HandlerC+0x80>)
    22d0:	bl	2798 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    22d4:	ldr	r5, [pc, #56]	; (2310 <HardFault_HandlerC+0x70>)
    22d6:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    22d8:	movs	r0, #0
    22da:	ldr	r2, [pc, #72]	; (2324 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    22dc:	ldr	r1, [pc, #72]	; (2328 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    22de:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    22e2:	str	r0, [sp, #4]
    22e4:	ldr	r3, [sp, #4]
    22e6:	cmp	r3, r2
    22e8:	bhi.n	22f6 <HardFault_HandlerC+0x56>
    22ea:	ldr	r3, [sp, #4]
    22ec:	adds	r3, #1
    22ee:	str	r3, [sp, #4]
    22f0:	ldr	r3, [sp, #4]
    22f2:	cmp	r3, r2
    22f4:	bls.n	22ea <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    22f6:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    22fa:	str	r0, [sp, #4]
    22fc:	ldr	r3, [sp, #4]
    22fe:	cmp	r3, r1
    2300:	bhi.n	22de <HardFault_HandlerC+0x3e>
    2302:	ldr	r3, [sp, #4]
    2304:	adds	r3, #1
    2306:	str	r3, [sp, #4]
    2308:	ldr	r3, [sp, #4]
    230a:	cmp	r3, r1
    230c:	bls.n	2302 <HardFault_HandlerC+0x62>
    230e:	b.n	22de <HardFault_HandlerC+0x3e>
    2310:	.word	0x401bc000
    2314:	.word	0x401f8000
    2318:	.word	0x20000794
    231c:	.word	0x23c345ff
    2320:	.word	0x11e1a300
    2324:	.word	0x000f423f
    2328:	.word	0x0089543f

0000232c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    232c:	wfi
    232e:	b.n	232c <abort>

00002330 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    2330:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    2332:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    2334:	ubfx	r3, r3, #16, #15
    2338:	ldr	r1, [pc, #20]	; (2350 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    233a:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    233c:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    2340:	ldr	r4, [pc, #16]	; (2354 <rx_event+0x24>)
    2342:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    2344:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    2348:	strh.w	r5, [r4, r2, lsl #1]
}
    234c:	pop	{r4, r5}
    234e:	bx	lr
    2350:	.word	0x20001570
    2354:	.word	0x20001568

00002358 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2358:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    235a:	ldr	r3, [pc, #84]	; (23b0 <usb_serial_flush_callback+0x58>)
    235c:	ldrb	r3, [r3, #0]
    235e:	cbnz	r3, 2370 <usb_serial_flush_callback+0x18>
    2360:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    2364:	ldr	r3, [pc, #76]	; (23b4 <usb_serial_flush_callback+0x5c>)
    2366:	ldrb	r3, [r3, #0]
    2368:	cbz	r3, 2370 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    236a:	ldr	r5, [pc, #76]	; (23b8 <usb_serial_flush_callback+0x60>)
    236c:	ldrh	r2, [r5, #0]
    236e:	cbnz	r2, 2372 <usb_serial_flush_callback+0x1a>
    2370:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2372:	ldr	r7, [pc, #72]	; (23bc <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2374:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2376:	ldr	r6, [pc, #72]	; (23c0 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2378:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    237c:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    237e:	ldr	r0, [pc, #68]	; (23c4 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2380:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2384:	add.w	r1, r0, r1, lsl #8
    2388:	mov	r0, r6
    238a:	bl	31e0 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    238e:	mov	r1, r6
    2390:	movs	r0, #4
    2392:	bl	3210 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2396:	ldrb	r3, [r7, #0]
    2398:	adds	r3, #1
    239a:	uxtb	r3, r3
    239c:	cmp	r3, #6
    239e:	it	ls
    23a0:	strbls	r3, [r7, #0]
	tx_available = 0;
    23a2:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    23a6:	it	hi
    23a8:	strbhi	r4, [r7, #0]
	tx_available = 0;
    23aa:	strh	r3, [r5, #0]
    23ac:	pop	{r3, r4, r5, r6, r7, pc}
    23ae:	nop
    23b0:	.word	0x200014a4
    23b4:	.word	0x20001710
    23b8:	.word	0x200015e0
    23bc:	.word	0x200014a5
    23c0:	.word	0x20001600
    23c4:	.word	0x20000da4

000023c8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    23c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23cc:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    23ce:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    23d0:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    23d2:	cmp	r1, #0
    23d4:	beq.w	2500 <usb_serial_write.part.1+0x138>
    23d8:	movs	r3, #0
    23da:	ldr.w	r8, [pc, #320]	; 251c <usb_serial_write.part.1+0x154>
    23de:	ldr.w	r9, [pc, #304]	; 2510 <usb_serial_write.part.1+0x148>
    23e2:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    23e4:	ldr	r6, [pc, #284]	; (2504 <usb_serial_write.part.1+0x13c>)
    23e6:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    23ea:	ldr.w	sl, [pc, #308]	; 2520 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    23ee:	ldr	r2, [pc, #280]	; (2508 <usb_serial_write.part.1+0x140>)
    23f0:	ldrb	r4, [r2, #0]
    23f2:	ldr	r2, [pc, #280]	; (250c <usb_serial_write.part.1+0x144>)
    23f4:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    23f8:	cmp	r3, #0
    23fa:	bne.n	24b8 <usb_serial_write.part.1+0xf0>
    23fc:	mov	r5, r3
    23fe:	mov	r4, r3
    2400:	b.n	242c <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2402:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    2406:	cbnz	r4, 240a <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    2408:	ldr	r5, [r6, #0]
    240a:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    240c:	cmp	r3, #0
    240e:	bne.n	24ac <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    2410:	ldr	r3, [r6, #0]
    2412:	subs	r3, r3, r5
    2414:	cmp	r3, #120	; 0x78
    2416:	bhi.n	24f4 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    2418:	ldrb.w	r3, [sl]
    241c:	cmp	r3, #0
    241e:	beq.n	24ac <usb_serial_write.part.1+0xe4>
			yield();
    2420:	bl	3758 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2424:	ldrh.w	r3, [r8]
    2428:	cmp	r3, #0
    242a:	bne.n	24b4 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    242c:	mov	r0, r7
    242e:	bl	325c <usb_transfer_status>
			if (!(status & 0x80)) {
    2432:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    2436:	ldr	r2, [pc, #216]	; (2510 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    2438:	bne.n	2402 <usb_serial_write.part.1+0x3a>
    243a:	ldr	r2, [pc, #204]	; (2508 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    243c:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    2440:	strb.w	r0, [r9]
    2444:	ldrb	r4, [r2, #0]
    2446:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2448:	ldr	r1, [pc, #200]	; (2514 <usb_serial_write.part.1+0x14c>)
    244a:	lsls	r4, r4, #8
		if (size >= tx_available) {
    244c:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    244e:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2452:	add	r0, r4
    2454:	add	r0, r1
		if (size >= tx_available) {
    2456:	bcc.n	24ca <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    2458:	ldr	r1, [sp, #8]
    245a:	bl	214c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    245e:	ldr	r3, [pc, #180]	; (2514 <usb_serial_write.part.1+0x14c>)
    2460:	mov.w	r2, #256	; 0x100
    2464:	mov	r0, r7
    2466:	adds	r1, r3, r4
    2468:	movs	r3, #0
    246a:	bl	31e0 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    246e:	mov	r1, r7
    2470:	movs	r0, #4
    2472:	bl	3210 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    2476:	ldr	r3, [pc, #144]	; (2508 <usb_serial_write.part.1+0x140>)
    2478:	ldr	r2, [pc, #140]	; (2508 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    247a:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    247c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    247e:	ldr	r0, [pc, #152]	; (2518 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2480:	adds	r3, #1
    2482:	uxtb	r3, r3
    2484:	cmp	r3, #6
    2486:	it	hi
    2488:	movhi	r3, #0
    248a:	strb	r3, [r2, #0]
			size -= tx_available;
    248c:	ldrh.w	r2, [r8]
			sent += tx_available;
    2490:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2492:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    2496:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    249a:	add	r3, r2
    249c:	str	r3, [sp, #4]
			data += tx_available;
    249e:	ldr	r3, [sp, #8]
    24a0:	add	r3, r2
    24a2:	str	r3, [sp, #8]
    24a4:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    24a6:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    24aa:	bne.n	23ee <usb_serial_write.part.1+0x26>
    24ac:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    24ae:	add	sp, #20
    24b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b4:	ldr	r2, [pc, #80]	; (2508 <usb_serial_write.part.1+0x140>)
    24b6:	ldrb	r4, [r2, #0]
    24b8:	mov	r2, r3
    24ba:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    24be:	lsls	r4, r4, #8
    24c0:	ldr	r1, [pc, #80]	; (2514 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    24c2:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    24c4:	add	r0, r4
    24c6:	add	r0, r1
		if (size >= tx_available) {
    24c8:	bcs.n	2458 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    24ca:	ldr	r1, [sp, #8]
    24cc:	mov	r2, fp
    24ce:	str	r3, [sp, #12]
    24d0:	bl	214c <memcpy>
			tx_available -= size;
    24d4:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    24d6:	mov.w	r1, #3221225472	; 0xc0000000
    24da:	ldr	r2, [pc, #60]	; (2518 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    24dc:	rsb	r3, fp, r3
    24e0:	strh.w	r3, [r8]
    24e4:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    24e6:	str.w	r1, [r2, #132]	; 0x84
    24ea:	add	r3, fp
    24ec:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    24ee:	add	sp, #20
    24f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    24f4:	movs	r3, #1
				return sent;
    24f6:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    24f8:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    24fa:	add	sp, #20
    24fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2500:	mov	r0, r1
    2502:	b.n	24ae <usb_serial_write.part.1+0xe6>
    2504:	.word	0x20001718
    2508:	.word	0x200014a5
    250c:	.word	0x20001600
    2510:	.word	0x200016e0
    2514:	.word	0x20000da4
    2518:	.word	0x402e0000
    251c:	.word	0x200015e0
    2520:	.word	0x20001710

00002524 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    2524:	bx	lr
    2526:	nop

00002528 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2528:	movs	r1, #0
    252a:	movs	r2, #224	; 0xe0
    252c:	ldr	r0, [pc, #128]	; (25b0 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    252e:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    2530:	mov	r4, r1
    2532:	ldr	r6, [pc, #128]	; (25b4 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2534:	ldr	r5, [pc, #128]	; (25b8 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2536:	bl	52bc <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    253a:	ldr	r7, [pc, #128]	; (25bc <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    253c:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    253e:	ldr	r3, [pc, #128]	; (25c0 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2540:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    2542:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2544:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2546:	ldr	r6, [pc, #124]	; (25c4 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    2548:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    254a:	bl	52bc <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    254e:	mov	r3, r4
    2550:	mov	r2, r4
    2552:	movs	r1, #16
    2554:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2556:	str	r4, [r7, #0]
    2558:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    255a:	str	r4, [r6, #0]
    255c:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    255e:	bl	3178 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    2562:	mov	r2, r4
    2564:	ldr	r3, [pc, #96]	; (25c8 <usb_serial_configure+0xa0>)
    2566:	movs	r1, #64	; 0x40
    2568:	movs	r0, #3
    256a:	bl	3114 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    256e:	mov	r3, r4
    2570:	mov	r2, r4
    2572:	movs	r1, #64	; 0x40
    2574:	movs	r0, #4
    2576:	bl	3178 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    257a:	mov	r3, r4
    257c:	movs	r2, #64	; 0x40
    257e:	mov	r0, r5
    2580:	ldr	r1, [pc, #72]	; (25cc <usb_serial_configure+0xa4>)
    2582:	bl	31e0 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    2586:	mov	r1, r5
    2588:	movs	r0, #3
    258a:	bl	3238 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    258e:	ldr	r3, [pc, #64]	; (25d0 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    2590:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2592:	ldr	r1, [pc, #64]	; (25d4 <usb_serial_configure+0xac>)
    2594:	ldr	r0, [pc, #64]	; (25d8 <usb_serial_configure+0xb0>)
    2596:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    2598:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    259c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    25a0:	ldr.w	r2, [r3, #328]	; 0x148
    25a4:	orr.w	r2, r2, #16777216	; 0x1000000
    25a8:	str.w	r2, [r3, #328]	; 0x148
    25ac:	pop	{r3, r4, r5, r6, r7, pc}
    25ae:	nop
    25b0:	.word	0x20001600
    25b4:	.word	0x200014a5
    25b8:	.word	0x20001580
    25bc:	.word	0x20001570
    25c0:	.word	0x200015e0
    25c4:	.word	0x20001568
    25c8:	.word	0x00002331
    25cc:	.word	0x200014a8
    25d0:	.word	0x402e0000
    25d4:	.word	0x200016e4
    25d8:	.word	0x00002359

000025dc <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    25dc:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    25de:	ldr	r5, [pc, #56]	; (2618 <usb_serial_getchar+0x3c>)
    25e0:	ldr	r3, [pc, #56]	; (261c <usb_serial_getchar+0x40>)
    25e2:	ldrh	r2, [r5, #0]
    25e4:	ldrh	r0, [r3, #0]
    25e6:	cmp	r2, r0
    25e8:	bcs.n	2612 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    25ea:	adds	r3, r2, #1
    25ec:	ldr	r1, [pc, #48]	; (2620 <usb_serial_getchar+0x44>)
    25ee:	uxth	r3, r3
    25f0:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    25f2:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    25f4:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    25f6:	bls.n	25fc <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    25f8:	mov	r0, r4
	}
	return -1;
}
    25fa:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    25fc:	movs	r3, #0
    25fe:	movs	r2, #64	; 0x40
    2600:	ldr	r0, [pc, #32]	; (2624 <usb_serial_getchar+0x48>)
    2602:	bl	31e0 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    2606:	ldr	r1, [pc, #28]	; (2624 <usb_serial_getchar+0x48>)
    2608:	movs	r0, #3
    260a:	bl	3238 <usb_receive>
		}
		return c;
    260e:	mov	r0, r4
    2610:	pop	{r3, r4, r5, pc}
	}
	return -1;
    2612:	mov.w	r0, #4294967295
    2616:	pop	{r3, r4, r5, pc}
    2618:	.word	0x20001568
    261c:	.word	0x20001570
    2620:	.word	0x200014a8
    2624:	.word	0x20001580

00002628 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    2628:	ldr	r3, [pc, #20]	; (2640 <usb_serial_peekchar+0x18>)
    262a:	ldr	r2, [pc, #24]	; (2644 <usb_serial_peekchar+0x1c>)
    262c:	ldrh	r3, [r3, #0]
    262e:	ldrh	r2, [r2, #0]
    2630:	cmp	r2, r3
    2632:	bls.n	263a <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    2634:	ldr	r2, [pc, #16]	; (2648 <usb_serial_peekchar+0x20>)
    2636:	ldrb	r0, [r2, r3]
    2638:	bx	lr
	}

	return -1;
    263a:	mov.w	r0, #4294967295
}
    263e:	bx	lr
    2640:	.word	0x20001568
    2644:	.word	0x20001570
    2648:	.word	0x200014a8

0000264c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    264c:	ldr	r2, [pc, #8]	; (2658 <usb_serial_available+0xc>)
    264e:	ldr	r3, [pc, #12]	; (265c <usb_serial_available+0x10>)
    2650:	ldrh	r0, [r2, #0]
    2652:	ldrh	r3, [r3, #0]
}
    2654:	subs	r0, r0, r3
    2656:	bx	lr
    2658:	.word	0x20001570
    265c:	.word	0x20001568

00002660 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2660:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    2662:	ldr	r3, [pc, #40]	; (268c <usb_serial_flush_input+0x2c>)
    2664:	ldr	r4, [pc, #40]	; (2690 <usb_serial_flush_input+0x30>)
    2666:	ldrh	r5, [r3, #0]
    2668:	ldrh	r3, [r4, #0]
    266a:	cmp	r3, r5
    266c:	bcc.n	2670 <usb_serial_flush_input+0x10>
    266e:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    2670:	movs	r3, #0
    2672:	ldr	r1, [pc, #32]	; (2694 <usb_serial_flush_input+0x34>)
    2674:	ldr	r0, [pc, #32]	; (2698 <usb_serial_flush_input+0x38>)
    2676:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    2678:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    267a:	bl	31e0 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    267e:	ldr	r1, [pc, #24]	; (2698 <usb_serial_flush_input+0x38>)
    2680:	movs	r0, #3
	}
}
    2682:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    2686:	b.w	3238 <usb_receive>
    268a:	nop
    268c:	.word	0x20001570
    2690:	.word	0x20001568
    2694:	.word	0x200014a8
    2698:	.word	0x20001580

0000269c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    269c:	ldr	r3, [pc, #36]	; (26c4 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    269e:	push	{lr}
    26a0:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    26a2:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    26a4:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    26a8:	cbnz	r3, 26b4 <usb_serial_putchar+0x18>
    26aa:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    26ae:	add	sp, #12
    26b0:	ldr.w	pc, [sp], #4
    26b4:	movs	r1, #1
    26b6:	add.w	r0, sp, #7
    26ba:	bl	23c8 <usb_serial_write.part.1>
    26be:	add	sp, #12
    26c0:	ldr.w	pc, [sp], #4
    26c4:	.word	0x20001710

000026c8 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    26c8:	ldr	r3, [pc, #16]	; (26dc <usb_serial_write+0x14>)
    26ca:	ldrb	r3, [r3, #0]
    26cc:	and.w	r2, r3, #255	; 0xff
    26d0:	cbz	r3, 26d6 <usb_serial_write+0xe>
    26d2:	b.w	23c8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    26d6:	mov	r0, r2
    26d8:	bx	lr
    26da:	nop
    26dc:	.word	0x20001710

000026e0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    26e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    26e4:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    26e6:	ldr.w	r8, [pc, #64]	; 2728 <usb_serial_write_buffer_free+0x48>
    26ea:	movs	r3, #1
    26ec:	ldr	r5, [pc, #48]	; (2720 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    26ee:	mov	r7, r4
    26f0:	ldr	r6, [pc, #48]	; (2724 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    26f2:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    26f6:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    26f8:	mov	r0, r5
    26fa:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    26fc:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    26fe:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2702:	beq.n	2710 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2704:	bl	325c <usb_transfer_status>
    2708:	lsls	r3, r0, #24
    270a:	it	pl
    270c:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2710:	cmp	r4, #7
    2712:	bne.n	26f6 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2714:	movs	r3, #0
	return sum;
}
    2716:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2718:	strb.w	r3, [r8]
	return sum;
}
    271c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2720:	.word	0x20001600
    2724:	.word	0x200014a5
    2728:	.word	0x200014a4

0000272c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    272c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    272e:	ldr	r3, [pc, #80]	; (2780 <usb_serial_flush_output+0x54>)
    2730:	ldrb	r3, [r3, #0]
    2732:	cbz	r3, 273a <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    2734:	ldr	r4, [pc, #76]	; (2784 <usb_serial_flush_output+0x58>)
    2736:	ldrh	r2, [r4, #0]
    2738:	cbnz	r2, 273c <usb_serial_flush_output+0x10>
    273a:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    273c:	ldr	r6, [pc, #72]	; (2788 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    273e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2742:	ldr	r5, [pc, #72]	; (278c <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2744:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2746:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2748:	rsb	r2, r2, #256	; 0x100
    274c:	ldr	r0, [pc, #64]	; (2790 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    274e:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2752:	ldr	r7, [pc, #64]	; (2794 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    2754:	add.w	r1, r0, r1, lsl #8
    2758:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    275a:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    275e:	bl	31e0 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2762:	mov	r1, r5
    2764:	movs	r0, #4
    2766:	bl	3210 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    276a:	ldrb	r3, [r6, #0]
    276c:	adds	r3, #1
    276e:	uxtb	r3, r3
    2770:	cmp	r3, #6
    2772:	it	hi
    2774:	movhi	r3, #0
    2776:	strb	r3, [r6, #0]
	tx_available = 0;
    2778:	movs	r3, #0
    277a:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    277c:	strb	r3, [r7, #0]
    277e:	pop	{r3, r4, r5, r6, r7, pc}
    2780:	.word	0x20001710
    2784:	.word	0x200015e0
    2788:	.word	0x200014a5
    278c:	.word	0x20001600
    2790:	.word	0x20000da4
    2794:	.word	0x200014a4

00002798 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2798:	ldr	r2, [pc, #560]	; (29cc <set_arm_clock+0x234>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    279a:	ldr	r3, [pc, #564]	; (29d0 <set_arm_clock+0x238>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    279c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    279e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    27a2:	ldr	r5, [pc, #560]	; (29d4 <set_arm_clock+0x23c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    27a4:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    27a6:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    27a8:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    27aa:	bls.n	27e8 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    27ac:	ldr	r3, [pc, #552]	; (29d8 <set_arm_clock+0x240>)
    27ae:	cmp	r0, r3
    27b0:	bls.w	29b6 <set_arm_clock+0x21e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    27b4:	ldr	r3, [pc, #548]	; (29dc <set_arm_clock+0x244>)
    27b6:	movw	r6, #1575	; 0x627
    27ba:	ldr.w	lr, [pc, #608]	; 2a1c <set_arm_clock+0x284>
    27be:	add	r3, r0
    27c0:	ldr	r5, [pc, #540]	; (29e0 <set_arm_clock+0x248>)
    27c2:	lsrs	r2, r3, #8
    27c4:	umull	r3, r2, lr, r2
    27c8:	lsrs	r3, r2, #7
    27ca:	add.w	r3, r3, r3, lsl #2
    27ce:	add.w	r2, r3, r3, lsl #2
    27d2:	addw	r3, r2, #1250	; 0x4e2
    27d6:	cmp	r3, r6
    27d8:	it	cs
    27da:	movcs	r3, r6
    27dc:	sub.w	r3, r3, #800	; 0x320
    27e0:	umull	r3, r6, r5, r3
    27e4:	lsrs	r6, r6, #3
    27e6:	b.n	27f2 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    27e8:	ldr	r6, [pc, #504]	; (29e4 <set_arm_clock+0x24c>)
    27ea:	cmp	r0, r6
    27ec:	ite	ls
    27ee:	movls	r6, #6
    27f0:	movhi	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27f2:	ldr	r2, [pc, #476]	; (29d0 <set_arm_clock+0x238>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27f4:	and.w	lr, r7, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27f8:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27fc:	cmp	lr, r6
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27fe:	orr.w	r3, r3, #192	; 0xc0
    2802:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2806:	bcs.n	281e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2808:	ldr	r3, [pc, #456]	; (29d4 <set_arm_clock+0x23c>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    280a:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    280e:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2810:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    2812:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2814:	ldr	r3, [r2, #0]
    2816:	cmp	r3, #0
    2818:	bge.n	2814 <set_arm_clock+0x7c>
    281a:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    281e:	ands.w	r3, r4, #33554432	; 0x2000000
    2822:	bne.n	2882 <set_arm_clock+0xea>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2824:	ldr	r5, [pc, #448]	; (29e8 <set_arm_clock+0x250>)
    2826:	ldr	r2, [pc, #452]	; (29ec <set_arm_clock+0x254>)
    2828:	ldr.w	ip, [r5, #16]
    282c:	mov	r5, r2
    282e:	and.w	r2, ip, r2
    2832:	cmp	r2, r5
    2834:	itet	eq
    2836:	moveq.w	r3, #402653184	; 0x18000000
    283a:	movne.w	r2, #4096	; 0x1000
    283e:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2840:	eor.w	r5, r4, r3
    2844:	tst.w	r5, #939524096	; 0x38000000
    2848:	beq.n	2858 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    284a:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    284e:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    2852:	ldr	r5, [pc, #380]	; (29d0 <set_arm_clock+0x238>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2854:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    2856:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2858:	eor.w	r3, r1, r2
    285c:	tst.w	r3, #12288	; 0x3000
    2860:	beq.n	2874 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2862:	ldr	r3, [pc, #364]	; (29d0 <set_arm_clock+0x238>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2864:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2868:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    286a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    286c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    286e:	ldr	r3, [r2, #72]	; 0x48
    2870:	lsls	r5, r3, #28
    2872:	bmi.n	286e <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2874:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2878:	ldr	r2, [pc, #340]	; (29d0 <set_arm_clock+0x238>)
    287a:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    287c:	ldr	r3, [r2, #72]	; 0x48
    287e:	lsls	r1, r3, #26
    2880:	bmi.n	287c <set_arm_clock+0xe4>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2882:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2884:	ldr	r5, [pc, #360]	; (29f0 <set_arm_clock+0x258>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2886:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2888:	mul.w	r3, r1, r2
    288c:	mul.w	r3, r0, r3
    2890:	cmp	r3, r5
    2892:	bhi.n	28a8 <set_arm_clock+0x110>
		if (div_arm < 8) {
    2894:	cmp	r2, #7
    2896:	bhi.w	29a2 <set_arm_clock+0x20a>
			div_arm = div_arm + 1;
    289a:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    289c:	mul.w	r3, r1, r2
    28a0:	mul.w	r3, r0, r3
    28a4:	cmp	r3, r5
    28a6:	bls.n	2894 <set_arm_clock+0xfc>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    28a8:	ldr	r0, [pc, #328]	; (29f4 <set_arm_clock+0x25c>)
    28aa:	ldr	r5, [pc, #332]	; (29f8 <set_arm_clock+0x260>)
    28ac:	add	r0, r3
    28ae:	umull	r3, r0, r5, r0
    28b2:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    28b4:	cmp	r3, #108	; 0x6c
    28b6:	bhi.n	29ac <set_arm_clock+0x214>
	if (mult < 54) mult = 54;
    28b8:	cmp	r3, #53	; 0x35
    28ba:	bhi.n	29ba <set_arm_clock+0x222>
    28bc:	ldr.w	r8, [pc, #352]	; 2a20 <set_arm_clock+0x288>
    28c0:	movs	r3, #54	; 0x36
    28c2:	ldr	r0, [pc, #312]	; (29fc <set_arm_clock+0x264>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    28c4:	ldr.w	ip, [pc, #288]	; 29e8 <set_arm_clock+0x250>
    28c8:	ldr	r5, [pc, #308]	; (2a00 <set_arm_clock+0x268>)
    28ca:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    28ce:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    28d2:	and.w	r5, r9, r5
    28d6:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    28d8:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    28dc:	beq.n	28f6 <set_arm_clock+0x15e>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    28de:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    28e2:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    28e6:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    28e8:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    28ec:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    28f0:	ldr	r3, [r5, #0]
    28f2:	cmp	r3, #0
    28f4:	bge.n	28f0 <set_arm_clock+0x158>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    28f6:	ldr.w	ip, [pc, #216]	; 29d0 <set_arm_clock+0x238>
    28fa:	subs	r2, #1
    28fc:	ldr.w	r3, [ip, #16]
    2900:	and.w	r3, r3, #7
    2904:	cmp	r3, r2
    2906:	beq.n	2918 <set_arm_clock+0x180>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2908:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    290c:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    290e:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2912:	ldr	r3, [r5, #72]	; 0x48
    2914:	lsls	r3, r3, #15
    2916:	bmi.n	2912 <set_arm_clock+0x17a>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2918:	subs	r1, #1
    291a:	lsls	r1, r1, #10
    291c:	eor.w	r3, r4, r1
    2920:	tst.w	r3, #7168	; 0x1c00
    2924:	beq.n	293c <set_arm_clock+0x1a4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2926:	ldr	r3, [pc, #168]	; (29d0 <set_arm_clock+0x238>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2928:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    292c:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2930:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2932:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    2934:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2936:	ldr	r3, [r2, #72]	; 0x48
    2938:	lsls	r1, r3, #30
    293a:	bmi.n	2936 <set_arm_clock+0x19e>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    293c:	ldr	r3, [pc, #196]	; (2a04 <set_arm_clock+0x26c>)
    293e:	ldr	r1, [pc, #200]	; (2a08 <set_arm_clock+0x270>)
    2940:	add	r3, r0
    2942:	lsrs	r3, r3, #7
    2944:	umull	r3, r1, r1, r3
    2948:	lsrs	r1, r1, #12
    294a:	cmp	r1, #4
    294c:	it	cs
    294e:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2950:	subs	r3, r1, #1
    2952:	lsls	r3, r3, #8
    2954:	eor.w	r2, r4, r3
    2958:	tst.w	r2, #768	; 0x300
    295c:	beq.n	296c <set_arm_clock+0x1d4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    295e:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2962:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2966:	ldr	r2, [pc, #104]	; (29d0 <set_arm_clock+0x238>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2968:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    296a:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    296c:	ldr	r3, [pc, #96]	; (29d0 <set_arm_clock+0x238>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    296e:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2972:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    2974:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2976:	ldr	r3, [r2, #72]	; 0x48
    2978:	lsls	r3, r3, #26
    297a:	bmi.n	2976 <set_arm_clock+0x1de>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    297c:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2980:	ldr	r2, [pc, #136]	; (2a0c <set_arm_clock+0x274>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2982:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2984:	ldr	r3, [pc, #136]	; (2a10 <set_arm_clock+0x278>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2986:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2988:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    298a:	bcs.n	299e <set_arm_clock+0x206>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    298c:	ldr	r3, [pc, #68]	; (29d4 <set_arm_clock+0x23c>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    298e:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2992:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2994:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    2996:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2998:	ldr	r3, [r2, #0]
    299a:	cmp	r3, #0
    299c:	bge.n	2998 <set_arm_clock+0x200>
	}

	return frequency;
}
    299e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    29a2:	cmp	r1, #4
    29a4:	bhi.n	28a8 <set_arm_clock+0x110>
				div_ahb = div_ahb + 1;
    29a6:	adds	r1, #1
				div_arm = 1;
    29a8:	movs	r2, #1
    29aa:	b.n	2888 <set_arm_clock+0xf0>
    29ac:	ldr.w	r8, [pc, #116]	; 2a24 <set_arm_clock+0x28c>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    29b0:	movs	r3, #108	; 0x6c
    29b2:	ldr	r0, [pc, #96]	; (2a14 <set_arm_clock+0x27c>)
    29b4:	b.n	28c4 <set_arm_clock+0x12c>
    29b6:	movs	r6, #18
    29b8:	b.n	27f2 <set_arm_clock+0x5a>
    29ba:	ldr	r0, [pc, #92]	; (2a18 <set_arm_clock+0x280>)
    29bc:	ldr.w	r8, [pc, #104]	; 2a28 <set_arm_clock+0x290>
    29c0:	mul.w	r0, r0, r3
    29c4:	orr.w	r8, r3, r8
    29c8:	b.n	28c4 <set_arm_clock+0x12c>
    29ca:	nop
    29cc:	.word	0x1f78a400
    29d0:	.word	0x400fc000
    29d4:	.word	0x40080000
    29d8:	.word	0x23c34600
    29dc:	.word	0xdc3cba00
    29e0:	.word	0x51eb851f
    29e4:	.word	0x016e3600
    29e8:	.word	0x400d8000
    29ec:	.word	0x80003040
    29f0:	.word	0x269fb1ff
    29f4:	.word	0x005b8d80
    29f8:	.word	0x165e9f81
    29fc:	.word	0x269fb200
    2a00:	.word	0x8001307f
    2a04:	.word	0x08f0d17f
    2a08:	.word	0x00e5109f
    2a0c:	.word	0x20000794
    2a10:	.word	0x20000790
    2a14:	.word	0x4d3f6400
    2a18:	.word	0x00b71b00
    2a1c:	.word	0x004cb223
    2a20:	.word	0x80002036
    2a24:	.word	0x8000206c
    2a28:	.word	0x80002000

00002a2c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2a2c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    2a2e:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2a30:	cbz	r3, 2a3a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2a32:	ldr	r3, [r2, #4]
    2a34:	orr.w	r3, r3, #32768	; 0x8000
    2a38:	str	r3, [r2, #4]
	}
	__disable_irq();
    2a3a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2a3c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2a3e:	cbz	r4, 2a68 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2a40:	ldr	r3, [pc, #64]	; (2a84 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2a42:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2a44:	ldr.w	r4, [r3, #432]	; 0x1b0
    2a48:	tst	r4, r1
    2a4a:	bne.n	2a7c <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2a4c:	ldr.w	r4, [r3, #320]	; 0x140
    2a50:	orr.w	r4, r4, #16384	; 0x4000
    2a54:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2a58:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    2a5c:	ldr.w	r4, [r3, #320]	; 0x140
    2a60:	lsls	r4, r4, #17
    2a62:	bpl.n	2a4c <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2a64:	tst	r1, r5
    2a66:	bne.n	2a7c <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2a68:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    2a6a:	ldr	r4, [pc, #24]	; (2a84 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2a6c:	str	r2, [r0, #8]
	endpoint->status = 0;
    2a6e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2a70:	ldr.w	r3, [r4, #432]	; 0x1b0
    2a74:	orrs	r1, r3
    2a76:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2a7a:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2a7c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2a7e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2a80:	pop	{r4, r5}
    2a82:	bx	lr
    2a84:	.word	0x402e0000

00002a88 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2a88:	push	{r3, r4, r5, lr}
    2a8a:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    2a8c:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    2a8e:	b.n	2a9e <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    2a90:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    2a92:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    2a94:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    2a96:	ldr	r2, [r5, #52]	; 0x34
    2a98:	mov	r3, r4
    2a9a:	cmp	r4, r2
    2a9c:	beq.n	2ab0 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    2a9e:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    2aa0:	cbz	r3, 2ab0 <run_callbacks+0x28>
    2aa2:	cmp	r3, #1
    2aa4:	beq.n	2ab0 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    2aa6:	ldr	r2, [r3, #4]
    2aa8:	lsls	r2, r2, #24
    2aaa:	bpl.n	2a90 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    2aac:	str	r3, [r5, #48]	; 0x30
			return;
    2aae:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    2ab0:	movs	r3, #0
    2ab2:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    2ab4:	str	r3, [r5, #52]	; 0x34
    2ab6:	pop	{r3, r4, r5, pc}

00002ab8 <endpoint0_transmit.constprop.0>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2ab8:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2aba:	cbnz	r1, 2afa <endpoint0_transmit.constprop.0+0x42>
    2abc:	ldr	r4, [pc, #136]	; (2b48 <endpoint0_transmit.constprop.0+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2abe:	ldr	r1, [pc, #140]	; (2b4c <endpoint0_transmit.constprop.0+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ac0:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ac2:	ldr	r3, [pc, #140]	; (2b50 <endpoint0_transmit.constprop.0+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ac4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ac6:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2ac8:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2aca:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2acc:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ace:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2ad0:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ad2:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ad6:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ad8:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2adc:	ldr	r5, [pc, #116]	; (2b54 <endpoint0_transmit.constprop.0+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ade:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2ae2:	ldr.w	r1, [r3, #432]	; 0x1b0
    2ae6:	orr.w	r1, r1, #1
    2aea:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2aee:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2af0:	ldr.w	r3, [r2, #432]	; 0x1b0
    2af4:	cmp	r3, #0
    2af6:	bne.n	2af0 <endpoint0_transmit.constprop.0+0x38>
}
    2af8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2afa:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2afc:	ldr	r3, [pc, #88]	; (2b58 <endpoint0_transmit.constprop.0+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2afe:	ldr	r5, [pc, #80]	; (2b50 <endpoint0_transmit.constprop.0+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2b00:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2b02:	ldr	r4, [pc, #68]	; (2b48 <endpoint0_transmit.constprop.0+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2b04:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2b08:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2b0a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2b0c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2b0e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2b12:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2b14:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2b18:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2b1a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2b1e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2b22:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    2b26:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2b28:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2b2a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2b2e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2b32:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2b36:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2b38:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2b3a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2b3e:	ldr.w	r3, [r2, #432]	; 0x1b0
    2b42:	cmp	r3, #0
    2b44:	bne.n	2b3e <endpoint0_transmit.constprop.0+0x86>
    2b46:	b.n	2abe <endpoint0_transmit.constprop.0+0x6>
    2b48:	.word	0x20003000
    2b4c:	.word	0x20002020
    2b50:	.word	0x402e0000
    2b54:	.word	0x200016f0
    2b58:	.word	0x20002000

00002b5c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    2b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2b60:	ldr	r4, [pc, #748]	; (2e50 <isr+0x2f4>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    2b62:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2b64:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2b68:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2b6c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2b70:	beq.n	2c30 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2b72:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b76:	cmp	r3, #0
    2b78:	beq.n	2c26 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2b7a:	mov.w	r9, #65537	; 0x10001
    2b7e:	ldr.w	fp, [pc, #752]	; 2e70 <isr+0x314>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2b82:	mov	r6, r4
    2b84:	ldr	r7, [pc, #716]	; (2e54 <isr+0x2f8>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2b86:	mov	sl, r9
    2b88:	ldr	r1, [r7, #40]	; 0x28
    2b8a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2b8c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2b90:	ldr.w	r3, [r4, #320]	; 0x140
    2b94:	orr.w	r3, r3, #8192	; 0x2000
    2b98:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2b9c:	ldr.w	r3, [r4, #320]	; 0x140
    2ba0:	lsls	r5, r3, #18
    2ba2:	bpl.n	2b90 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2ba4:	ldr.w	r3, [r6, #320]	; 0x140
    2ba8:	bic.w	r3, r3, #8192	; 0x2000
    2bac:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2bb0:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2bb4:	ldr.w	r3, [r4, #436]	; 0x1b4
    2bb8:	ands.w	r3, r3, #65537	; 0x10001
    2bbc:	bne.n	2bb4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2bbe:	uxth	r0, r1
    2bc0:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2bc4:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2bc8:	cmp	r0, r5
    2bca:	bhi.w	2cfa <isr+0x19e>
    2bce:	cmp.w	r0, #1664	; 0x680
    2bd2:	bcs.w	2f86 <isr+0x42a>
    2bd6:	cmp.w	r0, #258	; 0x102
    2bda:	beq.w	2e8c <isr+0x330>
    2bde:	bhi.w	2d8c <isr+0x230>
    2be2:	cmp	r0, #128	; 0x80
    2be4:	beq.w	2e34 <isr+0x2d8>
    2be8:	cmp	r0, #130	; 0x82
    2bea:	bne.w	2d7c <isr+0x220>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2bee:	uxth	r2, r2
    2bf0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2bf4:	cmp	r1, #7
    2bf6:	bhi.w	2d7c <isr+0x220>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2bfa:	lsls	r1, r1, #2
    2bfc:	ldr	r0, [pc, #600]	; (2e58 <isr+0x2fc>)
		reply_buffer[0] = 0;
    2bfe:	ldr	r5, [pc, #604]	; (2e5c <isr+0x300>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2c00:	add	r0, r1
    2c02:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c04:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    2c06:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    2c08:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c0a:	bpl.w	2fd8 <isr+0x47c>
    2c0e:	lsls	r1, r1, #15
    2c10:	bpl.n	2c16 <isr+0xba>
			reply_buffer[0] = 1;
    2c12:	movs	r3, #1
    2c14:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    2c16:	movs	r1, #2
    2c18:	ldr	r0, [pc, #576]	; (2e5c <isr+0x300>)
    2c1a:	bl	2ab8 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2c1e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2c22:	cmp	r3, #0
    2c24:	bne.n	2b88 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2c26:	ldr	r2, [pc, #552]	; (2e50 <isr+0x2f4>)
    2c28:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2c2c:	cmp	r3, #0
    2c2e:	bne.n	2cba <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2c30:	tst.w	r8, #64	; 0x40
    2c34:	beq.n	2c68 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2c36:	ldr	r3, [pc, #536]	; (2e50 <isr+0x2f4>)
    2c38:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2c3c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2c3e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2c42:	ldr.w	r1, [r3, #444]	; 0x1bc
    2c46:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2c4a:	ldr.w	r4, [r2, #432]	; 0x1b0
    2c4e:	ldr	r3, [pc, #512]	; (2e50 <isr+0x2f4>)
    2c50:	cmp	r4, #0
    2c52:	bne.n	2c4a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2c54:	mov.w	r2, #4294967295
    2c58:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2c5c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2c60:	bl	2524 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2c64:	ldr	r3, [pc, #504]	; (2e60 <isr+0x304>)
    2c66:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2c68:	tst.w	r8, #16777216	; 0x1000000
    2c6c:	beq.n	2c76 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2c6e:	ldr	r3, [pc, #500]	; (2e64 <isr+0x308>)
    2c70:	ldr	r3, [r3, #0]
    2c72:	cbz	r3, 2c76 <isr+0x11a>
    2c74:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2c76:	tst.w	r8, #33554432	; 0x2000000
    2c7a:	beq.n	2c84 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2c7c:	ldr	r3, [pc, #488]	; (2e68 <isr+0x30c>)
    2c7e:	ldr	r3, [r3, #0]
    2c80:	cbz	r3, 2c84 <isr+0x128>
    2c82:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2c84:	tst.w	r8, #4
    2c88:	beq.n	2c90 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2c8a:	ldr	r3, [pc, #452]	; (2e50 <isr+0x2f4>)
    2c8c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2c90:	ldr	r3, [pc, #444]	; (2e50 <isr+0x2f4>)
    2c92:	ldr.w	r2, [r3, #328]	; 0x148
    2c96:	lsls	r2, r2, #24
    2c98:	bpl.n	2cb4 <isr+0x158>
    2c9a:	tst.w	r8, #128	; 0x80
    2c9e:	beq.n	2cb4 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2ca0:	ldr	r1, [pc, #456]	; (2e6c <isr+0x310>)
    2ca2:	ldrb	r2, [r1, #0]
    2ca4:	cmp	r2, #0
    2ca6:	beq.w	2fc6 <isr+0x46a>
			if (--usb_reboot_timer == 0) {
    2caa:	subs	r3, r2, #1
    2cac:	uxtb	r3, r3
    2cae:	strb	r3, [r1, #0]
    2cb0:	cbnz	r3, 2cb4 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    2cb2:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    2cb4:	add	sp, #12
    2cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2cba:	ldr	r1, [pc, #436]	; (2e70 <isr+0x314>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2cbc:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2cc0:	ldr	r0, [r1, #0]
    2cc2:	tst	r3, r0
    2cc4:	bne.w	3060 <isr+0x504>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2cc8:	ldr	r2, [pc, #404]	; (2e60 <isr+0x304>)
    2cca:	ldr	r4, [r2, #0]
			if (completestatus) {
    2ccc:	ands	r4, r3
    2cce:	beq.n	2c30 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2cd0:	lsls	r3, r4, #29
    2cd2:	bmi.w	309a <isr+0x53e>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2cd6:	lsls	r7, r4, #13
    2cd8:	bmi.w	30ba <isr+0x55e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2cdc:	lsls	r6, r4, #28
    2cde:	bmi.w	30b2 <isr+0x556>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2ce2:	lsls	r5, r4, #12
    2ce4:	bmi.w	30aa <isr+0x54e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2ce8:	lsls	r0, r4, #27
    2cea:	bmi.w	30a2 <isr+0x546>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2cee:	lsls	r1, r4, #11
    2cf0:	bpl.n	2c30 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    2cf2:	ldr	r0, [pc, #384]	; (2e74 <isr+0x318>)
    2cf4:	bl	2a88 <run_callbacks>
    2cf8:	b.n	2c30 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2cfa:	movw	r5, #8225	; 0x2021
    2cfe:	cmp	r0, r5
    2d00:	beq.n	2d74 <isr+0x218>
    2d02:	bhi.n	2de4 <isr+0x288>
    2d04:	cmp.w	r0, #2176	; 0x880
    2d08:	beq.w	2f6a <isr+0x40e>
    2d0c:	cmp.w	r0, #2304	; 0x900
    2d10:	bne.n	2d7c <isr+0x220>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2d12:	ubfx	r1, r1, #16, #8
    2d16:	ldr	r2, [pc, #352]	; (2e78 <isr+0x31c>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2d18:	ldr	r0, [pc, #352]	; (2e7c <isr+0x320>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2d1a:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2d1c:	ldr	r1, [pc, #352]	; (2e80 <isr+0x324>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2d1e:	ldr	r2, [pc, #356]	; (2e84 <isr+0x328>)
    2d20:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2d22:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2d26:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2d2a:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2d2e:	bl	2528 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d32:	ldr	r2, [pc, #340]	; (2e88 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2d34:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d36:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d38:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2d3a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d3c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d3e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d40:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2d44:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d46:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2d4a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d4c:	str.w	r1, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2d50:	ldr.w	r2, [r6, #432]	; 0x1b0
    2d54:	orr.w	r2, r2, #65536	; 0x10000
    2d58:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2d5c:	ldr	r2, [pc, #272]	; (2e70 <isr+0x314>)
    2d5e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    2d60:	ldr.w	r3, [r4, #432]	; 0x1b0
    2d64:	cmp	r3, #0
    2d66:	bne.n	2d60 <isr+0x204>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2d68:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2d6c:	cmp	r3, #0
    2d6e:	bne.w	2b88 <isr+0x2c>
    2d72:	b.n	2c26 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    2d74:	lsrs	r0, r2, #16
    2d76:	cmp	r0, #7
    2d78:	beq.w	2fe0 <isr+0x484>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2d7c:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2d80:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2d84:	cmp	r3, #0
    2d86:	bne.w	2b88 <isr+0x2c>
    2d8a:	b.n	2c26 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2d8c:	movw	r5, #770	; 0x302
    2d90:	cmp	r0, r5
    2d92:	beq.w	2f04 <isr+0x3a8>
    2d96:	cmp.w	r0, #1280	; 0x500
    2d9a:	bne.n	2d7c <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d9c:	ldr	r2, [pc, #232]	; (2e88 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d9e:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2da0:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2da2:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2da4:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2da6:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2da8:	ldr.w	r0, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2dac:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2dae:	orr.w	r3, r0, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2db2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2db4:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2db8:	ldr.w	r3, [r6, #432]	; 0x1b0
    2dbc:	orr.w	r3, r3, #65536	; 0x10000
    2dc0:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2dc4:	ldr.w	r3, [r4, #432]	; 0x1b0
    2dc8:	cmp	r3, #0
    2dca:	bne.n	2dc4 <isr+0x268>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2dcc:	lsrs	r3, r1, #16
    2dce:	lsls	r3, r3, #25
    2dd0:	orr.w	r3, r3, #16777216	; 0x1000000
    2dd4:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2dd8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ddc:	cmp	r3, #0
    2dde:	bne.w	2b88 <isr+0x2c>
    2de2:	b.n	2c26 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2de4:	movw	r3, #8737	; 0x2221
    2de8:	cmp	r0, r3
    2dea:	beq.w	2ef2 <isr+0x396>
    2dee:	movw	r3, #8993	; 0x2321
    2df2:	cmp	r0, r3
    2df4:	bne.n	2d7c <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2df6:	ldr	r3, [pc, #144]	; (2e88 <isr+0x32c>)
    2df8:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2dfa:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2dfc:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2dfe:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2e00:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2e02:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2e06:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2e08:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2e0c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2e0e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2e10:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2e14:	ldr.w	r3, [r4, #432]	; 0x1b0
    2e18:	orr.w	r3, r3, #65536	; 0x10000
    2e1c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2e20:	ldr.w	r3, [r4, #432]	; 0x1b0
    2e24:	cmp	r3, #0
    2e26:	bne.n	2e20 <isr+0x2c4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e28:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e2c:	cmp	r3, #0
    2e2e:	bne.w	2b88 <isr+0x2c>
    2e32:	b.n	2c26 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e34:	ldr	r2, [pc, #36]	; (2e5c <isr+0x300>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2e36:	movs	r1, #2
    2e38:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2e3a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2e3c:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2e3e:	bl	2ab8 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e42:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e46:	cmp	r3, #0
    2e48:	bne.w	2b88 <isr+0x2c>
    2e4c:	b.n	2c26 <isr+0xca>
    2e4e:	nop
    2e50:	.word	0x402e0000
    2e54:	.word	0x20003000
    2e58:	.word	0x402e01c0
    2e5c:	.word	0x20001700
    2e60:	.word	0x200016e8
    2e64:	.word	0x200016e4
    2e68:	.word	0x200016ec
    2e6c:	.word	0x200016f4
    2e70:	.word	0x200016f0
    2e74:	.word	0x20003240
    2e78:	.word	0x20001710
    2e7c:	.word	0x00cc0002
    2e80:	.word	0x000200c8
    2e84:	.word	0x00c80002
    2e88:	.word	0x20002020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2e8c:	uxth	r2, r2
    2e8e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2e92:	cmp	r3, #7
    2e94:	bhi.w	2d7c <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2e98:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2e9c:	mov.w	r3, r3, lsl #2
    2ea0:	ldr	r2, [pc, #544]	; (30c4 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ea2:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2ea6:	add	r2, r3
    2ea8:	ldr	r3, [r2, #0]
    2eaa:	ite	ne
    2eac:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2eb0:	biceq.w	r3, r3, #1
    2eb4:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2eb6:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2eb8:	ldr	r3, [pc, #524]	; (30c8 <isr+0x56c>)
    2eba:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ebc:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ebe:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ec0:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ec4:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ec6:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2eca:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2ecc:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2ece:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ed2:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ed6:	orr.w	r3, r3, #65536	; 0x10000
    2eda:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2ede:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ee2:	cmp	r3, #0
    2ee4:	bne.n	2ede <isr+0x382>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ee6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2eea:	cmp	r3, #0
    2eec:	bne.w	2b88 <isr+0x2c>
    2ef0:	b.n	2c26 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2ef2:	ldr	r3, [pc, #472]	; (30cc <isr+0x570>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2ef4:	ubfx	r1, r1, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2ef8:	ldr	r2, [pc, #468]	; (30d0 <isr+0x574>)
    2efa:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2efc:	ldr	r3, [pc, #468]	; (30d4 <isr+0x578>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2efe:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2f00:	strb	r1, [r3, #0]
    2f02:	b.n	2df6 <isr+0x29a>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2f04:	uxth	r2, r2
    2f06:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2f0a:	cmp	r3, #7
    2f0c:	bhi.w	2d7c <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2f10:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2f14:	mov.w	r3, r3, lsl #2
    2f18:	ldr	r2, [pc, #424]	; (30c4 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f1a:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2f1e:	add	r2, r3
    2f20:	ldr	r3, [r2, #0]
    2f22:	ite	ne
    2f24:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2f28:	orreq.w	r3, r3, #1
    2f2c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f2e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f30:	ldr	r3, [pc, #404]	; (30c8 <isr+0x56c>)
    2f32:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f34:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f36:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f38:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2f3c:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f3e:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f42:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2f44:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2f46:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2f4a:	ldr.w	r3, [r4, #432]	; 0x1b0
    2f4e:	orr.w	r3, r3, #65536	; 0x10000
    2f52:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2f56:	ldr.w	r3, [r4, #432]	; 0x1b0
    2f5a:	cmp	r3, #0
    2f5c:	bne.n	2f56 <isr+0x3fa>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f5e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f62:	cmp	r3, #0
    2f64:	bne.w	2b88 <isr+0x2c>
    2f68:	b.n	2c26 <isr+0xca>
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f6a:	ldr	r2, [pc, #364]	; (30d8 <isr+0x57c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2f6c:	movs	r1, #1
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f6e:	ldr	r3, [pc, #364]	; (30dc <isr+0x580>)
    2f70:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2f72:	mov	r0, r3
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2f74:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2f76:	bl	2ab8 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f7a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f7e:	cmp	r3, #0
    2f80:	bne.w	2b88 <isr+0x2c>
    2f84:	b.n	2c26 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2f86:	ldr	r3, [pc, #344]	; (30e0 <isr+0x584>)
    2f88:	ldr	r0, [r3, #4]
    2f8a:	cmp	r0, #0
    2f8c:	beq.w	2d7c <isr+0x220>
    2f90:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2f92:	uxth.w	lr, r2
    2f96:	b.n	2fa2 <isr+0x446>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2f98:	adds	r3, #12
    2f9a:	ldr	r0, [r3, #4]
    2f9c:	cmp	r0, #0
    2f9e:	beq.w	2d7c <isr+0x220>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2fa2:	ldrh	r5, [r3, #0]
    2fa4:	cmp	r5, r1
    2fa6:	bne.n	2f98 <isr+0x43c>
    2fa8:	ldrh	r5, [r3, #2]
    2faa:	cmp	r5, lr
    2fac:	bne.n	2f98 <isr+0x43c>
				if ((setup.wValue >> 8) == 3) {
    2fae:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2fb0:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    2fb2:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2fb4:	ite	eq
    2fb6:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    2fb8:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    2fba:	cmp	r1, r2
    2fbc:	it	cs
    2fbe:	movcs	r1, r2
    2fc0:	bl	2ab8 <endpoint0_transmit.constprop.0>
    2fc4:	b.n	2c1e <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    2fc6:	ldr.w	r2, [r3, #328]	; 0x148
    2fca:	bic.w	r2, r2, #128	; 0x80
    2fce:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    2fd2:	add	sp, #12
    2fd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2fd8:	lsls	r2, r1, #31
    2fda:	bpl.w	2c16 <isr+0xba>
    2fde:	b.n	2c12 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2fe0:	ldr	r5, [pc, #256]	; (30e4 <isr+0x588>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2fe2:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    2fe4:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2fe6:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2fe8:	ldr	r3, [pc, #252]	; (30e8 <isr+0x58c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2fea:	ldr	r1, [pc, #256]	; (30ec <isr+0x590>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2fec:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2fee:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2ff0:	ldr	r1, [pc, #252]	; (30f0 <isr+0x594>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2ff2:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2ff6:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2ff8:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2ffc:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3000:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3004:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3008:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    300a:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    300c:	sub.w	r0, r1, #4096	; 0x1000
    3010:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3012:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3016:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3018:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    301a:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    301e:	ldr.w	r3, [r4, #432]	; 0x1b0
    3022:	cmp	r3, #0
    3024:	bne.n	301e <isr+0x4c2>
	}
	endpoint0_transfer_ack.next = 1;
    3026:	ldr	r2, [pc, #160]	; (30c8 <isr+0x56c>)
    3028:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    302a:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    302e:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3030:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3032:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3036:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3038:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    303c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    303e:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3042:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3044:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3048:	ldr.w	r3, [r6, #432]	; 0x1b0
    304c:	orrs	r3, r0
    304e:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3052:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    3056:	ldr.w	r3, [r4, #432]	; 0x1b0
    305a:	cmp	r3, #0
    305c:	bne.n	3056 <isr+0x4fa>
    305e:	b.n	2c1e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    3060:	ldr	r4, [pc, #128]	; (30e4 <isr+0x588>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3062:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3066:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3068:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    306a:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    306c:	cmp	r4, r0
    306e:	bne.w	2cc8 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3072:	ldr	r1, [pc, #128]	; (30f4 <isr+0x598>)
    3074:	ldr	r4, [pc, #128]	; (30f8 <isr+0x59c>)
    3076:	ldmia	r1, {r0, r1}
    3078:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    307a:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    307c:	str	r0, [r4, #0]
    307e:	strh	r1, [r4, #4]
    3080:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3082:	bne.w	2cc8 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    3086:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    308a:	movs	r4, #80	; 0x50
    308c:	ldr	r0, [pc, #108]	; (30fc <isr+0x5a0>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    308e:	orr.w	r1, r1, #128	; 0x80
    3092:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    3096:	strb	r4, [r0, #0]
    3098:	b.n	2cc8 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    309a:	ldr	r0, [pc, #100]	; (3100 <isr+0x5a4>)
    309c:	bl	2a88 <run_callbacks>
    30a0:	b.n	2cd6 <isr+0x17a>
    30a2:	ldr	r0, [pc, #96]	; (3104 <isr+0x5a8>)
    30a4:	bl	2a88 <run_callbacks>
    30a8:	b.n	2cee <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    30aa:	ldr	r0, [pc, #92]	; (3108 <isr+0x5ac>)
    30ac:	bl	2a88 <run_callbacks>
    30b0:	b.n	2ce8 <isr+0x18c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    30b2:	ldr	r0, [pc, #88]	; (310c <isr+0x5b0>)
    30b4:	bl	2a88 <run_callbacks>
    30b8:	b.n	2ce2 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    30ba:	ldr	r0, [pc, #84]	; (3110 <isr+0x5b4>)
    30bc:	bl	2a88 <run_callbacks>
    30c0:	b.n	2cdc <isr+0x180>
    30c2:	nop
    30c4:	.word	0x402e01c0
    30c8:	.word	0x20002020
    30cc:	.word	0x20001718
    30d0:	.word	0x20001ac8
    30d4:	.word	0x200016e1
    30d8:	.word	0x20001710
    30dc:	.word	0x20001700
    30e0:	.word	0x200005fc
    30e4:	.word	0x200016f8
    30e8:	.word	0x20002000
    30ec:	.word	0x00070080
    30f0:	.word	0x20003708
    30f4:	.word	0x20001708
    30f8:	.word	0x20001ac0
    30fc:	.word	0x200016f4
    3100:	.word	0x20003100
    3104:	.word	0x20003200
    3108:	.word	0x200031c0
    310c:	.word	0x20003180
    3110:	.word	0x20003140

00003114 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3114:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3116:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    311a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    311e:	ite	ne
    3120:	movne	r7, #0
    3122:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3126:	cmp	r2, #2
    3128:	bls.n	312e <usb_config_rx+0x1a>
    312a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    312e:	mov.w	sl, r0, lsl #7
    3132:	ldr.w	r9, [pc, #64]	; 3174 <usb_config_rx+0x60>
    3136:	mov	r5, r1
    3138:	mov	r4, r0
    313a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    313e:	movs	r1, #0
    3140:	movs	r2, #64	; 0x40
    3142:	mov	r8, r3
    3144:	mov	r0, r6
    3146:	bl	52bc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    314a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    314c:	orr.w	r1, r7, r5, lsl #16
    3150:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3154:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3158:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    315a:	cmp.w	r8, #0
    315e:	beq.n	312a <usb_config_rx+0x16>
    3160:	ldr	r3, [pc, #12]	; (3170 <usb_config_rx+0x5c>)
    3162:	lsls	r0, r4
    3164:	ldr	r4, [r3, #0]
    3166:	orrs	r0, r4
    3168:	str	r0, [r3, #0]
    316a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    316e:	nop
    3170:	.word	0x200016e8
    3174:	.word	0x20003000

00003178 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3178:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    317a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    317e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3182:	ite	ne
    3184:	movne	r7, #0
    3186:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    318a:	cmp	r2, #2
    318c:	bls.n	3192 <usb_config_tx+0x1a>
    318e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3192:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3194:	lsls	r5, r0, #7
    3196:	ldr.w	r9, [pc, #68]	; 31dc <usb_config_tx+0x64>
    319a:	mov	r8, r1
    319c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    319e:	movs	r1, #0
    31a0:	mov	r4, r0
    31a2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    31a4:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    31a8:	mov	r0, sl
    31aa:	bl	52bc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    31ae:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    31b0:	orr.w	r1, r7, r8, lsl #16
    31b4:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    31b8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    31bc:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    31c0:	cmp	r6, #0
    31c2:	beq.n	318e <usb_config_tx+0x16>
    31c4:	add.w	r0, r4, #16
    31c8:	ldr	r3, [pc, #12]	; (31d8 <usb_config_tx+0x60>)
    31ca:	lsls	r2, r0
    31cc:	ldr	r0, [r3, #0]
    31ce:	orrs	r2, r0
    31d0:	str	r2, [r3, #0]
    31d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31d6:	nop
    31d8:	.word	0x200016e8
    31dc:	.word	0x20003000

000031e0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    31e0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    31e2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    31e4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    31e6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    31ea:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    31ec:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    31ee:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    31f0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    31f4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    31f8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    31fc:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3200:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3202:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    3204:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    3206:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    3208:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    320a:	pop	{r4, r5, r6, r7}
    320c:	bx	lr
    320e:	nop

00003210 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3210:	subs	r3, r0, #2
    3212:	cmp	r3, #2
    3214:	bls.n	3218 <usb_transmit+0x8>
    3216:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    3218:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    321a:	ldr	r3, [pc, #24]	; (3234 <usb_transmit+0x24>)
    321c:	add.w	r4, r0, #16
    3220:	movs	r5, #1
    3222:	mov	r2, r1
    3224:	add.w	r0, r3, r0, lsl #7
    3228:	lsl.w	r1, r5, r4
}
    322c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    322e:	b.w	2a2c <schedule_transfer>
    3232:	nop
    3234:	.word	0x20003040

00003238 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3238:	subs	r3, r0, #2
    323a:	cmp	r3, #2
    323c:	bls.n	3240 <usb_receive+0x8>
    323e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    3240:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    3242:	ldr	r3, [pc, #20]	; (3258 <usb_receive+0x20>)
    3244:	movs	r4, #1
    3246:	mov	r2, r1
    3248:	lsl.w	r1, r4, r0
    324c:	add.w	r0, r3, r0, lsl #7
}
    3250:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    3254:	b.w	2a2c <schedule_transfer>
    3258:	.word	0x20003000

0000325c <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    325c:	ldr	r2, [pc, #32]	; (3280 <usb_transfer_status+0x24>)
    325e:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    3262:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    3264:	orr.w	r3, r3, #16384	; 0x4000
    3268:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    326c:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    326e:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    3272:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    3274:	tst.w	r3, #16384	; 0x4000
    3278:	beq.n	3262 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    327a:	mov	r0, r1
    327c:	bx	lr
    327e:	nop
    3280:	.word	0x402e0000

00003284 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3284:	cmp	r0, #0
    3286:	beq.n	332e <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    3288:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    328c:	mov	r9, r0
    328e:	sub	sp, #12
    3290:	ldr	r4, [pc, #156]	; (3330 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3292:	movs	r0, #1
    3294:	ldr	r5, [pc, #156]	; (3334 <delay+0xb0>)
    3296:	ldr	r6, [pc, #160]	; (3338 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3298:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    329c:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    329e:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    32a0:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    32a4:	cmp	r3, #0
    32a6:	bne.n	3298 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    32a8:	ldr	r7, [pc, #144]	; (333c <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    32aa:	mov.w	lr, #1000	; 0x3e8
    32ae:	ldr	r0, [pc, #144]	; (3340 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    32b0:	ldr.w	ip, [r7]
    32b4:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    32b6:	add.w	r7, r7, #1660944384	; 0x63000000
    32ba:	ldr	r3, [r0, #0]
    32bc:	rsb	r1, r1, ip
    32c0:	add.w	r7, r7, #1818624	; 0x1bc000
    32c4:	addw	r7, r7, #3711	; 0xe7f
    32c8:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    32cc:	mov	sl, r7
    32ce:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    32d0:	lsrs	r3, r3, #18
    32d2:	udiv	r3, r1, r3
    32d6:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    32da:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    32de:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    32e0:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    32e2:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    32e6:	cmp	r3, #0
    32e8:	bne.n	32da <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    32ea:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    32ee:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    32f2:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    32f4:	mul.w	r2, lr, r2
    32f8:	rsb	r1, r1, ip
    32fc:	umull	r3, lr, sl, r3
    3300:	rsb	r3, r8, r2
    3304:	mov.w	r2, lr, lsr #18
    3308:	udiv	r1, r1, r2
    330c:	adds	r2, r1, r3
    330e:	cmp.w	r2, #1000	; 0x3e8
    3312:	bcc.n	3324 <delay+0xa0>
			if (--msec == 0) return;
    3314:	subs.w	r9, r9, #1
			start += 1000;
    3318:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    331c:	bne.n	32da <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    331e:	add	sp, #12
    3320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3324:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    3326:	bl	3758 <yield>
	}
    332a:	ldr	r0, [sp, #4]
    332c:	b.n	32da <delay+0x56>
    332e:	bx	lr
    3330:	.word	0x20003280
    3334:	.word	0x20001718
    3338:	.word	0x20001714
    333c:	.word	0xe0001004
    3340:	.word	0x20000794

00003344 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    3344:	push	{r4, r5, r6}
    3346:	ldr	r3, [pc, #56]	; (3380 <micros+0x3c>)
    3348:	movs	r6, #1
    334a:	ldr	r5, [pc, #56]	; (3384 <micros+0x40>)
    334c:	ldr	r0, [pc, #56]	; (3388 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    334e:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3352:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    3354:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3356:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    335a:	cmp	r2, #0
    335c:	bne.n	334e <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    335e:	ldr	r3, [pc, #44]	; (338c <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    3360:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    3364:	ldr	r2, [pc, #40]	; (3390 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    3366:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    3368:	ldr	r5, [pc, #40]	; (3394 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    336a:	ldr	r2, [r2, #0]
	return usec;
    336c:	subs	r4, r3, r4
    336e:	umull	r2, r3, r5, r2
    3372:	lsrs	r3, r3, #18
    3374:	udiv	r4, r4, r3
}
    3378:	mla	r0, r0, r1, r4
    337c:	pop	{r4, r5, r6}
    337e:	bx	lr
    3380:	.word	0x20003280
    3384:	.word	0x20001718
    3388:	.word	0x20001714
    338c:	.word	0xe0001004
    3390:	.word	0x20000794
    3394:	.word	0x431bde83

00003398 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3398:	ldr	r0, [pc, #656]	; (362c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    339a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    339e:	ldr	r3, [pc, #656]	; (3630 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    33a0:	ldr	r2, [r0, #120]	; 0x78
    33a2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    33a6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    33a8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    33aa:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    33ac:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    33b0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    33b4:	ldr	r4, [pc, #636]	; (3634 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    33b6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    33ba:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    33bc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    33c0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    33c2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    33c4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    33c8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    33cc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    33d0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    33d4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    33d8:	ldrh.w	r0, [r3, #392]	; 0x188
    33dc:	uxth	r0, r0
    33de:	orr.w	r0, r0, #240	; 0xf0
    33e2:	strh.w	r0, [r3, #392]	; 0x188
    33e6:	add.w	r0, r1, r1, lsl #1
    33ea:	ldr	r3, [pc, #580]	; (3630 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    33ec:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    33ee:	movs	r5, #0
    33f0:	lsls	r0, r0, #5
    33f2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    33f4:	cmp	r1, #4
    33f6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    33f8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    33fc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    33fe:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3400:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3402:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3404:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3406:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3408:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    340a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    340c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    340e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3410:	bne.n	33e6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3412:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3416:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    341a:	ldr	r3, [pc, #540]	; (3638 <pwm_init+0x2a0>)
    341c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3420:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3422:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3424:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3428:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    342a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    342e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3432:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3436:	ldrh.w	r0, [r4, #392]	; 0x188
    343a:	uxth	r0, r0
    343c:	orr.w	r0, r0, #3840	; 0xf00
    3440:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3444:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3448:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    344c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3450:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3454:	ldrh.w	r0, [r3, #392]	; 0x188
    3458:	uxth	r0, r0
    345a:	orr.w	r0, r0, #240	; 0xf0
    345e:	strh.w	r0, [r3, #392]	; 0x188
    3462:	add.w	r0, r1, r1, lsl #1
    3466:	ldr	r3, [pc, #464]	; (3638 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    3468:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    346a:	movs	r5, #0
    346c:	lsls	r0, r0, #5
    346e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3470:	cmp	r1, #4
    3472:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3474:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3476:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    347a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    347c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    347e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3480:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3482:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3484:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3486:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3488:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    348a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    348c:	bne.n	3462 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    348e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3492:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3496:	ldr	r3, [pc, #420]	; (363c <pwm_init+0x2a4>)
    3498:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    349c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    349e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    34a0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    34a4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    34a6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    34aa:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    34ae:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    34b2:	ldrh.w	r0, [r4, #392]	; 0x188
    34b6:	uxth	r0, r0
    34b8:	orr.w	r0, r0, #3840	; 0xf00
    34bc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    34c0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    34c4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    34c8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    34cc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    34d0:	ldrh.w	r0, [r3, #392]	; 0x188
    34d4:	uxth	r0, r0
    34d6:	orr.w	r0, r0, #240	; 0xf0
    34da:	strh.w	r0, [r3, #392]	; 0x188
    34de:	add.w	r0, r1, r1, lsl #1
    34e2:	ldr	r3, [pc, #344]	; (363c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    34e4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    34e6:	movs	r5, #0
    34e8:	lsls	r0, r0, #5
    34ea:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    34ec:	cmp	r1, #4
    34ee:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    34f0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    34f2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    34f6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    34f8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    34fa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    34fc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    34fe:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3500:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3502:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3504:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3506:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3508:	bne.n	34de <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    350a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    350e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3512:	ldr	r3, [pc, #300]	; (3640 <pwm_init+0x2a8>)
    3514:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3518:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    351a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    351c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3520:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3522:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3526:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    352a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    352e:	ldrh.w	r0, [r4, #392]	; 0x188
    3532:	uxth	r0, r0
    3534:	orr.w	r0, r0, #3840	; 0xf00
    3538:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    353c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3540:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3544:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3548:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    354c:	ldrh.w	r0, [r3, #392]	; 0x188
    3550:	uxth	r0, r0
    3552:	orr.w	r0, r0, #240	; 0xf0
    3556:	strh.w	r0, [r3, #392]	; 0x188
    355a:	add.w	r0, r1, r1, lsl #1
    355e:	ldr	r3, [pc, #224]	; (3640 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3560:	adds	r1, #1
    3562:	lsls	r0, r0, #5
    3564:	mov	r4, r3
    3566:	cmp	r1, #4
    3568:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    356a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    356c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3570:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3572:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3574:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3576:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3578:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    357a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    357c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    357e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3580:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3582:	bne.n	355a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3584:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3588:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    358a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    358c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3590:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3592:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3596:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3598:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    359c:	orrs	r3, r7
    359e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    35a2:	ldrh.w	r3, [r4, #392]	; 0x188
    35a6:	uxth	r3, r3
    35a8:	orr.w	r3, r3, #3840	; 0xf00
    35ac:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    35b0:	lsls	r0, r2, #5
    35b2:	ldr	r3, [pc, #144]	; (3644 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35b4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    35b6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35b8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    35ba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    35bc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    35be:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    35c0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    35c2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    35c6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    35c8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    35ca:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35cc:	bne.n	35b0 <pwm_init+0x218>
    35ce:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    35d0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    35d2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    35d6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    35da:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    35dc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    35e0:	lsls	r0, r2, #5
    35e2:	ldr	r3, [pc, #100]	; (3648 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35e4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    35e6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35e8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    35ea:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    35ec:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    35ee:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    35f0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    35f2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    35f4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    35f6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    35f8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    35fa:	bne.n	35e0 <pwm_init+0x248>
    35fc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    35fe:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3600:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3604:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3608:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    360a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    360e:	lsls	r0, r2, #5
    3610:	ldr	r3, [pc, #56]	; (364c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3612:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3614:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3616:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3618:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    361a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    361c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    361e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3620:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3622:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3624:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3626:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3628:	bne.n	360e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    362a:	pop	{r4, r5, r6, r7, pc}
    362c:	.word	0x400fc000
    3630:	.word	0x403dc000
    3634:	.word	0xfc030000
    3638:	.word	0x403e0000
    363c:	.word	0x403e4000
    3640:	.word	0x403e8000
    3644:	.word	0x401dc000
    3648:	.word	0x401e0000
    364c:	.word	0x401e4000

00003650 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3650:	lsls	r0, r0, #4
    3652:	ldr	r3, [pc, #28]	; (3670 <digitalWrite.part.0+0x20>)
    3654:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    3656:	ldr	r3, [r3, r0]
	mask = p->mask;
    3658:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    365a:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    365c:	tst	r0, r2
    365e:	beq.n	3666 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    3660:	cbnz	r1, 3668 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    3662:	str.w	r2, [r3, #136]	; 0x88
    3666:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    3668:	str.w	r2, [r3, #132]	; 0x84
    366c:	bx	lr
    366e:	nop
    3670:	.word	0x2000037c

00003674 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3674:	cmp	r0, #39	; 0x27
    3676:	bhi.n	367c <digitalWrite+0x8>
    3678:	b.w	3650 <digitalWrite.part.0>
    367c:	bx	lr
    367e:	nop

00003680 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3680:	cmp	r0, #39	; 0x27
    3682:	bhi.n	36be <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    3684:	lsls	r0, r0, #4
    3686:	ldr	r2, [pc, #104]	; (36f0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3688:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    368a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    368e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    3690:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3692:	beq.n	36c0 <pinMode+0x40>
    3694:	cmp	r1, #4
    3696:	beq.n	36c0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3698:	ldr	r4, [r3, #12]
    369a:	ldr	r2, [r0, #4]
    369c:	bic.w	r2, r2, r4
    36a0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    36a2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    36a4:	cbz	r1, 36e2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    36a6:	cmp	r1, #2
    36a8:	beq.n	36e8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    36aa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    36ac:	ldr	r3, [r3, #4]
}
    36ae:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    36b2:	ite	eq
    36b4:	ldreq	r1, [pc, #60]	; (36f4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    36b6:	ldrne	r1, [pc, #64]	; (36f8 <pinMode+0x78>)
    36b8:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    36ba:	movs	r2, #21
    36bc:	str	r2, [r3, #0]
}
    36be:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    36c0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    36c2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    36c4:	ldr	r4, [r0, #4]
    36c6:	orr.w	r2, r2, r4
    36ca:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    36cc:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    36ce:	beq.n	36e2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    36d0:	movw	r1, #2104	; 0x838
    36d4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    36d6:	ldr	r3, [r3, #4]
    36d8:	movs	r2, #21
}
    36da:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    36de:	str	r2, [r3, #0]
}
    36e0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    36e2:	movs	r1, #56	; 0x38
    36e4:	str	r1, [r2, #0]
    36e6:	b.n	36d6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    36e8:	ldr	r1, [pc, #16]	; (36fc <pinMode+0x7c>)
    36ea:	str	r1, [r2, #0]
    36ec:	b.n	36d6 <pinMode+0x56>
    36ee:	nop
    36f0:	.word	0x2000037c
    36f4:	.word	0x00013038
    36f8:	.word	0x00010038
    36fc:	.word	0x0001f038

00003700 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3700:	ldr	r2, [pc, #72]	; (374c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3702:	ldr	r3, [pc, #76]	; (3750 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3704:	ldr.w	r0, [r2, #544]	; 0x220
    3708:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    370c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    370e:	push	{r4, lr}
    3710:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3712:	bhi.n	371a <usb_init_serialnumber+0x1a>
    3714:	add.w	r0, r0, r0, lsl #2
    3718:	lsls	r0, r0, #1
    371a:	ldr	r4, [pc, #56]	; (3754 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    371c:	add	r1, sp, #4
    371e:	movs	r2, #10
    3720:	bl	3c2c <ultoa>
    3724:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    3726:	movs	r3, #0
    3728:	mov	r0, r4
		char c = buf[i];
    372a:	ldrb.w	r2, [r1], #1
    372e:	adds	r3, #1
		if (!c) break;
    3730:	cbz	r2, 3742 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3732:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3734:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3738:	bne.n	372a <usb_init_serialnumber+0x2a>
    373a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    373c:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    373e:	add	sp, #16
    3740:	pop	{r4, pc}
    3742:	lsls	r3, r3, #1
    3744:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3746:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    3748:	add	sp, #16
    374a:	pop	{r4, pc}
    374c:	.word	0x401f4400
    3750:	.word	0x0098967f
    3754:	.word	0x20000830

00003758 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3758:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    375a:	ldr	r4, [pc, #132]	; (37e0 <yield+0x88>)
    375c:	ldrb	r3, [r4, #0]
    375e:	cbnz	r3, 3782 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3760:	ldr	r3, [pc, #128]	; (37e4 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3762:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3764:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3766:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3768:	cbnz	r3, 37b2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    376a:	ldr	r3, [pc, #124]	; (37e8 <yield+0x90>)
    376c:	ldrb	r3, [r3, #0]
    376e:	cmp	r3, #0
    3770:	bne.n	37c6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    3772:	ldr	r3, [pc, #120]	; (37ec <yield+0x94>)

	running = 0;
    3774:	movs	r1, #0
    3776:	ldr	r2, [r3, #0]
    3778:	strb	r1, [r4, #0]
    377a:	cbz	r2, 3782 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    377c:	mrs	r2, IPSR
		if (ipsr != 0) return;
    3780:	cbz	r2, 3784 <yield+0x2c>
    3782:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3784:	mrs	r0, PRIMASK
		__disable_irq();
    3788:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    378a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    378c:	cbz	r2, 37cc <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    378e:	ldr	r4, [pc, #96]	; (37f0 <yield+0x98>)
    3790:	ldrb	r1, [r4, #0]
    3792:	cbnz	r1, 37cc <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3794:	movs	r6, #1
		firstYield = first->_next;
    3796:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3798:	strb	r6, [r4, #0]
		firstYield = first->_next;
    379a:	str	r5, [r3, #0]
		if (firstYield) {
    379c:	cbz	r5, 37d4 <yield+0x7c>
			firstYield->_prev = nullptr;
    379e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37a0:	cbnz	r0, 37a4 <yield+0x4c>
    37a2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    37a4:	movs	r5, #0
		(*(first->_function))(*first);
    37a6:	ldr	r3, [r2, #8]
    37a8:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    37aa:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    37ac:	blx	r3
		runningFromYield = false;
    37ae:	strb	r5, [r4, #0]
    37b0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    37b2:	bl	264c <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    37b6:	cmp	r0, #0
    37b8:	beq.n	376a <yield+0x12>
    37ba:	bl	3a08 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    37be:	ldr	r3, [pc, #40]	; (37e8 <yield+0x90>)
    37c0:	ldrb	r3, [r3, #0]
    37c2:	cmp	r3, #0
    37c4:	beq.n	3772 <yield+0x1a>
    37c6:	bl	3c7c <HardwareSerial::processSerialEvents()>
    37ca:	b.n	3772 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37cc:	cmp	r0, #0
    37ce:	bne.n	3782 <yield+0x2a>
    37d0:	cpsie	i
    37d2:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    37d4:	ldr	r3, [pc, #28]	; (37f4 <yield+0x9c>)
    37d6:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37d8:	cmp	r0, #0
    37da:	bne.n	37a4 <yield+0x4c>
    37dc:	b.n	37a2 <yield+0x4a>
    37de:	nop
    37e0:	.word	0x20001730
    37e4:	.word	0x20000846
    37e8:	.word	0x2000176c
    37ec:	.word	0x20001744
    37f0:	.word	0x20001748
    37f4:	.word	0x20001740

000037f8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    37f8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    37fa:	mrs	r2, PRIMASK
		__disable_irq();
    37fe:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3800:	ldrb	r3, [r0, #29]
    3802:	cbnz	r3, 3812 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3804:	ldrb	r1, [r0, #28]
    3806:	cmp	r1, #1
    3808:	beq.n	381c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    380a:	cmp	r1, #3
    380c:	beq.n	3830 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    380e:	movs	r3, #1
    3810:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3812:	cbnz	r2, 3816 <EventResponder::triggerEventNotImmediate()+0x1e>
    3814:	cpsie	i
	}
	enableInterrupts(irq);
}
    3816:	ldr.w	r4, [sp], #4
    381a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    381c:	ldr	r4, [pc, #68]	; (3864 <EventResponder::triggerEventNotImmediate()+0x6c>)
    381e:	ldr	r1, [r4, #0]
    3820:	cbz	r1, 384c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3822:	ldr	r1, [pc, #68]	; (3868 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3824:	str	r3, [r0, #20]
				_prev = lastYield;
    3826:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    3828:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    382a:	str	r3, [r0, #24]
				_prev->_next = this;
    382c:	str	r0, [r3, #20]
    382e:	b.n	380e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3830:	ldr	r4, [pc, #56]	; (386c <EventResponder::triggerEventNotImmediate()+0x74>)
    3832:	ldr	r1, [r4, #0]
    3834:	cbz	r1, 3858 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3836:	ldr	r1, [pc, #56]	; (3870 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3838:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    383a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    383c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    383e:	str	r3, [r0, #24]
				_prev->_next = this;
    3840:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3842:	ldr	r3, [pc, #48]	; (3874 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3844:	mov.w	r1, #268435456	; 0x10000000
    3848:	str	r1, [r3, #0]
    384a:	b.n	380e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    384c:	ldr	r3, [pc, #24]	; (3868 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    384e:	str	r1, [r0, #20]
				_prev = nullptr;
    3850:	str	r1, [r0, #24]
				firstYield = this;
    3852:	str	r0, [r4, #0]
				lastYield = this;
    3854:	str	r0, [r3, #0]
    3856:	b.n	380e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3858:	ldr	r3, [pc, #20]	; (3870 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    385a:	str	r1, [r0, #20]
				_prev = nullptr;
    385c:	str	r1, [r0, #24]
				firstInterrupt = this;
    385e:	str	r0, [r4, #0]
				lastInterrupt = this;
    3860:	str	r0, [r3, #0]
    3862:	b.n	3842 <EventResponder::triggerEventNotImmediate()+0x4a>
    3864:	.word	0x20001744
    3868:	.word	0x20001740
    386c:	.word	0x20001734
    3870:	.word	0x20001738
    3874:	.word	0xe000ed04

00003878 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3878:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    387a:	mrs	r1, PRIMASK
		__disable_irq();
    387e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3880:	ldr	r4, [pc, #48]	; (38b4 <EventResponder::runFromInterrupt()+0x3c>)
    3882:	ldr	r3, [r4, #0]
		if (first) {
    3884:	cbz	r3, 38aa <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3886:	ldr	r6, [pc, #48]	; (38b8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3888:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    388a:	ldr	r2, [r3, #20]
    388c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    388e:	cbz	r2, 38b0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3890:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3892:	cbnz	r1, 3896 <EventResponder::runFromInterrupt()+0x1e>
    3894:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3896:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3898:	mov	r0, r3
    389a:	ldr	r3, [r3, #8]
    389c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    389e:	mrs	r1, PRIMASK
		__disable_irq();
    38a2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    38a4:	ldr	r3, [r4, #0]
		if (first) {
    38a6:	cmp	r3, #0
    38a8:	bne.n	388a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    38aa:	cbnz	r1, 38ae <EventResponder::runFromInterrupt()+0x36>
    38ac:	cpsie	i
    38ae:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    38b0:	str	r2, [r6, #0]
    38b2:	b.n	3892 <EventResponder::runFromInterrupt()+0x1a>
    38b4:	.word	0x20001734
    38b8:	.word	0x20001738

000038bc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    38bc:	b.w	3878 <EventResponder::runFromInterrupt()>

000038c0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    38c0:	ldr	r2, [pc, #96]	; (3924 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    38c2:	push	{r4, r5}
	if (listActive == nullptr) {
    38c4:	ldr	r4, [r2, #0]
    38c6:	cmp	r4, #0
    38c8:	beq.n	391c <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    38ca:	ldr	r3, [r0, #0]
    38cc:	ldr	r1, [r4, #0]
    38ce:	cmp	r3, r1
    38d0:	bcs.n	38f2 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    38d2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    38d4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    38d6:	str	r4, [r0, #8]
		_prev = nullptr;
    38d8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    38da:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    38dc:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    38de:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    38e0:	movs	r3, #2
}
    38e2:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    38e4:	strb	r3, [r0, #20]
}
    38e6:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    38e8:	str	r3, [r0, #0]
    38ea:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    38ec:	ldr	r1, [r2, #0]
    38ee:	cmp	r3, r1
    38f0:	bcc.n	3904 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    38f2:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    38f4:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    38f6:	cmp	r2, #0
    38f8:	bne.n	38e8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    38fa:	str	r2, [r0, #8]
		_prev = timer;
    38fc:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    38fe:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    3900:	str	r0, [r4, #8]
    3902:	b.n	38e0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3904:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    3906:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3908:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    390a:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    390c:	str	r5, [r0, #12]
				timer->_prev = this;
    390e:	str	r0, [r4, #12]
				_prev->_next = this;
    3910:	ldr	r1, [r0, #12]
    3912:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    3914:	str	r3, [r4, #0]
				_state = TimerActive;
    3916:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3918:	pop	{r4, r5}
    391a:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    391c:	str	r4, [r0, #8]
		_prev = nullptr;
    391e:	str	r4, [r0, #12]
		listActive = this;
    3920:	str	r0, [r2, #0]
    3922:	b.n	38e0 <MillisTimer::addToActiveList()+0x20>
    3924:	.word	0x2000173c

00003928 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3928:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    392a:	ldr	r6, [pc, #136]	; (39b4 <MillisTimer::runFromTimer()+0x8c>)
    392c:	ldr	r4, [r6, #0]
	while (timer) {
    392e:	cbz	r4, 397c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3930:	ldr	r3, [r4, #0]
    3932:	cmp	r3, #0
    3934:	bne.n	39ac <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3936:	mov	r5, r3
    3938:	ldr	r7, [pc, #124]	; (39b8 <MillisTimer::runFromTimer()+0x90>)
    393a:	b.n	3946 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    393c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    393e:	cbz	r4, 397c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3940:	ldr	r3, [r4, #0]
    3942:	cmp	r3, #0
    3944:	bne.n	39ac <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3946:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3948:	cbz	r3, 394c <MillisTimer::runFromTimer()+0x24>
    394a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    394c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    394e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3950:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3952:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3954:	ldr	r3, [r3, #0]
    3956:	cmp	r3, r7
    3958:	bne.n	399e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    395a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    395c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    395e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3960:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3962:	beq.n	39a6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3964:	bl	37f8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3968:	ldr	r3, [r4, #4]
    396a:	cmp	r3, #0
    396c:	beq.n	393c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    396e:	str	r3, [r4, #0]
				timer->addToActiveList();
    3970:	mov	r0, r4
    3972:	bl	38c0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3976:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3978:	cmp	r4, #0
    397a:	bne.n	3940 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    397c:	mrs	r3, PRIMASK
		__disable_irq();
    3980:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3982:	ldr	r2, [pc, #56]	; (39bc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3984:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3986:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3988:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    398a:	cbnz	r3, 398e <MillisTimer::runFromTimer()+0x66>
    398c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    398e:	cbz	r0, 399c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3990:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3992:	bl	38c0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3996:	mov	r0, r4
    3998:	cmp	r0, #0
    399a:	bne.n	3990 <MillisTimer::runFromTimer()+0x68>
    399c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    399e:	mov	r2, r4
    39a0:	movs	r1, #0
    39a2:	blx	r3
    39a4:	b.n	3968 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    39a6:	ldr	r3, [r0, #8]
    39a8:	blx	r3
    39aa:	b.n	3968 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    39ac:	subs	r3, #1
    39ae:	str	r3, [r4, #0]
			break;
    39b0:	b.n	397c <MillisTimer::runFromTimer()+0x54>
    39b2:	nop
    39b4:	.word	0x2000173c
    39b8:	.word	0x000007a9
    39bc:	.word	0x2000174c

000039c0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    39c0:	ldr	r2, [pc, #16]	; (39d4 <systick_isr+0x14>)
    39c2:	ldr	r3, [pc, #20]	; (39d8 <systick_isr+0x18>)
    39c4:	ldr	r1, [r2, #0]
	systick_millis_count++;
    39c6:	ldr	r2, [pc, #20]	; (39dc <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    39c8:	str	r1, [r3, #0]
	systick_millis_count++;
    39ca:	ldr	r3, [r2, #0]
    39cc:	adds	r3, #1
    39ce:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    39d0:	b.w	3928 <MillisTimer::runFromTimer()>
    39d4:	.word	0xe0001004
    39d8:	.word	0x20001714
    39dc:	.word	0x20001718

000039e0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    39e0:	b.w	2660 <usb_serial_flush_input>

000039e4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    39e4:	b.w	2628 <usb_serial_peekchar>

000039e8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    39e8:	b.w	25dc <usb_serial_getchar>

000039ec <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    39ec:	b.w	264c <usb_serial_available>

000039f0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    39f0:	b.w	272c <usb_serial_flush_output>

000039f4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    39f4:	b.w	26e0 <usb_serial_write_buffer_free>

000039f8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    39f8:	mov	r0, r1
    39fa:	mov	r1, r2
    39fc:	b.w	26c8 <usb_serial_write>

00003a00 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3a00:	mov	r0, r1
    3a02:	b.w	269c <usb_serial_putchar>
    3a06:	nop

00003a08 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    3a08:	ldr	r3, [pc, #4]	; (3a10 <serialEvent()+0x8>)
    3a0a:	movs	r2, #0
    3a0c:	strb	r2, [r3, #0]
    3a0e:	bx	lr
    3a10:	.word	0x20000846

00003a14 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a14:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3a16:	ldr	r4, [pc, #24]	; (3a30 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a18:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3a1a:	ldr	r3, [r0, #0]
    3a1c:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a1e:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3a20:	add	r1, sp, #4
    3a22:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a24:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3a28:	blx	r3
}
    3a2a:	add	sp, #8
    3a2c:	pop	{r4, pc}
    3a2e:	nop
    3a30:	.word	0x20000690

00003a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3a34:	push	{r4, r5, r6, r7, lr}
    3a36:	mov	r6, r0
    3a38:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3a3a:	cmp	r2, #0
    3a3c:	beq.n	3aa6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3a3e:	cmp	r2, #1
    3a40:	it	eq
    3a42:	moveq	r2, #10
	}


	if (n == 0) {
    3a44:	cbz	r1, 3a9c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3a46:	movs	r5, #33	; 0x21
    3a48:	b.n	3a4c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3a4a:	uxtb	r5, r7
    3a4c:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3a4e:	udiv	r4, r1, r2
    3a52:	mls	r1, r2, r4, r1
    3a56:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3a58:	cmp	r1, #9
    3a5a:	add.w	r1, r0, #55	; 0x37
    3a5e:	add.w	r0, r0, #48	; 0x30
    3a62:	it	hi
    3a64:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3a66:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3a68:	add	r4, sp, #40	; 0x28
    3a6a:	it	ls
    3a6c:	uxtbls	r0, r0
    3a6e:	add	r4, r5
    3a70:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3a74:	cmp	r1, #0
    3a76:	bne.n	3a4a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3a78:	cbz	r3, 3a88 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3a7a:	subs	r5, #1
		buf[i] = '-';
    3a7c:	add	r3, sp, #40	; 0x28
    3a7e:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3a80:	uxtb	r5, r5
		buf[i] = '-';
    3a82:	add	r3, r5
    3a84:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3a88:	ldr	r3, [r6, #0]
    3a8a:	add	r1, sp, #4
    3a8c:	rsb	r2, r5, #34	; 0x22
    3a90:	mov	r0, r6
    3a92:	add	r1, r5
    3a94:	ldr	r3, [r3, #4]
    3a96:	blx	r3
}
    3a98:	add	sp, #44	; 0x2c
    3a9a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3a9c:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3a9e:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3aa0:	strb.w	r2, [sp, #37]	; 0x25
    3aa4:	b.n	3a78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3aa6:	ldr	r3, [r0, #0]
    3aa8:	uxtb	r1, r1
    3aaa:	ldr	r3, [r3, #0]
    3aac:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3aae:	add	sp, #44	; 0x2c
    3ab0:	pop	{r4, r5, r6, r7, pc}
    3ab2:	nop
    3ab4:	movs	r0, r0
	...

00003ab8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3ab8:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    3abc:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3abe:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    3ac2:	mov	r5, r0
    3ac4:	vpush	{d8}
    3ac8:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3aca:	bvs.w	3bf0 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    3ace:	vabs.f64	d7, d0
    3ad2:	vldr	d6, [pc, #300]	; 3c00 <Print::printFloat(double, unsigned char)+0x148>
    3ad6:	vcmp.f64	d7, d6
    3ada:	vmrs	APSR_nzcv, fpscr
    3ade:	ble.n	3af6 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3ae0:	ldr	r3, [r0, #0]
    3ae2:	movs	r2, #3
    3ae4:	ldr	r1, [pc, #312]	; (3c20 <Print::printFloat(double, unsigned char)+0x168>)
    3ae6:	ldr	r3, [r3, #4]
    3ae8:	blx	r3
    3aea:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    3aec:	mov	r0, r6
    3aee:	add	sp, #24
    3af0:	vpop	{d8}
    3af4:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    3af6:	vldr	d7, [pc, #272]	; 3c08 <Print::printFloat(double, unsigned char)+0x150>
    3afa:	vcmpe.f64	d0, d7
    3afe:	vmrs	APSR_nzcv, fpscr
    3b02:	bgt.n	3bb6 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    3b04:	vldr	d7, [pc, #264]	; 3c10 <Print::printFloat(double, unsigned char)+0x158>
    3b08:	vcmpe.f64	d0, d7
    3b0c:	vmrs	APSR_nzcv, fpscr
    3b10:	bmi.n	3bb6 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    3b12:	vcmpe.f64	d0, #0.0
    3b16:	mov	r4, r1
    3b18:	vmrs	APSR_nzcv, fpscr
    3b1c:	bmi.n	3bcc <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    3b1e:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3b20:	cmp	r4, #0
    3b22:	beq.n	3bd4 <Print::printFloat(double, unsigned char)+0x11c>
    3b24:	vmov.f64	d8, #96	; 0x3f000000  0.5
    3b28:	movs	r2, #0
		rounding *= 0.1;
    3b2a:	vldr	d7, [pc, #236]	; 3c18 <Print::printFloat(double, unsigned char)+0x160>
    3b2e:	adds	r2, #1
    3b30:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3b34:	uxtb	r1, r2
    3b36:	cmp	r4, r1
    3b38:	bhi.n	3b2e <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    3b3a:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3b3e:	movs	r2, #10
    3b40:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    3b42:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    3b46:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    3b4a:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    3b4e:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    3b52:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b56:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3b58:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3b5c:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3b60:	mov.w	r3, #46	; 0x2e
    3b64:	it	cs
    3b66:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3b68:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3b6a:	strb.w	r3, [sp, #8]
    3b6e:	add	r4, r2
    3b70:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3b72:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3b76:	adds	r3, r2, #1
    3b78:	add	r1, sp, #24
    3b7a:	add	r1, r2
    3b7c:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3b7e:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    3b80:	vcvt.u32.f64	s13, d0
    3b84:	vstr	s13, [sp, #4]
    3b88:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    3b8c:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3b90:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    3b94:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3b98:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    3b9c:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3ba0:	bne.n	3b72 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    3ba2:	ldr	r3, [r5, #0]
    3ba4:	mov	r0, r5
    3ba6:	add	r1, sp, #8
    3ba8:	ldr	r3, [r3, #4]
    3baa:	blx	r3
	}
	return count;
}
    3bac:	mov	r0, r6
    3bae:	add	sp, #24
    3bb0:	vpop	{d8}
    3bb4:	pop	{r4, r5, r6, pc}
    3bb6:	ldr	r3, [r5, #0]
    3bb8:	movs	r2, #3
    3bba:	ldr	r1, [pc, #104]	; (3c24 <Print::printFloat(double, unsigned char)+0x16c>)
    3bbc:	ldr	r3, [r3, #4]
    3bbe:	blx	r3
    3bc0:	mov	r6, r0
    3bc2:	mov	r0, r6
    3bc4:	add	sp, #24
    3bc6:	vpop	{d8}
    3bca:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    3bcc:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    3bd0:	movs	r3, #1
    3bd2:	b.n	3b20 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3bd4:	vmov.f64	d7, #96	; 0x3f000000  0.5
    3bd8:	mov	r0, r5
    3bda:	movs	r2, #10
    3bdc:	vadd.f64	d0, d0, d7
    3be0:	vcvt.u32.f64	s15, d0
    3be4:	vmov	r1, s15
    3be8:	bl	3a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3bec:	mov	r6, r0
    3bee:	b.n	3aec <Print::printFloat(double, unsigned char)+0x34>
    3bf0:	ldr	r3, [r0, #0]
    3bf2:	movs	r2, #3
    3bf4:	ldr	r1, [pc, #48]	; (3c28 <Print::printFloat(double, unsigned char)+0x170>)
    3bf6:	ldr	r3, [r3, #4]
    3bf8:	blx	r3
    3bfa:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3bfc:	b.n	3aec <Print::printFloat(double, unsigned char)+0x34>
    3bfe:	nop
    3c00:	.word	0xffffffff
    3c04:	.word	0x7fefffff
    3c08:	.word	0xe0000000
    3c0c:	.word	0x41efffff
    3c10:	.word	0xe0000000
    3c14:	.word	0xc1efffff
    3c18:	.word	0x9999999a
    3c1c:	.word	0x3fb99999
    3c20:	.word	0x2000069c
    3c24:	.word	0x20000698
    3c28:	.word	0x20000694

00003c2c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3c2c:	push	{r4, r5, r6, r7}
    3c2e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3c30:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3c32:	mov	r7, r6
    3c34:	b.n	3c38 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3c36:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3c38:	udiv	r3, r0, r2
    3c3c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c40:	add.w	r4, r0, #55	; 0x37
    3c44:	cmp	r0, #9
    3c46:	add.w	r0, r0, #48	; 0x30
    3c4a:	uxtb	r4, r4
    3c4c:	it	ls
    3c4e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3c50:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c52:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3c56:	cmp	r3, #0
    3c58:	bne.n	3c36 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3c5a:	adds	r2, r1, r5
    3c5c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3c5e:	cbz	r5, 3c74 <ultoa+0x48>
    3c60:	adds	r3, #1
		t = buf[j];
    3c62:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3c66:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3c68:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3c6a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3c6c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3c6e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3c72:	blt.n	3c60 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3c74:	mov	r0, r1
    3c76:	pop	{r4, r5, r6, r7}
    3c78:	bx	lr
    3c7a:	nop

00003c7c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    3c7c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    3c7e:	ldr	r3, [pc, #28]	; (3c9c <HardwareSerial::processSerialEvents()+0x20>)
    3c80:	ldrb	r4, [r3, #0]
    3c82:	cbz	r4, 3c98 <HardwareSerial::processSerialEvents()+0x1c>
    3c84:	ldr	r5, [pc, #24]	; (3ca0 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    3c86:	ldr.w	r3, [r5, #4]!
    3c8a:	cmp	r3, #0
    3c8c:	beq.n	3c86 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    3c8e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    3c90:	subs	r3, r4, #1
    3c92:	ands.w	r4, r3, #255	; 0xff
    3c96:	bne.n	3c86 <HardwareSerial::processSerialEvents()+0xa>
    3c98:	pop	{r3, r4, r5, pc}
    3c9a:	nop
    3c9c:	.word	0x2000176c
    3ca0:	.word	0x2000174c

00003ca4 <asin>:
    3ca4:	push	{r4, lr}
    3ca6:	vpush	{d8-d9}
    3caa:	vmov.f64	d8, d0
    3cae:	ldr	r4, [pc, #148]	; (3d44 <asin+0xa0>)
    3cb0:	sub	sp, #40	; 0x28
    3cb2:	bl	4080 <__ieee754_asin>
    3cb6:	ldrsb.w	r3, [r4]
    3cba:	vmov.f64	d9, d0
    3cbe:	adds	r3, #1
    3cc0:	beq.n	3d20 <asin+0x7c>
    3cc2:	vcmp.f64	d8, d8
    3cc6:	vmrs	APSR_nzcv, fpscr
    3cca:	bvs.n	3d20 <asin+0x7c>
    3ccc:	vmov.f64	d0, d8
    3cd0:	bl	4fd4 <fabs>
    3cd4:	vmov.f64	d7, #112	; 0x3f800000  1.0
    3cd8:	vcmpe.f64	d0, d7
    3cdc:	vmrs	APSR_nzcv, fpscr
    3ce0:	ble.n	3d20 <asin+0x7c>
    3ce2:	movs	r3, #1
    3ce4:	ldr	r2, [pc, #96]	; (3d48 <asin+0xa4>)
    3ce6:	str	r3, [sp, #0]
    3ce8:	ldr	r0, [pc, #96]	; (3d4c <asin+0xa8>)
    3cea:	str	r2, [sp, #4]
    3cec:	movs	r3, #0
    3cee:	str	r3, [sp, #32]
    3cf0:	vstr	d8, [sp, #16]
    3cf4:	vstr	d8, [sp, #8]
    3cf8:	bl	4ff8 <nan>
    3cfc:	ldrsb.w	r3, [r4]
    3d00:	cmp	r3, #2
    3d02:	vstr	d0, [sp, #24]
    3d06:	beq.n	3d2c <asin+0x88>
    3d08:	mov	r0, sp
    3d0a:	bl	4ff4 <matherr>
    3d0e:	cbz	r0, 3d2c <asin+0x88>
    3d10:	ldr	r3, [sp, #32]
    3d12:	cbnz	r3, 3d3a <asin+0x96>
    3d14:	vldr	d0, [sp, #24]
    3d18:	add	sp, #40	; 0x28
    3d1a:	vpop	{d8-d9}
    3d1e:	pop	{r4, pc}
    3d20:	vmov.f64	d0, d9
    3d24:	add	sp, #40	; 0x28
    3d26:	vpop	{d8-d9}
    3d2a:	pop	{r4, pc}
    3d2c:	bl	5260 <__errno>
    3d30:	movs	r3, #33	; 0x21
    3d32:	str	r3, [r0, #0]
    3d34:	ldr	r3, [sp, #32]
    3d36:	cmp	r3, #0
    3d38:	beq.n	3d14 <asin+0x70>
    3d3a:	bl	5260 <__errno>
    3d3e:	ldr	r3, [sp, #32]
    3d40:	str	r3, [r0, #0]
    3d42:	b.n	3d14 <asin+0x70>
    3d44:	.word	0x20000858
    3d48:	.word	0x200006a0
    3d4c:	.word	0x200001a4

00003d50 <atan2>:
    3d50:	b.w	42e8 <__ieee754_atan2>
    3d54:	movs	r0, r0
	...

00003d58 <pow>:
    3d58:	push	{r4, r5, r6, r7, lr}
    3d5a:	vpush	{d8-d11}
    3d5e:	vmov.f64	d10, d0
    3d62:	vmov.f64	d9, d1
    3d66:	ldr	r4, [pc, #600]	; (3fc0 <pow+0x268>)
    3d68:	sub	sp, #44	; 0x2c
    3d6a:	bl	44c8 <__ieee754_pow>
    3d6e:	ldrsb.w	r3, [r4]
    3d72:	vmov.f64	d8, d0
    3d76:	adds	r2, r3, #1
    3d78:	beq.n	3de4 <pow+0x8c>
    3d7a:	vcmp.f64	d9, d9
    3d7e:	vmrs	APSR_nzcv, fpscr
    3d82:	bvs.n	3de4 <pow+0x8c>
    3d84:	vcmp.f64	d10, d10
    3d88:	vmrs	APSR_nzcv, fpscr
    3d8c:	bvs.n	3e7c <pow+0x124>
    3d8e:	vldr	d11, [pc, #552]	; 3fb8 <pow+0x260>
    3d92:	vcmp.f64	d10, d11
    3d96:	vmrs	APSR_nzcv, fpscr
    3d9a:	bne.n	3df0 <pow+0x98>
    3d9c:	vcmp.f64	d9, d11
    3da0:	vmrs	APSR_nzcv, fpscr
    3da4:	bne.n	3dce <pow+0x76>
    3da6:	movs	r2, #1
    3da8:	ldr	r1, [pc, #536]	; (3fc4 <pow+0x26c>)
    3daa:	str	r2, [sp, #0]
    3dac:	movs	r2, #0
    3dae:	vstr	d10, [sp, #8]
    3db2:	vstr	d9, [sp, #16]
    3db6:	vstr	d11, [sp, #24]
    3dba:	str	r1, [sp, #4]
    3dbc:	str	r2, [sp, #32]
    3dbe:	cmp	r3, #0
    3dc0:	beq.n	3e5a <pow+0x102>
    3dc2:	vmov.f64	d0, #112	; 0x3f800000  1.0
    3dc6:	add	sp, #44	; 0x2c
    3dc8:	vpop	{d8-d11}
    3dcc:	pop	{r4, r5, r6, r7, pc}
    3dce:	vmov.f64	d0, d9
    3dd2:	bl	4fe4 <finite>
    3dd6:	cbz	r0, 3de4 <pow+0x8c>
    3dd8:	vcmpe.f64	d9, #0.0
    3ddc:	vmrs	APSR_nzcv, fpscr
    3de0:	bmi.w	3f24 <pow+0x1cc>
    3de4:	vmov.f64	d0, d8
    3de8:	add	sp, #44	; 0x2c
    3dea:	vpop	{d8-d11}
    3dee:	pop	{r4, r5, r6, r7, pc}
    3df0:	bl	4fe4 <finite>
    3df4:	mov	r5, r0
    3df6:	cmp	r0, #0
    3df8:	beq.n	3eaa <pow+0x152>
    3dfa:	vcmp.f64	d8, #0.0
    3dfe:	vmrs	APSR_nzcv, fpscr
    3e02:	mov.w	r6, #0
    3e06:	mov.w	r7, #0
    3e0a:	bne.n	3de4 <pow+0x8c>
    3e0c:	vmov.f64	d0, d10
    3e10:	bl	4fe4 <finite>
    3e14:	cmp	r0, #0
    3e16:	beq.n	3de4 <pow+0x8c>
    3e18:	vmov.f64	d0, d9
    3e1c:	bl	4fe4 <finite>
    3e20:	cmp	r0, #0
    3e22:	beq.n	3de4 <pow+0x8c>
    3e24:	ldr	r2, [pc, #412]	; (3fc4 <pow+0x26c>)
    3e26:	str	r2, [sp, #4]
    3e28:	vstr	d10, [sp, #8]
    3e2c:	vstr	d9, [sp, #16]
    3e30:	strd	r6, r7, [sp, #24]
    3e34:	movs	r1, #4
    3e36:	movs	r2, #0
    3e38:	ldrsb.w	r3, [r4]
    3e3c:	str	r1, [sp, #0]
    3e3e:	str	r2, [sp, #32]
    3e40:	cmp	r3, #2
    3e42:	beq.n	3e4c <pow+0xf4>
    3e44:	mov	r0, sp
    3e46:	bl	4ff4 <matherr>
    3e4a:	cbnz	r0, 3e64 <pow+0x10c>
    3e4c:	bl	5260 <__errno>
    3e50:	movs	r3, #34	; 0x22
    3e52:	str	r3, [r0, #0]
    3e54:	b.n	3e64 <pow+0x10c>
    3e56:	vstr	d11, [sp, #24]
    3e5a:	mov	r0, sp
    3e5c:	bl	4ff4 <matherr>
    3e60:	cmp	r0, #0
    3e62:	beq.n	3f4c <pow+0x1f4>
    3e64:	ldr	r3, [sp, #32]
    3e66:	cbz	r3, 3e70 <pow+0x118>
    3e68:	bl	5260 <__errno>
    3e6c:	ldr	r3, [sp, #32]
    3e6e:	str	r3, [r0, #0]
    3e70:	vldr	d0, [sp, #24]
    3e74:	add	sp, #44	; 0x2c
    3e76:	vpop	{d8-d11}
    3e7a:	pop	{r4, r5, r6, r7, pc}
    3e7c:	vcmp.f64	d9, #0.0
    3e80:	vmrs	APSR_nzcv, fpscr
    3e84:	bne.n	3de4 <pow+0x8c>
    3e86:	vmov.f64	d0, #112	; 0x3f800000  1.0
    3e8a:	movs	r2, #1
    3e8c:	ldr	r1, [pc, #308]	; (3fc4 <pow+0x26c>)
    3e8e:	str	r2, [sp, #0]
    3e90:	cmp	r3, #2
    3e92:	mov.w	r2, #0
    3e96:	vstr	d10, [sp, #8]
    3e9a:	vstr	d9, [sp, #16]
    3e9e:	str	r1, [sp, #4]
    3ea0:	str	r2, [sp, #32]
    3ea2:	vstr	d0, [sp, #24]
    3ea6:	bne.n	3e5a <pow+0x102>
    3ea8:	b.n	3de8 <pow+0x90>
    3eaa:	vmov.f64	d0, d10
    3eae:	bl	4fe4 <finite>
    3eb2:	cmp	r0, #0
    3eb4:	beq.n	3dfa <pow+0xa2>
    3eb6:	vmov.f64	d0, d9
    3eba:	bl	4fe4 <finite>
    3ebe:	cmp	r0, #0
    3ec0:	beq.n	3dfa <pow+0xa2>
    3ec2:	vcmp.f64	d8, d8
    3ec6:	vmrs	APSR_nzcv, fpscr
    3eca:	ldrsb.w	r3, [r4]
    3ece:	ldr	r2, [pc, #244]	; (3fc4 <pow+0x26c>)
    3ed0:	str	r5, [sp, #32]
    3ed2:	bvs.n	3f92 <pow+0x23a>
    3ed4:	movs	r1, #3
    3ed6:	vstr	d10, [sp, #8]
    3eda:	vstr	d9, [sp, #16]
    3ede:	stmia.w	sp, {r1, r2}
    3ee2:	cmp	r3, #0
    3ee4:	bne.n	3f56 <pow+0x1fe>
    3ee6:	vcmpe.f64	d10, #0.0
    3eea:	ldr	r3, [pc, #220]	; (3fc8 <pow+0x270>)
    3eec:	mov.w	r2, #3758096384	; 0xe0000000
    3ef0:	vmrs	APSR_nzcv, fpscr
    3ef4:	strd	r2, r3, [sp, #24]
    3ef8:	bpl.n	3e44 <pow+0xec>
    3efa:	vmov.f64	d7, #96	; 0x3f000000  0.5
    3efe:	vmul.f64	d9, d9, d7
    3f02:	vmov.f64	d0, d9
    3f06:	bl	5008 <rint>
    3f0a:	vcmp.f64	d9, d0
    3f0e:	vmrs	APSR_nzcv, fpscr
    3f12:	beq.n	3f8c <pow+0x234>
    3f14:	ldr	r1, [pc, #180]	; (3fcc <pow+0x274>)
    3f16:	ldrsb.w	r3, [r4]
    3f1a:	mov.w	r0, #3758096384	; 0xe0000000
    3f1e:	strd	r0, r1, [sp, #24]
    3f22:	b.n	3e40 <pow+0xe8>
    3f24:	ldr	r2, [pc, #156]	; (3fc4 <pow+0x26c>)
    3f26:	ldrsb.w	r3, [r4]
    3f2a:	str	r2, [sp, #4]
    3f2c:	movs	r1, #1
    3f2e:	movs	r2, #0
    3f30:	vstr	d10, [sp, #8]
    3f34:	vstr	d9, [sp, #16]
    3f38:	str	r1, [sp, #0]
    3f3a:	str	r2, [sp, #32]
    3f3c:	cmp	r3, #0
    3f3e:	beq.n	3e56 <pow+0xfe>
    3f40:	ldr	r1, [pc, #140]	; (3fd0 <pow+0x278>)
    3f42:	movs	r0, #0
    3f44:	cmp	r3, #2
    3f46:	strd	r0, r1, [sp, #24]
    3f4a:	bne.n	3e5a <pow+0x102>
    3f4c:	bl	5260 <__errno>
    3f50:	movs	r3, #33	; 0x21
    3f52:	str	r3, [r0, #0]
    3f54:	b.n	3e64 <pow+0x10c>
    3f56:	ldr	r1, [pc, #124]	; (3fd4 <pow+0x27c>)
    3f58:	vcmpe.f64	d10, #0.0
    3f5c:	movs	r0, #0
    3f5e:	vmrs	APSR_nzcv, fpscr
    3f62:	strd	r0, r1, [sp, #24]
    3f66:	bpl.w	3e40 <pow+0xe8>
    3f6a:	vmov.f64	d7, #96	; 0x3f000000  0.5
    3f6e:	vmul.f64	d9, d9, d7
    3f72:	vmov.f64	d0, d9
    3f76:	bl	5008 <rint>
    3f7a:	vcmp.f64	d9, d0
    3f7e:	vmrs	APSR_nzcv, fpscr
    3f82:	beq.n	3f8c <pow+0x234>
    3f84:	ldr	r3, [pc, #72]	; (3fd0 <pow+0x278>)
    3f86:	movs	r2, #0
    3f88:	strd	r2, r3, [sp, #24]
    3f8c:	ldrsb.w	r3, [r4]
    3f90:	b.n	3e40 <pow+0xe8>
    3f92:	movs	r1, #1
    3f94:	vstr	d10, [sp, #8]
    3f98:	vstr	d9, [sp, #16]
    3f9c:	stmia.w	sp, {r1, r2}
    3fa0:	cmp	r3, #0
    3fa2:	beq.w	3e56 <pow+0xfe>
    3fa6:	vdiv.f64	d7, d11, d11
    3faa:	cmp	r3, #2
    3fac:	vstr	d7, [sp, #24]
    3fb0:	beq.n	3f4c <pow+0x1f4>
    3fb2:	b.n	3e5a <pow+0x102>
    3fb4:	nop.w
	...
    3fc0:	.word	0x20000858
    3fc4:	.word	0x200006a8
    3fc8:	.word	0x47efffff
    3fcc:	.word	0xc7efffff
    3fd0:	.word	0xfff00000
    3fd4:	.word	0x7ff00000

00003fd8 <sqrt>:
    3fd8:	push	{lr}
    3fda:	vpush	{d8}
    3fde:	vmov.f64	d8, d0
    3fe2:	sub	sp, #44	; 0x2c
    3fe4:	bl	4c4c <__ieee754_sqrt>
    3fe8:	ldr	r3, [pc, #140]	; (4078 <sqrt+0xa0>)
    3fea:	ldrsb.w	r3, [r3]
    3fee:	adds	r2, r3, #1
    3ff0:	beq.n	400a <sqrt+0x32>
    3ff2:	vcmp.f64	d8, d8
    3ff6:	vmrs	APSR_nzcv, fpscr
    3ffa:	bvs.n	400a <sqrt+0x32>
    3ffc:	vldr	d7, [pc, #112]	; 4070 <sqrt+0x98>
    4000:	vcmpe.f64	d8, d7
    4004:	vmrs	APSR_nzcv, fpscr
    4008:	bmi.n	4014 <sqrt+0x3c>
    400a:	add	sp, #44	; 0x2c
    400c:	vpop	{d8}
    4010:	ldr.w	pc, [sp], #4
    4014:	movs	r2, #1
    4016:	ldr	r1, [pc, #100]	; (407c <sqrt+0xa4>)
    4018:	str	r2, [sp, #0]
    401a:	movs	r2, #0
    401c:	vstr	d8, [sp, #16]
    4020:	vstr	d8, [sp, #8]
    4024:	str	r1, [sp, #4]
    4026:	str	r2, [sp, #32]
    4028:	cbz	r3, 4050 <sqrt+0x78>
    402a:	vdiv.f64	d6, d7, d7
    402e:	cmp	r3, #2
    4030:	vstr	d6, [sp, #24]
    4034:	bne.n	4054 <sqrt+0x7c>
    4036:	bl	5260 <__errno>
    403a:	movs	r3, #33	; 0x21
    403c:	str	r3, [r0, #0]
    403e:	ldr	r3, [sp, #32]
    4040:	cbnz	r3, 4060 <sqrt+0x88>
    4042:	vldr	d0, [sp, #24]
    4046:	add	sp, #44	; 0x2c
    4048:	vpop	{d8}
    404c:	ldr.w	pc, [sp], #4
    4050:	vstr	d7, [sp, #24]
    4054:	mov	r0, sp
    4056:	bl	4ff4 <matherr>
    405a:	cmp	r0, #0
    405c:	bne.n	403e <sqrt+0x66>
    405e:	b.n	4036 <sqrt+0x5e>
    4060:	bl	5260 <__errno>
    4064:	ldr	r3, [sp, #32]
    4066:	str	r3, [r0, #0]
    4068:	b.n	4042 <sqrt+0x6a>
    406a:	nop
    406c:	nop.w
	...
    4078:	.word	0x20000858
    407c:	.word	0x200006ac

00004080 <__ieee754_asin>:
    4080:	push	{r4, r5, lr}
    4082:	vmov	r5, s1
    4086:	vpush	{d8-d10}
    408a:	ldr	r3, [pc, #588]	; (42d8 <__ieee754_asin+0x258>)
    408c:	bic.w	r4, r5, #2147483648	; 0x80000000
    4090:	cmp	r4, r3
    4092:	sub	sp, #12
    4094:	ble.n	40b8 <__ieee754_asin+0x38>
    4096:	add.w	r4, r4, #3221225472	; 0xc0000000
    409a:	vmov	r3, s0
    409e:	add.w	r4, r4, #1048576	; 0x100000
    40a2:	orrs	r3, r4
    40a4:	beq.w	41b8 <__ieee754_asin+0x138>
    40a8:	vsub.f64	d7, d0, d0
    40ac:	vdiv.f64	d0, d7, d7
    40b0:	add	sp, #12
    40b2:	vpop	{d8-d10}
    40b6:	pop	{r4, r5, pc}
    40b8:	ldr	r3, [pc, #544]	; (42dc <__ieee754_asin+0x25c>)
    40ba:	cmp	r4, r3
    40bc:	bgt.n	40dc <__ieee754_asin+0x5c>
    40be:	cmp.w	r4, #1044381696	; 0x3e400000
    40c2:	bge.w	41f6 <__ieee754_asin+0x176>
    40c6:	vmov.f64	d6, #112	; 0x3f800000  1.0
    40ca:	vldr	d7, [pc, #404]	; 4260 <__ieee754_asin+0x1e0>
    40ce:	vadd.f64	d7, d0, d7
    40d2:	vcmpe.f64	d7, d6
    40d6:	vmrs	APSR_nzcv, fpscr
    40da:	bgt.n	40b0 <__ieee754_asin+0x30>
    40dc:	bl	4fd4 <fabs>
    40e0:	vmov.f64	d7, #112	; 0x3f800000  1.0
    40e4:	vmov.f64	d6, #96	; 0x3f000000  0.5
    40e8:	vsub.f64	d0, d7, d0
    40ec:	vldr	d5, [pc, #376]	; 4268 <__ieee754_asin+0x1e8>
    40f0:	vmul.f64	d8, d0, d6
    40f4:	vmov.f64	d0, d8
    40f8:	vldr	d6, [pc, #372]	; 4270 <__ieee754_asin+0x1f0>
    40fc:	vldr	d4, [pc, #376]	; 4278 <__ieee754_asin+0x1f8>
    4100:	vfma.f64	d6, d8, d5
    4104:	vldr	d9, [pc, #376]	; 4280 <__ieee754_asin+0x200>
    4108:	vfma.f64	d4, d8, d6
    410c:	vldr	d5, [pc, #376]	; 4288 <__ieee754_asin+0x208>
    4110:	vldr	d6, [pc, #380]	; 4290 <__ieee754_asin+0x210>
    4114:	vfma.f64	d5, d8, d4
    4118:	vldr	d3, [pc, #380]	; 4298 <__ieee754_asin+0x218>
    411c:	vfma.f64	d6, d8, d5
    4120:	vfma.f64	d9, d8, d6
    4124:	vldr	d4, [pc, #376]	; 42a0 <__ieee754_asin+0x220>
    4128:	vmul.f64	d9, d9, d8
    412c:	vldr	d5, [pc, #376]	; 42a8 <__ieee754_asin+0x228>
    4130:	vfma.f64	d4, d8, d3
    4134:	vldr	d6, [pc, #376]	; 42b0 <__ieee754_asin+0x230>
    4138:	vfma.f64	d5, d8, d4
    413c:	vfma.f64	d6, d8, d5
    4140:	vfma.f64	d7, d8, d6
    4144:	vmov.f64	d10, d7
    4148:	bl	4c4c <__ieee754_sqrt>
    414c:	ldr	r3, [pc, #400]	; (42e0 <__ieee754_asin+0x260>)
    414e:	cmp	r4, r3
    4150:	vstr	d0, [sp]
    4154:	bgt.n	41d4 <__ieee754_asin+0x154>
    4156:	vmov.f64	d5, #0	; 0x40000000  2.0
    415a:	vdiv.f64	d4, d9, d10
    415e:	ldrd	r2, r3, [sp]
    4162:	vldr	d6, [sp]
    4166:	vldr	d7, [pc, #336]	; 42b8 <__ieee754_asin+0x238>
    416a:	vadd.f64	d2, d6, d6
    416e:	vldr	d1, [sp]
    4172:	movs	r2, #0
    4174:	vldr	d0, [pc, #328]	; 42c0 <__ieee754_asin+0x240>
    4178:	vmov	d6, r2, r3
    417c:	vneg.f64	d3, d6
    4180:	vfma.f64	d8, d3, d6
    4184:	vadd.f64	d6, d1, d6
    4188:	vmov.f64	d1, d7
    418c:	vfma.f64	d1, d3, d5
    4190:	vmov.f64	d3, d1
    4194:	vdiv.f64	d1, d8, d6
    4198:	vfms.f64	d0, d1, d5
    419c:	vfnms.f64	d0, d4, d2
    41a0:	vsub.f64	d0, d0, d3
    41a4:	vsub.f64	d0, d7, d0
    41a8:	cmp	r5, #0
    41aa:	it	le
    41ac:	vnegle.f64	d0, d0
    41b0:	add	sp, #12
    41b2:	vpop	{d8-d10}
    41b6:	pop	{r4, r5, pc}
    41b8:	vldr	d6, [pc, #268]	; 42c8 <__ieee754_asin+0x248>
    41bc:	vldr	d7, [pc, #256]	; 42c0 <__ieee754_asin+0x240>
    41c0:	vmul.f64	d7, d0, d7
    41c4:	vfma.f64	d7, d0, d6
    41c8:	vmov.f64	d0, d7
    41cc:	add	sp, #12
    41ce:	vpop	{d8-d10}
    41d2:	pop	{r4, r5, pc}
    41d4:	vldr	d5, [sp]
    41d8:	vdiv.f64	d7, d9, d10
    41dc:	vmov.f64	d6, #0	; 0x40000000  2.0
    41e0:	vfma.f64	d5, d5, d7
    41e4:	vldr	d0, [pc, #232]	; 42d0 <__ieee754_asin+0x250>
    41e8:	vldr	d7, [pc, #220]	; 42c8 <__ieee754_asin+0x248>
    41ec:	vfma.f64	d0, d5, d6
    41f0:	vsub.f64	d0, d7, d0
    41f4:	b.n	41a8 <__ieee754_asin+0x128>
    41f6:	vldr	d4, [pc, #112]	; 4268 <__ieee754_asin+0x1e8>
    41fa:	vmul.f64	d7, d0, d0
    41fe:	vmov.f64	d2, #112	; 0x3f800000  1.0
    4202:	vldr	d5, [pc, #108]	; 4270 <__ieee754_asin+0x1f0>
    4206:	vldr	d6, [pc, #112]	; 4278 <__ieee754_asin+0x1f8>
    420a:	vfma.f64	d5, d7, d4
    420e:	vldr	d4, [pc, #120]	; 4288 <__ieee754_asin+0x208>
    4212:	vfma.f64	d6, d7, d5
    4216:	vldr	d5, [pc, #120]	; 4290 <__ieee754_asin+0x210>
    421a:	vfma.f64	d4, d7, d6
    421e:	vldr	d6, [pc, #96]	; 4280 <__ieee754_asin+0x200>
    4222:	vfma.f64	d5, d7, d4
    4226:	vldr	d1, [pc, #112]	; 4298 <__ieee754_asin+0x218>
    422a:	vfma.f64	d6, d7, d5
    422e:	vmul.f64	d6, d6, d7
    4232:	vldr	d3, [pc, #108]	; 42a0 <__ieee754_asin+0x220>
    4236:	vldr	d4, [pc, #112]	; 42a8 <__ieee754_asin+0x228>
    423a:	vfma.f64	d3, d7, d1
    423e:	vldr	d5, [pc, #112]	; 42b0 <__ieee754_asin+0x230>
    4242:	vfma.f64	d4, d7, d3
    4246:	vfma.f64	d5, d7, d4
    424a:	vfma.f64	d2, d7, d5
    424e:	vdiv.f64	d5, d6, d2
    4252:	vfma.f64	d0, d0, d5
    4256:	add	sp, #12
    4258:	vpop	{d8-d10}
    425c:	pop	{r4, r5, pc}
    425e:	nop
    4260:	.word	0x8800759c
    4264:	.word	0x7e37e43c
    4268:	.word	0x0dfdf709
    426c:	.word	0x3f023de1
    4270:	.word	0x7501b288
    4274:	.word	0x3f49efe0
    4278:	.word	0xb5688f3b
    427c:	.word	0xbfa48228
    4280:	.word	0x55555555
    4284:	.word	0x3fc55555
    4288:	.word	0x0e884455
    428c:	.word	0x3fc9c155
    4290:	.word	0x03eb6f7d
    4294:	.word	0xbfd4d612
    4298:	.word	0xb12e9282
    429c:	.word	0x3fb3b8c5
    42a0:	.word	0x1b8d0159
    42a4:	.word	0xbfe6066c
    42a8:	.word	0x9c598ac8
    42ac:	.word	0x40002ae5
    42b0:	.word	0x1c8a2d4b
    42b4:	.word	0xc0033a27
    42b8:	.word	0x54442d18
    42bc:	.word	0x3fe921fb
    42c0:	.word	0x33145c07
    42c4:	.word	0x3c91a626
    42c8:	.word	0x54442d18
    42cc:	.word	0x3ff921fb
    42d0:	.word	0x33145c07
    42d4:	.word	0xbc91a626
    42d8:	.word	0x3fefffff
    42dc:	.word	0x3fdfffff
    42e0:	.word	0x3fef3332
    42e4:	.word	0x00000000

000042e8 <__ieee754_atan2>:
    42e8:	push	{r4, r5, r6, r7, lr}
    42ea:	sub	sp, #20
    42ec:	vstr	d1, [sp, #8]
    42f0:	ldr	r2, [sp, #8]
    42f2:	ldr	r0, [sp, #12]
    42f4:	ldr	r1, [pc, #456]	; (44c0 <__ieee754_atan2+0x1d8>)
    42f6:	negs	r3, r2
    42f8:	vstr	d0, [sp]
    42fc:	orrs	r3, r2
    42fe:	bic.w	r5, r0, #2147483648	; 0x80000000
    4302:	orr.w	r3, r5, r3, lsr #31
    4306:	cmp	r3, r1
    4308:	ldmia.w	sp, {r4, r7}
    430c:	bhi.n	4394 <__ieee754_atan2+0xac>
    430e:	negs	r3, r4
    4310:	orrs	r3, r4
    4312:	bic.w	lr, r7, #2147483648	; 0x80000000
    4316:	orr.w	r3, lr, r3, lsr #31
    431a:	cmp	r3, r1
    431c:	bhi.n	4394 <__ieee754_atan2+0xac>
    431e:	add.w	r3, r0, #3221225472	; 0xc0000000
    4322:	add.w	r3, r3, #1048576	; 0x100000
    4326:	orrs	r3, r2
    4328:	beq.n	43d2 <__ieee754_atan2+0xea>
    432a:	asrs	r6, r0, #30
    432c:	and.w	r6, r6, #2
    4330:	orrs.w	r3, r4, lr
    4334:	orr.w	r6, r6, r7, lsr #31
    4338:	beq.n	43a4 <__ieee754_atan2+0xbc>
    433a:	orrs.w	r3, r2, r5
    433e:	beq.n	43be <__ieee754_atan2+0xd6>
    4340:	cmp	r5, r1
    4342:	beq.n	43ea <__ieee754_atan2+0x102>
    4344:	cmp	lr, r1
    4346:	beq.n	43be <__ieee754_atan2+0xd6>
    4348:	rsb	r5, r5, lr
    434c:	asrs	r5, r5, #20
    434e:	cmp	r5, #60	; 0x3c
    4350:	bgt.n	43dc <__ieee754_atan2+0xf4>
    4352:	cmp	r0, #0
    4354:	blt.n	442e <__ieee754_atan2+0x146>
    4356:	ldrd	r2, r3, [sp]
    435a:	vldr	d0, [sp, #8]
    435e:	vmov	d7, r2, r3
    4362:	vdiv.f64	d0, d7, d0
    4366:	bl	4fd4 <fabs>
    436a:	bl	4dd0 <atan>
    436e:	vmov	r2, r3, d0
    4372:	cmp	r6, #1
    4374:	beq.n	4424 <__ieee754_atan2+0x13c>
    4376:	cmp	r6, #2
    4378:	beq.n	440e <__ieee754_atan2+0x126>
    437a:	cmp	r6, #0
    437c:	beq.n	4408 <__ieee754_atan2+0x120>
    437e:	vldr	d7, [pc, #232]	; 4468 <__ieee754_atan2+0x180>
    4382:	vldr	d6, [pc, #236]	; 4470 <__ieee754_atan2+0x188>
    4386:	vmov	d5, r2, r3
    438a:	vsub.f64	d7, d5, d7
    438e:	vsub.f64	d0, d7, d6
    4392:	b.n	43a0 <__ieee754_atan2+0xb8>
    4394:	vldr	d7, [sp, #8]
    4398:	vldr	d6, [sp]
    439c:	vadd.f64	d0, d7, d6
    43a0:	add	sp, #20
    43a2:	pop	{r4, r5, r6, r7, pc}
    43a4:	cmp	r6, #2
    43a6:	beq.n	43e4 <__ieee754_atan2+0xfc>
    43a8:	vldr	d0, [pc, #204]	; 4478 <__ieee754_atan2+0x190>
    43ac:	vldr	d7, [sp]
    43b0:	cmp	r6, #3
    43b2:	it	eq
    43b4:	vmoveq.f64	d7, d0
    43b8:	vmov.f64	d0, d7
    43bc:	b.n	43a0 <__ieee754_atan2+0xb8>
    43be:	vldr	d7, [pc, #192]	; 4480 <__ieee754_atan2+0x198>
    43c2:	vldr	d0, [pc, #196]	; 4488 <__ieee754_atan2+0x1a0>
    43c6:	cmp	r7, #0
    43c8:	it	ge
    43ca:	vmovge.f64	d0, d7
    43ce:	add	sp, #20
    43d0:	pop	{r4, r5, r6, r7, pc}
    43d2:	add	sp, #20
    43d4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    43d8:	b.w	4dd0 <atan>
    43dc:	add	r3, pc, #160	; (adr r3, 4480 <__ieee754_atan2+0x198>)
    43de:	ldrd	r2, r3, [r3]
    43e2:	b.n	4372 <__ieee754_atan2+0x8a>
    43e4:	vldr	d0, [pc, #136]	; 4470 <__ieee754_atan2+0x188>
    43e8:	b.n	43a0 <__ieee754_atan2+0xb8>
    43ea:	cmp	lr, r5
    43ec:	beq.n	4438 <__ieee754_atan2+0x150>
    43ee:	cmp	r6, #2
    43f0:	beq.n	43e4 <__ieee754_atan2+0xfc>
    43f2:	cmp	r6, #3
    43f4:	beq.n	4452 <__ieee754_atan2+0x16a>
    43f6:	vldr	d7, [pc, #152]	; 4490 <__ieee754_atan2+0x1a8>
    43fa:	vldr	d0, [pc, #156]	; 4498 <__ieee754_atan2+0x1b0>
    43fe:	cmp	r6, #1
    4400:	it	eq
    4402:	vmoveq.f64	d0, d7
    4406:	b.n	43a0 <__ieee754_atan2+0xb8>
    4408:	vmov	d0, r2, r3
    440c:	b.n	43a0 <__ieee754_atan2+0xb8>
    440e:	vldr	d7, [pc, #88]	; 4468 <__ieee754_atan2+0x180>
    4412:	vldr	d6, [pc, #92]	; 4470 <__ieee754_atan2+0x188>
    4416:	vmov	d5, r2, r3
    441a:	vsub.f64	d7, d5, d7
    441e:	vsub.f64	d0, d6, d7
    4422:	b.n	43a0 <__ieee754_atan2+0xb8>
    4424:	add.w	r3, r3, #2147483648	; 0x80000000
    4428:	vmov	d0, r2, r3
    442c:	b.n	43a0 <__ieee754_atan2+0xb8>
    442e:	adds	r5, #60	; 0x3c
    4430:	bge.n	4356 <__ieee754_atan2+0x6e>
    4432:	movs	r2, #0
    4434:	movs	r3, #0
    4436:	b.n	4372 <__ieee754_atan2+0x8a>
    4438:	cmp	r6, #2
    443a:	beq.n	445e <__ieee754_atan2+0x176>
    443c:	cmp	r6, #3
    443e:	beq.n	4458 <__ieee754_atan2+0x170>
    4440:	vldr	d7, [pc, #92]	; 44a0 <__ieee754_atan2+0x1b8>
    4444:	vldr	d0, [pc, #96]	; 44a8 <__ieee754_atan2+0x1c0>
    4448:	cmp	r6, #1
    444a:	it	eq
    444c:	vmoveq.f64	d0, d7
    4450:	b.n	43a0 <__ieee754_atan2+0xb8>
    4452:	vldr	d0, [pc, #36]	; 4478 <__ieee754_atan2+0x190>
    4456:	b.n	43a0 <__ieee754_atan2+0xb8>
    4458:	vldr	d0, [pc, #84]	; 44b0 <__ieee754_atan2+0x1c8>
    445c:	b.n	43a0 <__ieee754_atan2+0xb8>
    445e:	vldr	d0, [pc, #88]	; 44b8 <__ieee754_atan2+0x1d0>
    4462:	b.n	43a0 <__ieee754_atan2+0xb8>
    4464:	nop.w
    4468:	.word	0x33145c07
    446c:	.word	0x3ca1a626
    4470:	.word	0x54442d18
    4474:	.word	0x400921fb
    4478:	.word	0x54442d18
    447c:	.word	0xc00921fb
    4480:	.word	0x54442d18
    4484:	.word	0x3ff921fb
    4488:	.word	0x54442d18
    448c:	.word	0xbff921fb
    4490:	.word	0x00000000
    4494:	.word	0x80000000
	...
    44a0:	.word	0x54442d18
    44a4:	.word	0xbfe921fb
    44a8:	.word	0x54442d18
    44ac:	.word	0x3fe921fb
    44b0:	.word	0x7f3321d2
    44b4:	.word	0xc002d97c
    44b8:	.word	0x7f3321d2
    44bc:	.word	0x4002d97c
    44c0:	.word	0x7ff00000
    44c4:	.word	0x00000000

000044c8 <__ieee754_pow>:
    44c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44cc:	vmov	r0, r1, d1
    44d0:	vpush	{d8-d11}
    44d4:	bic.w	r5, r1, #2147483648	; 0x80000000
    44d8:	orrs.w	r4, r5, r0
    44dc:	sub	sp, #28
    44de:	beq.n	4556 <__ieee754_pow+0x8e>
    44e0:	vmov	r2, r3, d0
    44e4:	ldr	r7, [pc, #424]	; (4690 <__ieee754_pow+0x1c8>)
    44e6:	bic.w	r4, r3, #2147483648	; 0x80000000
    44ea:	cmp	r4, r7
    44ec:	vmov	sl, s0
    44f0:	mov	r9, r3
    44f2:	bgt.n	4548 <__ieee754_pow+0x80>
    44f4:	mov	r8, r1
    44f6:	vmov	r6, s2
    44fa:	beq.n	4546 <__ieee754_pow+0x7e>
    44fc:	cmp	r5, r7
    44fe:	bgt.n	4548 <__ieee754_pow+0x80>
    4500:	ldr	r7, [pc, #396]	; (4690 <__ieee754_pow+0x1c8>)
    4502:	cmp	r5, r7
    4504:	beq.n	45fc <__ieee754_pow+0x134>
    4506:	cmp.w	r9, #0
    450a:	blt.n	4602 <__ieee754_pow+0x13a>
    450c:	mov.w	fp, #0
    4510:	cbnz	r6, 457c <__ieee754_pow+0xb4>
    4512:	ldr	r6, [pc, #380]	; (4690 <__ieee754_pow+0x1c8>)
    4514:	cmp	r5, r6
    4516:	beq.w	463a <__ieee754_pow+0x172>
    451a:	ldr	r6, [pc, #376]	; (4694 <__ieee754_pow+0x1cc>)
    451c:	cmp	r5, r6
    451e:	beq.n	45ee <__ieee754_pow+0x126>
    4520:	cmp.w	r8, #1073741824	; 0x40000000
    4524:	beq.w	49d6 <__ieee754_pow+0x50e>
    4528:	ldr	r6, [pc, #364]	; (4698 <__ieee754_pow+0x1d0>)
    452a:	cmp	r8, r6
    452c:	bne.n	457c <__ieee754_pow+0xb4>
    452e:	cmp.w	r9, #0
    4532:	blt.n	457c <__ieee754_pow+0xb4>
    4534:	vmov	d0, r2, r3
    4538:	add	sp, #28
    453a:	vpop	{d8-d11}
    453e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4542:	b.w	4c4c <__ieee754_sqrt>
    4546:	cbz	r2, 4564 <__ieee754_pow+0x9c>
    4548:	add.w	r4, r4, #3221225472	; 0xc0000000
    454c:	add.w	r4, r4, #1048576	; 0x100000
    4550:	orrs.w	r3, r4, sl
    4554:	bne.n	4568 <__ieee754_pow+0xa0>
    4556:	vmov.f64	d0, #112	; 0x3f800000  1.0
    455a:	add	sp, #28
    455c:	vpop	{d8-d11}
    4560:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4564:	cmp	r5, r4
    4566:	ble.n	4500 <__ieee754_pow+0x38>
    4568:	ldr	r0, [pc, #304]	; (469c <__ieee754_pow+0x1d4>)
    456a:	add	sp, #28
    456c:	vpop	{d8-d11}
    4570:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4574:	b.w	4ff8 <nan>
    4578:	mov.w	fp, #0
    457c:	mov	r6, r2
    457e:	mov	r7, r3
    4580:	vmov	d0, r6, r7
    4584:	strd	r0, r1, [sp, #8]
    4588:	bl	4fd4 <fabs>
    458c:	vstr	d0, [sp]
    4590:	cmp.w	sl, #0
    4594:	beq.n	45cc <__ieee754_pow+0x104>
    4596:	mov.w	r9, r9, lsr #31
    459a:	add.w	r9, r9, #4294967295
    459e:	orrs.w	r3, fp, r9
    45a2:	beq.n	4662 <__ieee754_pow+0x19a>
    45a4:	ldr	r3, [pc, #248]	; (46a0 <__ieee754_pow+0x1d8>)
    45a6:	cmp	r5, r3
    45a8:	ble.w	46ac <__ieee754_pow+0x1e4>
    45ac:	add.w	r3, r3, #34603008	; 0x2100000
    45b0:	cmp	r5, r3
    45b2:	ble.w	4aea <__ieee754_pow+0x622>
    45b6:	ldr	r3, [pc, #236]	; (46a4 <__ieee754_pow+0x1dc>)
    45b8:	cmp	r4, r3
    45ba:	ble.n	4670 <__ieee754_pow+0x1a8>
    45bc:	cmp.w	r8, #0
    45c0:	ble.n	4676 <__ieee754_pow+0x1ae>
    45c2:	vldr	d0, [pc, #188]	; 4680 <__ieee754_pow+0x1b8>
    45c6:	vmul.f64	d0, d0, d0
    45ca:	b.n	455a <__ieee754_pow+0x92>
    45cc:	cbz	r4, 45d8 <__ieee754_pow+0x110>
    45ce:	ldr	r3, [pc, #196]	; (4694 <__ieee754_pow+0x1cc>)
    45d0:	bic.w	r2, r9, #3221225472	; 0xc0000000
    45d4:	cmp	r2, r3
    45d6:	bne.n	4596 <__ieee754_pow+0xce>
    45d8:	cmp.w	r8, #0
    45dc:	blt.w	4ad8 <__ieee754_pow+0x610>
    45e0:	cmp.w	r9, #0
    45e4:	blt.w	49b4 <__ieee754_pow+0x4ec>
    45e8:	vldr	d0, [sp]
    45ec:	b.n	455a <__ieee754_pow+0x92>
    45ee:	cmp.w	r8, #0
    45f2:	blt.w	4b6e <__ieee754_pow+0x6a6>
    45f6:	vmov	d0, r2, r3
    45fa:	b.n	455a <__ieee754_pow+0x92>
    45fc:	cmp	r6, #0
    45fe:	beq.n	4506 <__ieee754_pow+0x3e>
    4600:	b.n	4548 <__ieee754_pow+0x80>
    4602:	ldr	r7, [pc, #164]	; (46a8 <__ieee754_pow+0x1e0>)
    4604:	cmp	r5, r7
    4606:	bgt.n	465c <__ieee754_pow+0x194>
    4608:	sub.w	r7, r7, #55574528	; 0x3500000
    460c:	cmp	r5, r7
    460e:	ble.w	450c <__ieee754_pow+0x44>
    4612:	asrs	r7, r5, #20
    4614:	subw	r7, r7, #1023	; 0x3ff
    4618:	cmp	r7, #20
    461a:	ble.w	4b8a <__ieee754_pow+0x6c2>
    461e:	rsb	r7, r7, #52	; 0x34
    4622:	lsr.w	lr, r6, r7
    4626:	lsl.w	r7, lr, r7
    462a:	cmp	r6, r7
    462c:	bne.w	450c <__ieee754_pow+0x44>
    4630:	and.w	lr, lr, #1
    4634:	rsb	fp, lr, #2
    4638:	b.n	4510 <__ieee754_pow+0x48>
    463a:	add.w	r3, r4, #3221225472	; 0xc0000000
    463e:	add.w	r3, r3, #1048576	; 0x100000
    4642:	orrs.w	r3, r3, sl
    4646:	beq.n	4556 <__ieee754_pow+0x8e>
    4648:	ldr	r3, [pc, #88]	; (46a4 <__ieee754_pow+0x1dc>)
    464a:	cmp	r4, r3
    464c:	ble.w	4ac6 <__ieee754_pow+0x5fe>
    4650:	cmp.w	r8, #0
    4654:	blt.n	4676 <__ieee754_pow+0x1ae>
    4656:	vmov	d0, r0, r1
    465a:	b.n	455a <__ieee754_pow+0x92>
    465c:	mov.w	fp, #2
    4660:	b.n	4510 <__ieee754_pow+0x48>
    4662:	vmov	d7, r6, r7
    4666:	vsub.f64	d7, d7, d7
    466a:	vdiv.f64	d0, d7, d7
    466e:	b.n	455a <__ieee754_pow+0x92>
    4670:	cmp.w	r8, #0
    4674:	blt.n	45c2 <__ieee754_pow+0xfa>
    4676:	vldr	d0, [pc, #16]	; 4688 <__ieee754_pow+0x1c0>
    467a:	b.n	455a <__ieee754_pow+0x92>
    467c:	nop.w
    4680:	.word	0x8800759c
    4684:	.word	0x7e37e43c
	...
    4690:	.word	0x7ff00000
    4694:	.word	0x3ff00000
    4698:	.word	0x3fe00000
    469c:	.word	0x200001a4
    46a0:	.word	0x41e00000
    46a4:	.word	0x3fefffff
    46a8:	.word	0x433fffff
    46ac:	cmp.w	r4, #1048576	; 0x100000
    46b0:	bge.w	4b6a <__ieee754_pow+0x6a2>
    46b4:	vldr	d6, [sp]
    46b8:	vldr	d7, [pc, #804]	; 49e0 <__ieee754_pow+0x518>
    46bc:	vmul.f64	d7, d6, d7
    46c0:	vstr	d7, [sp]
    46c4:	ldr	r4, [sp, #4]
    46c6:	mvn.w	r6, #52	; 0x34
    46ca:	ldr	r2, [pc, #948]	; (4a80 <__ieee754_pow+0x5b8>)
    46cc:	asrs	r3, r4, #20
    46ce:	ubfx	r4, r4, #0, #20
    46d2:	subw	r3, r3, #1023	; 0x3ff
    46d6:	orr.w	r1, r4, #1069547520	; 0x3fc00000
    46da:	cmp	r4, r2
    46dc:	add	r6, r3
    46de:	orr.w	r1, r1, #3145728	; 0x300000
    46e2:	ble.w	4b5a <__ieee754_pow+0x692>
    46e6:	ldr	r3, [pc, #924]	; (4a84 <__ieee754_pow+0x5bc>)
    46e8:	cmp	r4, r3
    46ea:	ble.w	4bc6 <__ieee754_pow+0x6fe>
    46ee:	vmov.f64	d7, #112	; 0x3f800000  1.0
    46f2:	vldr	d3, [pc, #756]	; 49e8 <__ieee754_pow+0x520>
    46f6:	adds	r6, #1
    46f8:	sub.w	r1, r1, #1048576	; 0x100000
    46fc:	movs	r5, #0
    46fe:	vmov.f64	d0, d3
    4702:	ldrd	r2, r3, [sp]
    4706:	vmov.f64	d4, #112	; 0x3f800000  1.0
    470a:	mov	r3, r1
    470c:	vmov	d1, r2, r3
    4710:	asrs	r4, r1, #1
    4712:	vadd.f64	d6, d1, d7
    4716:	vsub.f64	d2, d1, d7
    471a:	vdiv.f64	d5, d4, d6
    471e:	vmul.f64	d6, d2, d5
    4722:	vstr	d6, [sp]
    4726:	ldrd	r2, r3, [sp]
    472a:	orr.w	r4, r4, #536870912	; 0x20000000
    472e:	add.w	r4, r4, #524288	; 0x80000
    4732:	movs	r2, #0
    4734:	movs	r0, #0
    4736:	adds	r1, r4, r5
    4738:	vmov	d4, r2, r3
    473c:	vmov	d6, r0, r1
    4740:	vneg.f64	d10, d4
    4744:	vsub.f64	d7, d6, d7
    4748:	vfma.f64	d2, d10, d6
    474c:	vsub.f64	d7, d1, d7
    4750:	vmov.f64	d6, d2
    4754:	vfma.f64	d6, d10, d7
    4758:	vldr	d7, [sp]
    475c:	vmul.f64	d2, d6, d5
    4760:	vldr	d6, [sp]
    4764:	vadd.f64	d7, d7, d4
    4768:	vmul.f64	d11, d6, d6
    476c:	vldr	d9, [pc, #640]	; 49f0 <__ieee754_pow+0x528>
    4770:	vmul.f64	d6, d7, d2
    4774:	vldr	d8, [pc, #640]	; 49f8 <__ieee754_pow+0x530>
    4778:	vldr	d1, [pc, #644]	; 4a00 <__ieee754_pow+0x538>
    477c:	vfma.f64	d8, d11, d9
    4780:	vldr	d7, [pc, #644]	; 4a08 <__ieee754_pow+0x540>
    4784:	vfma.f64	d1, d11, d8
    4788:	vmul.f64	d8, d11, d11
    478c:	vldr	d5, [pc, #640]	; 4a10 <__ieee754_pow+0x548>
    4790:	vfma.f64	d7, d11, d1
    4794:	vfma.f64	d5, d11, d7
    4798:	vldr	d7, [pc, #636]	; 4a18 <__ieee754_pow+0x550>
    479c:	vfma.f64	d7, d11, d5
    47a0:	vmov.f64	d5, #8	; 0x40400000  3.0
    47a4:	vfma.f64	d6, d8, d7
    47a8:	vmov.f64	d7, d5
    47ac:	vfma.f64	d7, d4, d4
    47b0:	vadd.f64	d7, d7, d6
    47b4:	vstr	d7, [sp, #16]
    47b8:	str	r2, [sp, #16]
    47ba:	vldr	d9, [sp, #16]
    47be:	vsub.f64	d5, d9, d5
    47c2:	vfma.f64	d5, d10, d4
    47c6:	vsub.f64	d5, d6, d5
    47ca:	vldr	d6, [sp]
    47ce:	vmul.f64	d6, d5, d6
    47d2:	vfma.f64	d6, d2, d9
    47d6:	vmov.f64	d5, d6
    47da:	vfma.f64	d5, d4, d9
    47de:	vstr	d5, [sp]
    47e2:	str	r2, [sp, #0]
    47e4:	vldr	d4, [sp]
    47e8:	vldr	d2, [pc, #564]	; 4a20 <__ieee754_pow+0x558>
    47ec:	vmov.f64	d5, d4
    47f0:	vfma.f64	d5, d10, d9
    47f4:	vldr	d7, [pc, #560]	; 4a28 <__ieee754_pow+0x560>
    47f8:	vsub.f64	d6, d6, d5
    47fc:	vldr	d8, [pc, #560]	; 4a30 <__ieee754_pow+0x568>
    4800:	vmul.f64	d7, d6, d7
    4804:	vmov	s3, r6
    4808:	vfma.f64	d7, d4, d8
    480c:	vcvt.f64.s32	d1, s3
    4810:	vadd.f64	d7, d7, d0
    4814:	vmov.f64	d6, d7
    4818:	vfma.f64	d6, d4, d2
    481c:	vadd.f64	d6, d6, d3
    4820:	vadd.f64	d6, d6, d1
    4824:	vstr	d6, [sp]
    4828:	str	r2, [sp, #0]
    482a:	vldr	d5, [sp]
    482e:	vsub.f64	d6, d5, d1
    4832:	vsub.f64	d6, d6, d3
    4836:	vfms.f64	d6, d4, d2
    483a:	vsub.f64	d6, d7, d6
    483e:	ldrd	r3, r4, [sp, #8]
    4842:	vmov.f64	d0, #240	; 0xbf800000 -1.0
    4846:	mov	r1, r4
    4848:	movs	r0, #0
    484a:	vmov	d7, r3, r4
    484e:	vmov	d4, r0, r1
    4852:	vmul.f64	d6, d6, d7
    4856:	vsub.f64	d7, d7, d4
    485a:	vfma.f64	d6, d5, d7
    485e:	vmul.f64	d5, d5, d4
    4862:	vadd.f64	d7, d6, d5
    4866:	vstr	d7, [sp]
    486a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    486e:	ldr	r3, [pc, #536]	; (4a88 <__ieee754_pow+0x5c0>)
    4870:	ldr	r2, [sp, #4]
    4872:	add.w	fp, fp, #4294967295
    4876:	orrs.w	r4, fp, r9
    487a:	ite	ne
    487c:	vmovne.f64	d8, d7
    4880:	vmoveq.f64	d8, d0
    4884:	cmp	r2, r3
    4886:	ldr	r4, [sp, #0]
    4888:	ble.w	4a90 <__ieee754_pow+0x5c8>
    488c:	add.w	r3, r2, #3204448256	; 0xbf000000
    4890:	add.w	r3, r3, #7340032	; 0x700000
    4894:	orrs	r3, r4
    4896:	bne.w	4b7c <__ieee754_pow+0x6b4>
    489a:	vadd.f64	d4, d6, d5
    489e:	vsub.f64	d4, d4, d5
    48a2:	vldr	d7, [pc, #404]	; 4a38 <__ieee754_pow+0x570>
    48a6:	vadd.f64	d7, d6, d7
    48aa:	vcmpe.f64	d7, d4
    48ae:	vmrs	APSR_nzcv, fpscr
    48b2:	bgt.w	4b7c <__ieee754_pow+0x6b4>
    48b6:	mov	r3, r2
    48b8:	asrs	r3, r3, #20
    48ba:	mov.w	r1, #1048576	; 0x100000
    48be:	subw	r3, r3, #1022	; 0x3fe
    48c2:	asr.w	r3, r1, r3
    48c6:	adds	r1, r3, r2
    48c8:	ubfx	r0, r1, #20, #11
    48cc:	ldr	r6, [pc, #444]	; (4a8c <__ieee754_pow+0x5c4>)
    48ce:	subw	r0, r0, #1023	; 0x3ff
    48d2:	asrs	r6, r0
    48d4:	bic.w	r5, r1, r6
    48d8:	movs	r4, #0
    48da:	ubfx	r3, r1, #0, #20
    48de:	vmov	d7, r4, r5
    48e2:	rsb	r0, r0, #20
    48e6:	orr.w	r3, r3, #1048576	; 0x100000
    48ea:	asr.w	r0, r3, r0
    48ee:	cmp	r2, #0
    48f0:	vsub.f64	d5, d5, d7
    48f4:	vadd.f64	d7, d6, d5
    48f8:	vstr	d7, [sp]
    48fc:	it	lt
    48fe:	neglt	r0, r0
    4900:	lsls	r1, r0, #20
    4902:	ldrd	r2, r3, [sp]
    4906:	vmov.f64	d2, #0	; 0x40000000  2.0
    490a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    490e:	vldr	d1, [pc, #304]	; 4a40 <__ieee754_pow+0x578>
    4912:	vldr	d0, [pc, #308]	; 4a48 <__ieee754_pow+0x580>
    4916:	movs	r2, #0
    4918:	vldr	d4, [pc, #308]	; 4a50 <__ieee754_pow+0x588>
    491c:	vmov	d3, r2, r3
    4920:	vldr	d9, [pc, #308]	; 4a58 <__ieee754_pow+0x590>
    4924:	vmul.f64	d4, d3, d4
    4928:	vsub.f64	d5, d3, d5
    492c:	vsub.f64	d5, d6, d5
    4930:	vmov.f64	d6, d4
    4934:	vfma.f64	d6, d5, d0
    4938:	vldr	d5, [pc, #292]	; 4a60 <__ieee754_pow+0x598>
    493c:	vmov.f64	d4, d6
    4940:	vfma.f64	d4, d3, d1
    4944:	vmov.f64	d0, d4
    4948:	vfms.f64	d0, d3, d1
    494c:	vsub.f64	d6, d6, d0
    4950:	vldr	d0, [pc, #276]	; 4a68 <__ieee754_pow+0x5a0>
    4954:	vmul.f64	d3, d4, d4
    4958:	vfma.f64	d5, d3, d9
    495c:	vldr	d1, [pc, #272]	; 4a70 <__ieee754_pow+0x5a8>
    4960:	vfma.f64	d0, d3, d5
    4964:	vfma.f64	d6, d4, d6
    4968:	vldr	d5, [pc, #268]	; 4a78 <__ieee754_pow+0x5b0>
    496c:	vfma.f64	d1, d3, d0
    4970:	vfma.f64	d5, d3, d1
    4974:	vmov.f64	d1, d4
    4978:	vfms.f64	d1, d3, d5
    497c:	vmul.f64	d3, d4, d1
    4980:	vsub.f64	d2, d1, d2
    4984:	vdiv.f64	d5, d3, d2
    4988:	vsub.f64	d6, d5, d6
    498c:	vsub.f64	d6, d6, d4
    4990:	vsub.f64	d7, d7, d6
    4994:	vstr	d7, [sp]
    4998:	ldr	r3, [sp, #4]
    499a:	add	r1, r3
    499c:	cmp.w	r1, #1048576	; 0x100000
    49a0:	blt.w	4bd8 <__ieee754_pow+0x710>
    49a4:	ldrd	r2, r3, [sp]
    49a8:	mov	r3, r1
    49aa:	vmov	d0, r2, r3
    49ae:	vmul.f64	d0, d0, d8
    49b2:	b.n	455a <__ieee754_pow+0x92>
    49b4:	add.w	r4, r4, #3221225472	; 0xc0000000
    49b8:	add.w	r4, r4, #1048576	; 0x100000
    49bc:	orrs.w	r3, r4, fp
    49c0:	beq.w	4bb8 <__ieee754_pow+0x6f0>
    49c4:	cmp.w	fp, #1
    49c8:	bne.w	45e8 <__ieee754_pow+0x120>
    49cc:	vldr	d7, [sp]
    49d0:	vneg.f64	d0, d7
    49d4:	b.n	455a <__ieee754_pow+0x92>
    49d6:	vmov	d7, r2, r3
    49da:	vmul.f64	d0, d7, d7
    49de:	b.n	455a <__ieee754_pow+0x92>
    49e0:	.word	0x00000000
    49e4:	.word	0x43400000
	...
    49f0:	.word	0x4a454eef
    49f4:	.word	0x3fca7e28
    49f8:	.word	0x93c9db65
    49fc:	.word	0x3fcd864a
    4a00:	.word	0xa91d4101
    4a04:	.word	0x3fd17460
    4a08:	.word	0x518f264d
    4a0c:	.word	0x3fd55555
    4a10:	.word	0xdb6fabff
    4a14:	.word	0x3fdb6db6
    4a18:	.word	0x33333303
    4a1c:	.word	0x3fe33333
    4a20:	.word	0xe0000000
    4a24:	.word	0x3feec709
    4a28:	.word	0xdc3a03fd
    4a2c:	.word	0x3feec709
    4a30:	.word	0x145b01f5
    4a34:	.word	0xbe3e2fe0
    4a38:	.word	0x652b82fe
    4a3c:	.word	0x3c971547
    4a40:	.word	0x00000000
    4a44:	.word	0x3fe62e43
    4a48:	.word	0xfefa39ef
    4a4c:	.word	0x3fe62e42
    4a50:	.word	0x0ca86c39
    4a54:	.word	0xbe205c61
    4a58:	.word	0x72bea4d0
    4a5c:	.word	0x3e663769
    4a60:	.word	0xc5d26bf1
    4a64:	.word	0xbebbbd41
    4a68:	.word	0xaf25de2c
    4a6c:	.word	0x3f11566a
    4a70:	.word	0x16bebd93
    4a74:	.word	0xbf66c16c
    4a78:	.word	0x5555553e
    4a7c:	.word	0x3fc55555
    4a80:	.word	0x0003988e
    4a84:	.word	0x000bb679
    4a88:	.word	0x408fffff
    4a8c:	.word	0x000fffff
    4a90:	ldr	r5, [pc, #420]	; (4c38 <__ieee754_pow+0x770>)
    4a92:	bic.w	r3, r2, #2147483648	; 0x80000000
    4a96:	cmp	r3, r5
    4a98:	ble.w	4ba4 <__ieee754_pow+0x6dc>
    4a9c:	ldr	r1, [pc, #412]	; (4c3c <__ieee754_pow+0x774>)
    4a9e:	add	r1, r2
    4aa0:	orrs	r1, r4
    4aa2:	bne.n	4ab8 <__ieee754_pow+0x5f0>
    4aa4:	vadd.f64	d7, d6, d5
    4aa8:	vsub.f64	d7, d7, d5
    4aac:	vcmpe.f64	d6, d7
    4ab0:	vmrs	APSR_nzcv, fpscr
    4ab4:	bhi.w	48b8 <__ieee754_pow+0x3f0>
    4ab8:	vldr	d0, [pc, #308]	; 4bf0 <__ieee754_pow+0x728>
    4abc:	vmul.f64	d7, d8, d0
    4ac0:	vmul.f64	d0, d7, d0
    4ac4:	b.n	455a <__ieee754_pow+0x92>
    4ac6:	cmp.w	r8, #0
    4aca:	bge.w	4676 <__ieee754_pow+0x1ae>
    4ace:	vmov	d7, r0, r1
    4ad2:	vneg.f64	d0, d7
    4ad6:	b.n	455a <__ieee754_pow+0x92>
    4ad8:	vldr	d5, [sp]
    4adc:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4ae0:	vdiv.f64	d6, d7, d5
    4ae4:	vstr	d6, [sp]
    4ae8:	b.n	45e0 <__ieee754_pow+0x118>
    4aea:	ldr	r3, [pc, #340]	; (4c40 <__ieee754_pow+0x778>)
    4aec:	cmp	r4, r3
    4aee:	ble.w	4670 <__ieee754_pow+0x1a8>
    4af2:	ldr	r3, [pc, #336]	; (4c44 <__ieee754_pow+0x77c>)
    4af4:	cmp	r4, r3
    4af6:	bgt.w	45bc <__ieee754_pow+0xf4>
    4afa:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4afe:	vmov.f64	d8, #80	; 0x3e800000  0.250
    4b02:	vldr	d5, [sp]
    4b06:	vldr	d2, [pc, #240]	; 4bf8 <__ieee754_pow+0x730>
    4b0a:	vsub.f64	d7, d5, d7
    4b0e:	vmov.f64	d5, #96	; 0x3f000000  0.5
    4b12:	vldr	d3, [pc, #236]	; 4c00 <__ieee754_pow+0x738>
    4b16:	vneg.f64	d4, d7
    4b1a:	vmul.f64	d0, d7, d7
    4b1e:	vldr	d6, [pc, #232]	; 4c08 <__ieee754_pow+0x740>
    4b22:	vfma.f64	d3, d4, d8
    4b26:	vfma.f64	d5, d4, d3
    4b2a:	vldr	d1, [pc, #228]	; 4c10 <__ieee754_pow+0x748>
    4b2e:	vmul.f64	d5, d5, d0
    4b32:	vnmul.f64	d6, d6, d5
    4b36:	vfma.f64	d6, d7, d1
    4b3a:	vmov.f64	d5, d6
    4b3e:	vfma.f64	d5, d7, d2
    4b42:	vmov	r2, r3, d5
    4b46:	movs	r2, #0
    4b48:	vmov	d5, r2, r3
    4b4c:	vmov.f64	d7, d5
    4b50:	vfma.f64	d7, d4, d2
    4b54:	vsub.f64	d6, d6, d7
    4b58:	b.n	483e <__ieee754_pow+0x376>
    4b5a:	vldr	d3, [pc, #188]	; 4c18 <__ieee754_pow+0x750>
    4b5e:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4b62:	vmov.f64	d0, d3
    4b66:	movs	r5, #0
    4b68:	b.n	4702 <__ieee754_pow+0x23a>
    4b6a:	movs	r6, #0
    4b6c:	b.n	46ca <__ieee754_pow+0x202>
    4b6e:	vmov	d6, r2, r3
    4b72:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4b76:	vdiv.f64	d0, d7, d6
    4b7a:	b.n	455a <__ieee754_pow+0x92>
    4b7c:	vldr	d0, [pc, #160]	; 4c20 <__ieee754_pow+0x758>
    4b80:	vmul.f64	d7, d8, d0
    4b84:	vmul.f64	d0, d7, d0
    4b88:	b.n	455a <__ieee754_pow+0x92>
    4b8a:	cmp	r6, #0
    4b8c:	bne.w	4578 <__ieee754_pow+0xb0>
    4b90:	rsb	r7, r7, #20
    4b94:	asr.w	lr, r5, r7
    4b98:	lsl.w	r7, lr, r7
    4b9c:	cmp	r5, r7
    4b9e:	beq.n	4be2 <__ieee754_pow+0x71a>
    4ba0:	mov	fp, r6
    4ba2:	b.n	451a <__ieee754_pow+0x52>
    4ba4:	ldr	r4, [pc, #160]	; (4c48 <__ieee754_pow+0x780>)
    4ba6:	cmp	r3, r4
    4ba8:	bgt.w	48b8 <__ieee754_pow+0x3f0>
    4bac:	vadd.f64	d7, d6, d5
    4bb0:	mov	r1, r0
    4bb2:	vstr	d7, [sp]
    4bb6:	b.n	4902 <__ieee754_pow+0x43a>
    4bb8:	vldr	d7, [sp]
    4bbc:	vsub.f64	d7, d7, d7
    4bc0:	vdiv.f64	d0, d7, d7
    4bc4:	b.n	455a <__ieee754_pow+0x92>
    4bc6:	vldr	d3, [pc, #96]	; 4c28 <__ieee754_pow+0x760>
    4bca:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    4bce:	vldr	d0, [pc, #96]	; 4c30 <__ieee754_pow+0x768>
    4bd2:	mov.w	r5, #262144	; 0x40000
    4bd6:	b.n	4702 <__ieee754_pow+0x23a>
    4bd8:	vmov.f64	d0, d7
    4bdc:	bl	5128 <scalbn>
    4be0:	b.n	49ae <__ieee754_pow+0x4e6>
    4be2:	and.w	lr, lr, #1
    4be6:	rsb	fp, lr, #2
    4bea:	b.n	451a <__ieee754_pow+0x52>
    4bec:	nop.w
    4bf0:	.word	0xc2f8f359
    4bf4:	.word	0x01a56e1f
    4bf8:	.word	0x60000000
    4bfc:	.word	0x3ff71547
    4c00:	.word	0x55555555
    4c04:	.word	0x3fd55555
    4c08:	.word	0x652b82fe
    4c0c:	.word	0x3ff71547
    4c10:	.word	0xf85ddf44
    4c14:	.word	0x3e54ae0b
	...
    4c20:	.word	0x8800759c
    4c24:	.word	0x7e37e43c
    4c28:	.word	0x40000000
    4c2c:	.word	0x3fe2b803
    4c30:	.word	0x43cfd006
    4c34:	.word	0x3e4cfdeb
    4c38:	.word	0x4090cbff
    4c3c:	.word	0x3f6f3400
    4c40:	.word	0x3feffffe
    4c44:	.word	0x3ff00000
    4c48:	.word	0x3fe00000

00004c4c <__ieee754_sqrt>:
    4c4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c50:	sub	sp, #8
    4c52:	vstr	d0, [sp]
    4c56:	ldr	r1, [pc, #372]	; (4dcc <__ieee754_sqrt+0x180>)
    4c58:	ldr	r3, [sp, #4]
    4c5a:	ldr	r0, [sp, #0]
    4c5c:	mov	r4, r1
    4c5e:	ands	r1, r3
    4c60:	cmp	r1, r4
    4c62:	beq.w	4d96 <__ieee754_sqrt+0x14a>
    4c66:	cmp	r3, #0
    4c68:	mov	r2, r0
    4c6a:	ble.n	4d5c <__ieee754_sqrt+0x110>
    4c6c:	asrs	r7, r3, #20
    4c6e:	beq.w	4d76 <__ieee754_sqrt+0x12a>
    4c72:	subw	r7, r7, #1023	; 0x3ff
    4c76:	ubfx	r3, r3, #0, #20
    4c7a:	lsls	r1, r7, #31
    4c7c:	orr.w	r3, r3, #1048576	; 0x100000
    4c80:	bmi.n	4d52 <__ieee754_sqrt+0x106>
    4c82:	add.w	r1, r3, r2, lsr #31
    4c86:	movs	r6, #0
    4c88:	add	r3, r1
    4c8a:	asrs	r7, r7, #1
    4c8c:	lsls	r2, r2, #1
    4c8e:	mov	lr, r6
    4c90:	movs	r0, #22
    4c92:	mov.w	r1, #2097152	; 0x200000
    4c96:	add.w	r4, lr, r1
    4c9a:	cmp	r4, r3
    4c9c:	mov.w	r5, r2, lsr #31
    4ca0:	mov.w	r2, r2, lsl #1
    4ca4:	bgt.n	4cae <__ieee754_sqrt+0x62>
    4ca6:	subs	r3, r3, r4
    4ca8:	add.w	lr, r4, r1
    4cac:	add	r6, r1
    4cae:	subs	r0, #1
    4cb0:	add.w	r3, r5, r3, lsl #1
    4cb4:	mov.w	r1, r1, lsr #1
    4cb8:	bne.n	4c96 <__ieee754_sqrt+0x4a>
    4cba:	mov	ip, r0
    4cbc:	movs	r4, #32
    4cbe:	mov.w	r1, #2147483648	; 0x80000000
    4cc2:	b.n	4cd8 <__ieee754_sqrt+0x8c>
    4cc4:	beq.n	4d08 <__ieee754_sqrt+0xbc>
    4cc6:	add.w	r5, r3, r2, lsr #31
    4cca:	subs	r4, #1
    4ccc:	mov.w	r1, r1, lsr #1
    4cd0:	add	r3, r5
    4cd2:	mov.w	r2, r2, lsl #1
    4cd6:	beq.n	4d1a <__ieee754_sqrt+0xce>
    4cd8:	cmp	lr, r3
    4cda:	add.w	r5, r1, ip
    4cde:	bge.n	4cc4 <__ieee754_sqrt+0x78>
    4ce0:	cmp	r5, #0
    4ce2:	add.w	ip, r5, r1
    4ce6:	blt.n	4cfc <__ieee754_sqrt+0xb0>
    4ce8:	mov	r8, lr
    4cea:	cmp	r5, r2
    4cec:	rsb	r3, lr, r3
    4cf0:	bls.n	4cf4 <__ieee754_sqrt+0xa8>
    4cf2:	subs	r3, #1
    4cf4:	subs	r2, r2, r5
    4cf6:	add	r0, r1
    4cf8:	mov	lr, r8
    4cfa:	b.n	4cc6 <__ieee754_sqrt+0x7a>
    4cfc:	cmp.w	ip, #0
    4d00:	blt.n	4ce8 <__ieee754_sqrt+0x9c>
    4d02:	add.w	r8, lr, #1
    4d06:	b.n	4cea <__ieee754_sqrt+0x9e>
    4d08:	cmp	r5, r2
    4d0a:	bhi.n	4d42 <__ieee754_sqrt+0xf6>
    4d0c:	cmp	r5, #0
    4d0e:	add.w	ip, r5, r1
    4d12:	blt.n	4da6 <__ieee754_sqrt+0x15a>
    4d14:	mov	r8, r3
    4d16:	movs	r3, #0
    4d18:	b.n	4cf4 <__ieee754_sqrt+0xa8>
    4d1a:	orrs	r3, r2
    4d1c:	bne.n	4d46 <__ieee754_sqrt+0xfa>
    4d1e:	lsrs	r0, r0, #1
    4d20:	asrs	r1, r6, #1
    4d22:	lsls	r3, r6, #31
    4d24:	add.w	r1, r1, #1069547520	; 0x3fc00000
    4d28:	add.w	r1, r1, #2097152	; 0x200000
    4d2c:	it	mi
    4d2e:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    4d32:	add.w	r3, r1, r7, lsl #20
    4d36:	mov	r2, r0
    4d38:	vmov	d0, r2, r3
    4d3c:	add	sp, #8
    4d3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d42:	mov	r3, lr
    4d44:	b.n	4cc6 <__ieee754_sqrt+0x7a>
    4d46:	adds	r2, r0, #1
    4d48:	beq.n	4dae <__ieee754_sqrt+0x162>
    4d4a:	and.w	r3, r0, #1
    4d4e:	add	r0, r3
    4d50:	b.n	4d1e <__ieee754_sqrt+0xd2>
    4d52:	lsls	r3, r3, #1
    4d54:	add.w	r3, r3, r2, lsr #31
    4d58:	lsls	r2, r2, #1
    4d5a:	b.n	4c82 <__ieee754_sqrt+0x36>
    4d5c:	bic.w	r1, r3, #2147483648	; 0x80000000
    4d60:	orrs	r1, r0
    4d62:	beq.n	4da0 <__ieee754_sqrt+0x154>
    4d64:	cbnz	r3, 4dbe <__ieee754_sqrt+0x172>
    4d66:	mov	r7, r3
    4d68:	lsrs	r3, r2, #11
    4d6a:	subs	r7, #21
    4d6c:	lsls	r2, r2, #21
    4d6e:	cmp	r3, #0
    4d70:	beq.n	4d68 <__ieee754_sqrt+0x11c>
    4d72:	lsls	r5, r3, #11
    4d74:	bmi.n	4db4 <__ieee754_sqrt+0x168>
    4d76:	movs	r1, #0
    4d78:	b.n	4d7c <__ieee754_sqrt+0x130>
    4d7a:	mov	r1, r0
    4d7c:	lsls	r3, r3, #1
    4d7e:	lsls	r4, r3, #11
    4d80:	add.w	r0, r1, #1
    4d84:	bpl.n	4d7a <__ieee754_sqrt+0x12e>
    4d86:	rsb	r4, r0, #32
    4d8a:	lsr.w	r4, r2, r4
    4d8e:	orrs	r3, r4
    4d90:	subs	r7, r7, r1
    4d92:	lsls	r2, r0
    4d94:	b.n	4c72 <__ieee754_sqrt+0x26>
    4d96:	vfma.f64	d0, d0, d0
    4d9a:	add	sp, #8
    4d9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4da0:	vldr	d0, [sp]
    4da4:	b.n	4d3c <__ieee754_sqrt+0xf0>
    4da6:	cmp.w	ip, #0
    4daa:	bge.n	4d02 <__ieee754_sqrt+0xb6>
    4dac:	b.n	4d14 <__ieee754_sqrt+0xc8>
    4dae:	adds	r6, #1
    4db0:	mov	r0, r4
    4db2:	b.n	4d20 <__ieee754_sqrt+0xd4>
    4db4:	movs	r4, #32
    4db6:	mov.w	r1, #4294967295
    4dba:	movs	r0, #0
    4dbc:	b.n	4d8a <__ieee754_sqrt+0x13e>
    4dbe:	vldr	d7, [sp]
    4dc2:	vsub.f64	d7, d7, d7
    4dc6:	vdiv.f64	d0, d7, d7
    4dca:	b.n	4d3c <__ieee754_sqrt+0xf0>
    4dcc:	.word	0x7ff00000

00004dd0 <atan>:
    4dd0:	push	{r3, r4, r5, lr}
    4dd2:	vmov.f64	d7, d0
    4dd6:	vmov	r5, s15
    4dda:	ldr	r3, [pc, #476]	; (4fb8 <atan+0x1e8>)
    4ddc:	bic.w	r4, r5, #2147483648	; 0x80000000
    4de0:	cmp	r4, r3
    4de2:	ble.n	4e02 <atan+0x32>
    4de4:	ldr	r3, [pc, #468]	; (4fbc <atan+0x1ec>)
    4de6:	cmp	r4, r3
    4de8:	vmov	r2, s0
    4dec:	bgt.n	4ea8 <atan+0xd8>
    4dee:	beq.n	4ea4 <atan+0xd4>
    4df0:	vldr	d7, [pc, #340]	; 4f48 <atan+0x178>
    4df4:	vldr	d0, [pc, #344]	; 4f50 <atan+0x180>
    4df8:	cmp	r5, #0
    4dfa:	it	gt
    4dfc:	vmovgt.f64	d0, d7
    4e00:	pop	{r3, r4, r5, pc}
    4e02:	ldr	r3, [pc, #444]	; (4fc0 <atan+0x1f0>)
    4e04:	cmp	r4, r3
    4e06:	bgt.n	4eca <atan+0xfa>
    4e08:	sub.w	r3, r3, #29097984	; 0x1bc0000
    4e0c:	cmp	r4, r3
    4e0e:	ble.n	4eae <atan+0xde>
    4e10:	mov.w	r3, #4294967295
    4e14:	vldr	d2, [pc, #320]	; 4f58 <atan+0x188>
    4e18:	vmul.f64	d4, d7, d7
    4e1c:	vmul.f64	d6, d4, d4
    4e20:	vldr	d3, [pc, #316]	; 4f60 <atan+0x190>
    4e24:	vldr	d5, [pc, #320]	; 4f68 <atan+0x198>
    4e28:	vfma.f64	d3, d6, d2
    4e2c:	vldr	d2, [pc, #320]	; 4f70 <atan+0x1a0>
    4e30:	vfma.f64	d5, d6, d3
    4e34:	vldr	d3, [pc, #320]	; 4f78 <atan+0x1a8>
    4e38:	vfma.f64	d2, d6, d5
    4e3c:	vldr	d5, [pc, #320]	; 4f80 <atan+0x1b0>
    4e40:	vfma.f64	d3, d6, d2
    4e44:	vldr	d1, [pc, #320]	; 4f88 <atan+0x1b8>
    4e48:	vfma.f64	d5, d6, d3
    4e4c:	vmul.f64	d5, d5, d4
    4e50:	vldr	d2, [pc, #316]	; 4f90 <atan+0x1c0>
    4e54:	vldr	d4, [pc, #320]	; 4f98 <atan+0x1c8>
    4e58:	vldr	d3, [pc, #324]	; 4fa0 <atan+0x1d0>
    4e5c:	vfma.f64	d4, d6, d1
    4e60:	vfma.f64	d2, d6, d4
    4e64:	vldr	d4, [pc, #320]	; 4fa8 <atan+0x1d8>
    4e68:	vfma.f64	d3, d6, d2
    4e6c:	adds	r2, r3, #1
    4e6e:	vfma.f64	d4, d6, d3
    4e72:	vmul.f64	d6, d4, d6
    4e76:	beq.n	4efa <atan+0x12a>
    4e78:	vadd.f64	d5, d5, d6
    4e7c:	ldr	r2, [pc, #324]	; (4fc4 <atan+0x1f4>)
    4e7e:	ldr	r1, [pc, #328]	; (4fc8 <atan+0x1f8>)
    4e80:	lsls	r3, r3, #3
    4e82:	add	r2, r3
    4e84:	add	r3, r1
    4e86:	vldr	d6, [r2]
    4e8a:	vldr	d0, [r3]
    4e8e:	vfnms.f64	d6, d7, d5
    4e92:	vsub.f64	d7, d6, d7
    4e96:	cmp	r5, #0
    4e98:	vsub.f64	d7, d0, d7
    4e9c:	blt.n	4ef4 <atan+0x124>
    4e9e:	vmov.f64	d0, d7
    4ea2:	pop	{r3, r4, r5, pc}
    4ea4:	cmp	r2, #0
    4ea6:	beq.n	4df0 <atan+0x20>
    4ea8:	vadd.f64	d0, d7, d7
    4eac:	pop	{r3, r4, r5, pc}
    4eae:	vldr	d6, [pc, #256]	; 4fb0 <atan+0x1e0>
    4eb2:	vmov.f64	d5, #112	; 0x3f800000  1.0
    4eb6:	vadd.f64	d6, d0, d6
    4eba:	vcmpe.f64	d6, d5
    4ebe:	vmrs	APSR_nzcv, fpscr
    4ec2:	ble.n	4e10 <atan+0x40>
    4ec4:	vmov.f64	d0, d7
    4ec8:	pop	{r3, r4, r5, pc}
    4eca:	bl	4fd4 <fabs>
    4ece:	ldr	r3, [pc, #252]	; (4fcc <atan+0x1fc>)
    4ed0:	cmp	r4, r3
    4ed2:	bgt.n	4f08 <atan+0x138>
    4ed4:	sub.w	r3, r3, #851968	; 0xd0000
    4ed8:	cmp	r4, r3
    4eda:	bgt.n	4f32 <atan+0x162>
    4edc:	vmov.f64	d7, #0	; 0x40000000  2.0
    4ee0:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    4ee4:	vadd.f64	d5, d0, d7
    4ee8:	vfma.f64	d6, d0, d7
    4eec:	movs	r3, #0
    4eee:	vdiv.f64	d7, d6, d5
    4ef2:	b.n	4e14 <atan+0x44>
    4ef4:	vneg.f64	d0, d7
    4ef8:	pop	{r3, r4, r5, pc}
    4efa:	vadd.f64	d6, d5, d6
    4efe:	vfms.f64	d7, d7, d6
    4f02:	vmov.f64	d0, d7
    4f06:	pop	{r3, r4, r5, pc}
    4f08:	ldr	r3, [pc, #196]	; (4fd0 <atan+0x200>)
    4f0a:	cmp	r4, r3
    4f0c:	bgt.n	4f26 <atan+0x156>
    4f0e:	vmov.f64	d7, #120	; 0x3fc00000  1.5
    4f12:	vmov.f64	d6, #112	; 0x3f800000  1.0
    4f16:	vsub.f64	d5, d0, d7
    4f1a:	vfma.f64	d6, d0, d7
    4f1e:	movs	r3, #2
    4f20:	vdiv.f64	d7, d5, d6
    4f24:	b.n	4e14 <atan+0x44>
    4f26:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    4f2a:	movs	r3, #3
    4f2c:	vdiv.f64	d7, d6, d0
    4f30:	b.n	4e14 <atan+0x44>
    4f32:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4f36:	movs	r3, #1
    4f38:	vsub.f64	d6, d0, d7
    4f3c:	vadd.f64	d0, d0, d7
    4f40:	vdiv.f64	d7, d6, d0
    4f44:	b.n	4e14 <atan+0x44>
    4f46:	nop
    4f48:	.word	0x54442d18
    4f4c:	.word	0x3ff921fb
    4f50:	.word	0x54442d18
    4f54:	.word	0xbff921fb
    4f58:	.word	0xe322da11
    4f5c:	.word	0x3f90ad3a
    4f60:	.word	0x24760deb
    4f64:	.word	0x3fa97b4b
    4f68:	.word	0xa0d03d51
    4f6c:	.word	0x3fb10d66
    4f70:	.word	0xc54c206e
    4f74:	.word	0x3fb745cd
    4f78:	.word	0x920083ff
    4f7c:	.word	0x3fc24924
    4f80:	.word	0x5555550d
    4f84:	.word	0x3fd55555
    4f88:	.word	0x2c6a6c2f
    4f8c:	.word	0xbfa2b444
    4f90:	.word	0xaf749a6d
    4f94:	.word	0xbfb3b0f2
    4f98:	.word	0x52defd9a
    4f9c:	.word	0xbfadde2d
    4fa0:	.word	0xfe231671
    4fa4:	.word	0xbfbc71c6
    4fa8:	.word	0x9998ebc4
    4fac:	.word	0xbfc99999
    4fb0:	.word	0x8800759c
    4fb4:	.word	0x7e37e43c
    4fb8:	.word	0x440fffff
    4fbc:	.word	0x7ff00000
    4fc0:	.word	0x3fdbffff
    4fc4:	.word	0x200006b8
    4fc8:	.word	0x200006d8
    4fcc:	.word	0x3ff2ffff
    4fd0:	.word	0x40037fff

00004fd4 <fabs>:
    4fd4:	vmov	r2, r3, d0
    4fd8:	bic.w	r3, r3, #2147483648	; 0x80000000
    4fdc:	vmov	d0, r2, r3
    4fe0:	bx	lr
    4fe2:	nop

00004fe4 <finite>:
    4fe4:	vmov	r3, s1
    4fe8:	orr.w	r0, r3, #2147483648	; 0x80000000
    4fec:	add.w	r0, r0, #1048576	; 0x100000
    4ff0:	lsrs	r0, r0, #31
    4ff2:	bx	lr

00004ff4 <matherr>:
    4ff4:	movs	r0, #0
    4ff6:	bx	lr

00004ff8 <nan>:
    4ff8:	vldr	d0, [pc, #4]	; 5000 <nan+0x8>
    4ffc:	bx	lr
    4ffe:	nop
    5000:	.word	0x00000000
    5004:	.word	0x7ff80000

00005008 <rint>:
    5008:	push	{r4, r5, r6, r7}
    500a:	vmov	r2, r3, d0
    500e:	ubfx	r5, r3, #20, #11
    5012:	subw	r0, r5, #1023	; 0x3ff
    5016:	cmp	r0, #19
    5018:	sub	sp, #16
    501a:	mov	r1, r3
    501c:	mov.w	r7, r3, lsr #31
    5020:	vmov	r4, s0
    5024:	bgt.n	5080 <rint+0x78>
    5026:	cmp	r0, #0
    5028:	blt.n	50ba <rint+0xb2>
    502a:	ldr	r5, [pc, #240]	; (511c <rint+0x114>)
    502c:	asrs	r5, r0
    502e:	and.w	r6, r3, r5
    5032:	orrs	r6, r2
    5034:	beq.n	508a <rint+0x82>
    5036:	lsrs	r5, r5, #1
    5038:	ands	r3, r5
    503a:	orrs	r4, r3
    503c:	beq.n	5058 <rint+0x50>
    503e:	mov.w	r3, #262144	; 0x40000
    5042:	cmp	r0, #19
    5044:	bic.w	r5, r1, r5
    5048:	asr.w	r1, r3, r0
    504c:	orr.w	r1, r1, r5
    5050:	ite	eq
    5052:	moveq.w	r4, #2147483648	; 0x80000000
    5056:	movne	r4, #0
    5058:	ldr	r0, [pc, #196]	; (5120 <rint+0x118>)
    505a:	add.w	r7, r0, r7, lsl #3
    505e:	vldr	d0, [r7]
    5062:	mov	r3, r1
    5064:	mov	r2, r4
    5066:	vmov	d7, r2, r3
    506a:	vadd.f64	d7, d7, d0
    506e:	vstr	d7, [sp, #8]
    5072:	vldr	d7, [sp, #8]
    5076:	vsub.f64	d0, d7, d0
    507a:	add	sp, #16
    507c:	pop	{r4, r5, r6, r7}
    507e:	bx	lr
    5080:	cmp	r0, #51	; 0x33
    5082:	ble.n	5094 <rint+0x8c>
    5084:	cmp.w	r0, #1024	; 0x400
    5088:	beq.n	5114 <rint+0x10c>
    508a:	vmov	d0, r2, r3
    508e:	add	sp, #16
    5090:	pop	{r4, r5, r6, r7}
    5092:	bx	lr
    5094:	subw	r5, r5, #1043	; 0x413
    5098:	mov.w	r0, #4294967295
    509c:	lsrs	r0, r5
    509e:	tst	r2, r0
    50a0:	beq.n	508a <rint+0x82>
    50a2:	lsrs	r0, r0, #1
    50a4:	tst	r2, r0
    50a6:	beq.n	5058 <rint+0x50>
    50a8:	mov.w	r3, #1073741824	; 0x40000000
    50ac:	bic.w	r0, r4, r0
    50b0:	asr.w	r5, r3, r5
    50b4:	orr.w	r4, r5, r0
    50b8:	b.n	5058 <rint+0x50>
    50ba:	bic.w	r0, r3, #2147483648	; 0x80000000
    50be:	orrs	r0, r2
    50c0:	vmov	r6, s0
    50c4:	beq.n	508a <rint+0x82>
    50c6:	ubfx	r0, r3, #0, #20
    50ca:	orrs	r6, r0
    50cc:	negs	r0, r6
    50ce:	orrs	r6, r0
    50d0:	ldr	r0, [pc, #76]	; (5120 <rint+0x118>)
    50d2:	lsrs	r1, r3, #17
    50d4:	lsrs	r6, r6, #12
    50d6:	lsls	r1, r1, #17
    50d8:	and.w	r6, r6, #524288	; 0x80000
    50dc:	add.w	r0, r0, r7, lsl #3
    50e0:	orr.w	r3, r6, r1
    50e4:	vldr	d6, [r0]
    50e8:	vmov	d7, r2, r3
    50ec:	vadd.f64	d7, d7, d6
    50f0:	vstr	d7, [sp, #8]
    50f4:	vldr	d7, [sp, #8]
    50f8:	vsub.f64	d7, d7, d6
    50fc:	vstr	d7, [sp]
    5100:	ldr	r1, [sp, #4]
    5102:	ldrd	r2, r3, [sp]
    5106:	bic.w	r1, r1, #2147483648	; 0x80000000
    510a:	orr.w	r3, r1, r7, lsl #31
    510e:	vmov	d0, r2, r3
    5112:	b.n	508e <rint+0x86>
    5114:	vadd.f64	d0, d0, d0
    5118:	b.n	508e <rint+0x86>
    511a:	nop
    511c:	.word	0x000fffff
    5120:	.word	0x200006f8
    5124:	.word	0x00000000

00005128 <scalbn>:
    5128:	push	{r4, lr}
    512a:	vpush	{d8}
    512e:	sub	sp, #8
    5130:	vstr	d0, [sp]
    5134:	ldr	r3, [sp, #4]
    5136:	ldr	r1, [sp, #0]
    5138:	ubfx	r2, r3, #20, #11
    513c:	cbnz	r2, 518a <scalbn+0x62>
    513e:	bic.w	r3, r3, #2147483648	; 0x80000000
    5142:	orrs	r3, r1
    5144:	beq.n	51a2 <scalbn+0x7a>
    5146:	vldr	d7, [pc, #216]	; 5220 <scalbn+0xf8>
    514a:	ldr	r2, [pc, #244]	; (5240 <scalbn+0x118>)
    514c:	vmul.f64	d7, d0, d7
    5150:	cmp	r0, r2
    5152:	vstr	d7, [sp]
    5156:	ldr	r3, [sp, #4]
    5158:	blt.n	51ae <scalbn+0x86>
    515a:	ubfx	r2, r3, #20, #11
    515e:	subs	r2, #54	; 0x36
    5160:	adds	r4, r0, r2
    5162:	movw	r2, #2046	; 0x7fe
    5166:	cmp	r4, r2
    5168:	bgt.n	51cc <scalbn+0xa4>
    516a:	cmp	r4, #0
    516c:	ble.n	51be <scalbn+0x96>
    516e:	bic.w	r1, r3, #2139095040	; 0x7f800000
    5172:	ldrd	r2, r3, [sp]
    5176:	bic.w	r1, r1, #7340032	; 0x700000
    517a:	orr.w	r3, r1, r4, lsl #20
    517e:	vmov	d0, r2, r3
    5182:	add	sp, #8
    5184:	vpop	{d8}
    5188:	pop	{r4, pc}
    518a:	movw	r1, #2047	; 0x7ff
    518e:	cmp	r2, r1
    5190:	bne.n	5160 <scalbn+0x38>
    5192:	vldr	d7, [sp]
    5196:	vadd.f64	d0, d7, d7
    519a:	add	sp, #8
    519c:	vpop	{d8}
    51a0:	pop	{r4, pc}
    51a2:	vldr	d0, [sp]
    51a6:	add	sp, #8
    51a8:	vpop	{d8}
    51ac:	pop	{r4, pc}
    51ae:	vldr	d0, [pc, #120]	; 5228 <scalbn+0x100>
    51b2:	vmul.f64	d0, d7, d0
    51b6:	add	sp, #8
    51b8:	vpop	{d8}
    51bc:	pop	{r4, pc}
    51be:	cmn.w	r4, #53	; 0x35
    51c2:	bge.n	51e8 <scalbn+0xc0>
    51c4:	movw	r3, #50000	; 0xc350
    51c8:	cmp	r0, r3
    51ca:	ble.n	5208 <scalbn+0xe0>
    51cc:	vldr	d8, [pc, #96]	; 5230 <scalbn+0x108>
    51d0:	vldr	d1, [sp]
    51d4:	vmov.f64	d0, d8
    51d8:	bl	5244 <copysign>
    51dc:	vmul.f64	d0, d0, d8
    51e0:	add	sp, #8
    51e2:	vpop	{d8}
    51e6:	pop	{r4, pc}
    51e8:	bic.w	r1, r3, #2139095040	; 0x7f800000
    51ec:	ldrd	r2, r3, [sp]
    51f0:	bic.w	r1, r1, #7340032	; 0x700000
    51f4:	adds	r4, #54	; 0x36
    51f6:	orr.w	r3, r1, r4, lsl #20
    51fa:	vldr	d0, [pc, #60]	; 5238 <scalbn+0x110>
    51fe:	vmov	d7, r2, r3
    5202:	vmul.f64	d0, d7, d0
    5206:	b.n	5182 <scalbn+0x5a>
    5208:	vldr	d8, [pc, #28]	; 5228 <scalbn+0x100>
    520c:	vldr	d1, [sp]
    5210:	vmov.f64	d0, d8
    5214:	bl	5244 <copysign>
    5218:	vmul.f64	d0, d0, d8
    521c:	b.n	5182 <scalbn+0x5a>
    521e:	nop
    5220:	.word	0x00000000
    5224:	.word	0x43500000
    5228:	.word	0xc2f8f359
    522c:	.word	0x01a56e1f
    5230:	.word	0x8800759c
    5234:	.word	0x7e37e43c
    5238:	.word	0x00000000
    523c:	.word	0x3c900000
    5240:	.word	0xffff3cb0

00005244 <copysign>:
    5244:	vmov	r2, r3, d0
    5248:	vmov	r0, s3
    524c:	bic.w	r1, r3, #2147483648	; 0x80000000
    5250:	and.w	r0, r0, #2147483648	; 0x80000000
    5254:	orr.w	r3, r1, r0
    5258:	vmov	d0, r2, r3
    525c:	bx	lr
    525e:	nop

00005260 <__errno>:
    5260:	ldr	r3, [pc, #4]	; (5268 <__errno+0x8>)
    5262:	ldr	r0, [r3, #0]
    5264:	bx	lr
    5266:	nop
    5268:	.word	0x20000c88

0000526c <__libc_init_array>:
    526c:	push	{r4, r5, r6, lr}
    526e:	ldr	r6, [pc, #60]	; (52ac <__libc_init_array+0x40>)
    5270:	ldr	r5, [pc, #60]	; (52b0 <__libc_init_array+0x44>)
    5272:	subs	r6, r6, r5
    5274:	asrs	r6, r6, #2
    5276:	it	ne
    5278:	movne	r4, #0
    527a:	beq.n	5288 <__libc_init_array+0x1c>
    527c:	adds	r4, #1
    527e:	ldr.w	r3, [r5], #4
    5282:	blx	r3
    5284:	cmp	r6, r4
    5286:	bne.n	527c <__libc_init_array+0x10>
    5288:	ldr	r6, [pc, #40]	; (52b4 <__libc_init_array+0x48>)
    528a:	ldr	r5, [pc, #44]	; (52b8 <__libc_init_array+0x4c>)
    528c:	subs	r6, r6, r5
    528e:	bl	5460 <___init_veneer>
    5292:	asrs	r6, r6, #2
    5294:	it	ne
    5296:	movne	r4, #0
    5298:	beq.n	52a8 <__libc_init_array+0x3c>
    529a:	adds	r4, #1
    529c:	ldr.w	r3, [r5], #4
    52a0:	blx	r3
    52a2:	cmp	r6, r4
    52a4:	bne.n	529a <__libc_init_array+0x2e>
    52a6:	pop	{r4, r5, r6, pc}
    52a8:	pop	{r4, r5, r6, pc}
    52aa:	nop
    52ac:	.word	0x60001728
    52b0:	.word	0x60001728
    52b4:	.word	0x60001734
    52b8:	.word	0x60001728

000052bc <memset>:
    52bc:	push	{r4, r5, r6}
    52be:	lsls	r4, r0, #30
    52c0:	beq.n	5350 <memset+0x94>
    52c2:	subs	r4, r2, #1
    52c4:	cmp	r2, #0
    52c6:	beq.n	534c <memset+0x90>
    52c8:	uxtb	r5, r1
    52ca:	mov	r3, r0
    52cc:	b.n	52d4 <memset+0x18>
    52ce:	subs	r2, r4, #1
    52d0:	cbz	r4, 534c <memset+0x90>
    52d2:	mov	r4, r2
    52d4:	strb.w	r5, [r3], #1
    52d8:	lsls	r2, r3, #30
    52da:	bne.n	52ce <memset+0x12>
    52dc:	cmp	r4, #3
    52de:	bls.n	533e <memset+0x82>
    52e0:	uxtb	r5, r1
    52e2:	orr.w	r5, r5, r5, lsl #8
    52e6:	cmp	r4, #15
    52e8:	orr.w	r5, r5, r5, lsl #16
    52ec:	bls.n	5322 <memset+0x66>
    52ee:	add.w	r2, r3, #16
    52f2:	mov	r6, r4
    52f4:	subs	r6, #16
    52f6:	cmp	r6, #15
    52f8:	str.w	r5, [r2, #-16]
    52fc:	str.w	r5, [r2, #-12]
    5300:	str.w	r5, [r2, #-8]
    5304:	str.w	r5, [r2, #-4]
    5308:	add.w	r2, r2, #16
    530c:	bhi.n	52f4 <memset+0x38>
    530e:	sub.w	r2, r4, #16
    5312:	bic.w	r2, r2, #15
    5316:	and.w	r4, r4, #15
    531a:	adds	r2, #16
    531c:	cmp	r4, #3
    531e:	add	r3, r2
    5320:	bls.n	533e <memset+0x82>
    5322:	mov	r6, r3
    5324:	mov	r2, r4
    5326:	subs	r2, #4
    5328:	cmp	r2, #3
    532a:	str.w	r5, [r6], #4
    532e:	bhi.n	5326 <memset+0x6a>
    5330:	subs	r2, r4, #4
    5332:	bic.w	r2, r2, #3
    5336:	adds	r2, #4
    5338:	add	r3, r2
    533a:	and.w	r4, r4, #3
    533e:	cbz	r4, 534c <memset+0x90>
    5340:	uxtb	r1, r1
    5342:	add	r4, r3
    5344:	strb.w	r1, [r3], #1
    5348:	cmp	r3, r4
    534a:	bne.n	5344 <memset+0x88>
    534c:	pop	{r4, r5, r6}
    534e:	bx	lr
    5350:	mov	r4, r2
    5352:	mov	r3, r0
    5354:	b.n	52dc <memset+0x20>
    5356:	nop
	...

00005380 <strlen>:
    5380:	pld	[r0]
    5384:	strd	r4, r5, [sp, #-8]!
    5388:	bic.w	r1, r0, #7
    538c:	mvn.w	ip, #0
    5390:	ands.w	r4, r0, #7
    5394:	pld	[r1, #32]
    5398:	bne.w	542e <strlen+0xae>
    539c:	mov.w	r4, #0
    53a0:	mvn.w	r0, #7
    53a4:	ldrd	r2, r3, [r1]
    53a8:	pld	[r1, #64]	; 0x40
    53ac:	add.w	r0, r0, #8
    53b0:	uadd8	r2, r2, ip
    53b4:	sel	r2, r4, ip
    53b8:	uadd8	r3, r3, ip
    53bc:	sel	r3, r2, ip
    53c0:	cbnz	r3, 5416 <strlen+0x96>
    53c2:	ldrd	r2, r3, [r1, #8]
    53c6:	uadd8	r2, r2, ip
    53ca:	add.w	r0, r0, #8
    53ce:	sel	r2, r4, ip
    53d2:	uadd8	r3, r3, ip
    53d6:	sel	r3, r2, ip
    53da:	cbnz	r3, 5416 <strlen+0x96>
    53dc:	ldrd	r2, r3, [r1, #16]
    53e0:	uadd8	r2, r2, ip
    53e4:	add.w	r0, r0, #8
    53e8:	sel	r2, r4, ip
    53ec:	uadd8	r3, r3, ip
    53f0:	sel	r3, r2, ip
    53f4:	cbnz	r3, 5416 <strlen+0x96>
    53f6:	ldrd	r2, r3, [r1, #24]
    53fa:	add.w	r1, r1, #32
    53fe:	uadd8	r2, r2, ip
    5402:	add.w	r0, r0, #8
    5406:	sel	r2, r4, ip
    540a:	uadd8	r3, r3, ip
    540e:	sel	r3, r2, ip
    5412:	cmp	r3, #0
    5414:	beq.n	53a4 <strlen+0x24>
    5416:	cmp	r2, #0
    5418:	itt	eq
    541a:	addeq	r0, #4
    541c:	moveq	r2, r3
    541e:	rev	r2, r2
    5420:	clz	r2, r2
    5424:	ldrd	r4, r5, [sp], #8
    5428:	add.w	r0, r0, r2, lsr #3
    542c:	bx	lr
    542e:	ldrd	r2, r3, [r1]
    5432:	and.w	r5, r4, #3
    5436:	rsb	r0, r4, #0
    543a:	mov.w	r5, r5, lsl #3
    543e:	tst.w	r4, #4
    5442:	pld	[r1, #64]	; 0x40
    5446:	lsl.w	r5, ip, r5
    544a:	orn	r2, r2, r5
    544e:	itt	ne
    5450:	ornne	r3, r3, r5
    5454:	movne	r2, ip
    5456:	mov.w	r4, #0
    545a:	b.n	53b0 <strlen+0x30>
    545c:	movs	r0, r0
	...

00005460 <___init_veneer>:
    5460:	ldr.w	pc, [pc]	; 5464 <___init_veneer+0x4>
    5464:	.word	0x600016c5
	...

Disassembly of section .fini:

00005470 <_fini>:
    5470:	push	{r3, r4, r5, r6, r7, lr}
    5472:	nop
